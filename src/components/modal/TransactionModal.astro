---
import X from "@svg/mono/X.astro";
import Input from "@comps/Input.astro";
import TagsPicker from "@comps/tags/TagsPicker.astro";
import TypePicker from "@comps/TypePicker.astro";
import Amount from "../transaction/Amount.astro";
import Account from "../transaction/Account.astro";
import Date from "../transaction/Date.astro";
import Category from "../transaction/Category.astro";
---

<div
    id="transactionModal"
    class="fixed inset-0 bg-black/50 hidden items-center justify-center z-50"
>
    <div
        class="bg-gray-800 rounded-lg w-full max-w-2xl max-h-[90vh] overflow-y-auto"
    >
        <header
            class="flex items-end justify-between py-4.5 px-6 border-b border-gray-700"
        >
            <h2
                class="font-semibold text-purple-400 text-xl"
                id="modal-form-title"
            >
                Add Transaction
            </h2>
            <button
                type="button"
                id="closeModal"
                class="text-gray-400 hover:text-white"
            >
                <X class="w-6 h-6" />
            </button>
        </header>

        <form
            id="transactionForm"
            method="POST"
            class="p-6 flex flex-col gap-y-4"
        >
            <input
                type="hidden"
                name="_action"
                id="form-action"
                value="create"
            />
            <input type="hidden" name="id" id="transaction-id" />

            <!-- Account and Name -->
            <div class="flex items-center gap-x-4 justify-center">
                <Account classes="flex-1" />

                <Input
                    id="name"
                    name="Transaction Name"
                    formName="name"
                    required
                    placeholder="Enter transaction name"
                    classes="flex-1/3"
                />
            </div>

            <!-- Transaction Type and Amount -->
            <div class="flex items-center gap-x-4 justify-center">
                <TypePicker classes="flex-1" />
                <Amount classes="flex-1/3" />
            </div>

            <div class="flex items-center gap-x-4 justify-center">
                <Category classes="flex-1" />
                <Date id="date" name="date" formText="Date" />
            </div>

            <!-- Tags -->
            <TagsPicker id="tags" name="tags" />
            <!-- Form Buttons -->
            <div class="flex gap-3 pt-4">
                <div class="flex-3 text-right">
                    <button
                        type="button"
                        id="modal-cancel-btn"
                        class="bg-gray-600 hover:bg-gray-700 px-4 py-2 rounded text-white transition duration-200"
                    >
                        Cancel
                    </button>
                </div>
                <button
                    type="submit"
                    class="flex-2 bg-purple-600 hover:bg-purple-700 px-4 py-2 rounded text-white transition duration-200"
                >
                    <span id="submit-text">Save Transaction</span>
                </button>
            </div>
        </form>
    </div>
</div>

<script>
    // Import date utility functions once
    import {
        getCurrentDateTimeLocal,
        formatToDateTimeLocal,
    } from "@lib/date-utils.ts";

    // Define a TypeScript interface for transaction
    interface TransactionTag {
        name: string;
    }
    interface Transaction {
        id: string;
        accountId: string;
        type: string;
        name: string;
        amount: string;
        date: string;
        categoryId?: string;
        tags?: TransactionTag[];
    }

    // Modal functionality
    const modal = document.getElementById("transactionModal");
    const closeModal = document.getElementById("closeModal");
    const cancelBtn = document.getElementById("modal-cancel-btn");

    function openModal() {
        if (modal) {
            modal.classList.remove("hidden");
            modal.classList.add("flex");
            document.body.style.overflow = "hidden";
        }
    }

    function closeModalHandler() {
        if (modal) {
            modal.classList.add("hidden");
            modal.classList.remove("flex");
            document.body.style.overflow = "auto";
            resetForm();
        }
    }

    const dateInput = document.getElementById("date") as HTMLInputElement;
    const formTitle = document.getElementById("modal-form-title");
    const formAction = document.getElementById(
        "form-action",
    ) as HTMLInputElement;
    const transactionId = document.getElementById(
        "transaction-id",
    ) as HTMLInputElement;
    const submitText = document.getElementById("submit-text");
    const form = document.getElementById("transactionForm") as HTMLFormElement;

    async function resetForm() {
        if (formTitle) formTitle.textContent = "Add Transaction";
        if (formAction) formAction.value = "create";
        if (transactionId) transactionId.value = "";
        if (submitText) submitText.textContent = "Add Transaction";
        if (form) form.reset();
        if (dateInput) {
            dateInput.value = getCurrentDateTimeLocal();
        }
    }

    // Event listeners
    if (closeModal) {
        closeModal.addEventListener("click", closeModalHandler);
    }

    if (cancelBtn) {
        cancelBtn.addEventListener("click", closeModalHandler);
    }

    // Close modal when clicking outside
    if (modal) {
        modal.addEventListener("click", function (event) {
            if (event.target === modal) {
                closeModalHandler();
            }
        });
    }

    // Set today's date as default
    (() => {
        if (dateInput) {
            dateInput.value = getCurrentDateTimeLocal();
        }
    })();

    const accountId = document.getElementById("accountId") as HTMLSelectElement;
    const type = document.getElementById("type") as HTMLSelectElement;
    const name = document.getElementById("name") as HTMLInputElement;
    const amount = document.getElementById("amount") as HTMLInputElement;
    const date = document.getElementById("date") as HTMLInputElement;
    const categoryId = document.getElementById(
        "categoryId",
    ) as HTMLSelectElement;
    const tags = document.getElementById("tags") as HTMLInputElement;

    // Function to fill form for editing (will be called from parent page)
    async function fillFormForEdit(transaction: Transaction) {
        if (formTitle) formTitle.textContent = "Edit Transaction";
        if (formAction) formAction.value = "update";
        if (transactionId) transactionId.value = transaction.id;
        if (submitText) submitText.textContent = "Update Transaction";

        if (accountId) accountId.value = transaction.accountId;
        if (type) type.value = transaction.type;
        if (name) name.value = transaction.name;
        if (amount) amount.value = transaction.amount;
        if (date) {
            // Convert database date string to datetime-local format
            date.value = formatToDateTimeLocal(transaction.date);
        }
        if (categoryId) categoryId.value = transaction.categoryId || "";

        // Fill tags with runtime check
        if (tags) {
            const tagNames = Array.isArray(transaction.tags)
                ? transaction.tags.map((tag) => tag.name)
                : [];
            tags.value = tagNames.join(", ");
        }

        openModal();
    }

    // Make functions available globally
    (window as any).openTransactionModal = openModal;
    (window as any).fillFormForEdit = fillFormForEdit;
</script>
