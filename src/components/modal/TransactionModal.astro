---
import X from "@svg/mono/X.astro";
import Input from "@comps/Input.astro";
import TypePicker from "@comps/TypePicker.astro";
import Amount from "@comps/transaction/Amount.astro";
import Account from "@comps/transaction/Account.astro";
import Date from "@comps/transaction/Date.astro";
import Category from "@comps/transaction/Category.astro";
import TagsDropdownSelect from "@comps/tags/TagsDropdownSelect.astro";
import ScriptSelect from "@comps/accounts/ScriptSelect.astro";
import CSRFToken from "@comps/CSRFToken.astro";
const modalId = Astro.props.id ?? null;
---

<transaction-modal id={modalId ?? undefined}>
    <div
        class="modal-root fixed inset-0 bg-black/50 hidden items-center justify-center z-50"
    >
        <div
            class="bg-gray-800 rounded-lg w-full max-w-2xl max-h-[90vh] overflow-y-auto"
        >
            <header
                class="flex items-end justify-between py-4.5 px-6 border-b border-gray-700"
            >
                <h2
                    class="font-semibold text-purple-400 text-xl"
                    id="modalTitle"
                >
                    Add Transaction
                </h2>
                <button
                    type="button"
                    id="closeModalButton"
                    class="text-gray-400 hover:text-white"
                >
                    <X class="w-6 h-6" />
                </button>
            </header>

            <form
                id="transactionForm"
                class="p-6 flex flex-col gap-y-4"
            >
                <CSRFToken />

                <input type="hidden" name="id" id="transactionId" />

                <!-- Account and Name -->
                <div class="flex items-center gap-x-4 justify-center">
                    <Account id="accountId" classes="flex-1" />

                    <Input
                        id="name"
                        label="Transaction Name"
                        name="name"
                        required
                        placeholder="Enter transaction name"
                        classes="flex-1/3"
                    />

                    <ScriptSelect idSelect="accountId" />
                </div>

                <!-- Transaction Type and Amount -->
                <div class="flex items-center gap-x-4 justify-center">
                    <TypePicker classes="flex-1" />
                    <Amount classes="flex-1/3" />
                </div>

                <div class="flex items-center gap-x-4 justify-center">
                    <Category classes="flex-1" />
                    <Date id="date" name="date" label="Date" />
                </div>

                <!-- Tags -->
                <TagsDropdownSelect
                    id="tags"
                    name="tags"
                    label="Tags (custom dropdown)"
                />
                <!-- <TagsPicker id="tags" name="tags" /> -->
                <!-- Form Buttons -->
                <div class="flex gap-3 pt-4">
                    <div class="flex-3 text-right">
                        <button
                            type="button"
                            id="cancelBtn"
                            class="bg-gray-600 hover:bg-gray-700 px-4 py-2 rounded text-white transition duration-200"
                        >
                            Cancel
                        </button>
                    </div>
                    <button
                        type="submit"
                        class="flex-2 bg-purple-600 hover:bg-purple-700 px-4 py-2 rounded text-white transition duration-200"
                    >
                        <span id="submitBtnText">Save Transaction</span>
                    </button>
                </div>
            </form>
        </div>
    </div>

    <script>
        // Import date utility functions once
        import {
            getCurrentDateTimeLocal,
            formatToDateTimeLocal,
        } from "@lib/date-utils.ts";

        // Define a TypeScript interface for transaction
        interface TransactionTag {
            name: string;
        }
        interface Transaction {
            id: string;
            accountId: string;
            type: string;
            name: string;
            amount: string;
            date: string;
            categoryId?: string;
            tags?: TransactionTag[];
        }

        class TransactionModal extends HTMLElement {
            connectedCallback() {
                // root overlay inside the custom element
                const modal = this.querySelector(
                    ".modal-root",
                ) as HTMLDivElement;
                const closeModalButton = this.querySelector(
                    "#closeModalButton",
                ) as HTMLButtonElement;
                const cancelBtn = this.querySelector(
                    "#cancelBtn",
                ) as HTMLButtonElement;

                const dateInput = this.querySelector(
                    "#date",
                ) as HTMLInputElement;
                const formTitle = this.querySelector(
                    "#modalTitle",
                ) as HTMLHeadingElement;
                const formAction = this.querySelector(
                    "#formAction",
                ) as HTMLInputElement;
                const transactionId = this.querySelector(
                    "#transactionId",
                ) as HTMLInputElement;
                const submitText = this.querySelector(
                    "#submitBtnText",
                ) as HTMLSpanElement;
                const form = this.querySelector(
                    "#transactionForm",
                ) as HTMLFormElement;
                const tagsDropdownRoots = this.querySelectorAll(
                    "[data-tags-dropdown-root]",
                ) as NodeListOf<HTMLDivElement>;

                const accountId = this.querySelector(
                    "#accountId",
                ) as HTMLSelectElement;
                const type = this.querySelector("#type") as HTMLSelectElement;
                const name = this.querySelector("#name") as HTMLInputElement;
                const amount = this.querySelector(
                    "#amount",
                ) as HTMLInputElement;
                const categoryId = this.querySelector(
                    "#categoryId",
                ) as HTMLSelectElement;
                const tags = this.querySelector("#tags") as HTMLInputElement;

                const openModal = (opts?: any) => {
                    // opts: { type?: string, accountId?: string }
                    try {
                        const savedAccount =
                            opts && opts.accountId
                                ? opts.accountId
                                : window.localStorage
                                  ? window.localStorage.getItem(
                                        "selectedAccountId",
                                    )
                                  : null;
                        if (savedAccount && accountId)
                            accountId.value = savedAccount;
                    } catch (e) {
                        // ignore localStorage errors
                    }

                    // set type if provided
                    if (opts && opts.type) {
                        const radios = Array.from(
                            this.querySelectorAll('input[name="type"]'),
                        );
                        const matching = radios.find(
                            (r) => r.getAttribute("value") === opts.type,
                        );
                        if (matching && matching instanceof HTMLInputElement) {
                            matching.checked = true;
                            matching.dispatchEvent(new Event("change"));
                        }
                    }

                    if (modal) {
                        modal.classList.remove("hidden");
                        modal.classList.add("flex");
                        document.body.style.overflow = "hidden";
                    }
                };

                const closeModal = () => {
                    if (modal) {
                        modal.classList.add("hidden");
                        modal.classList.remove("flex");
                        document.body.style.overflow = "auto";
                        resetForm();
                    }
                };

                const resetForm = async () => {
                    if (formTitle) formTitle.textContent = "Add Transaction";
                    if (formAction) formAction.value = "create";
                    if (transactionId) transactionId.value = "";
                    if (submitText) submitText.textContent = "Add Transaction";
                    if (form) form.reset();
                    if (dateInput) {
                        dateInput.value = getCurrentDateTimeLocal();
                    }

                    // restore saved account after reset
                    try {
                        const saved =
                            window.localStorage.getItem("selectedAccountId");
                        if (saved && accountId) accountId.value = saved;
                    } catch (e) {}

                    if (tagsDropdownRoots) {
                        tagsDropdownRoots.forEach((tagsDropdownRoot) => {
                            const resetTags = (tagsDropdownRoot as any)
                                .resetTags;
                            if (typeof resetTags === "function") {
                                resetTags();
                            }
                        });
                    }
                };

                // Hook up events
                if (closeModalButton)
                    closeModalButton.addEventListener("click", closeModal);
                if (cancelBtn) cancelBtn.addEventListener("click", closeModal);

                // Handle form submission
                if (form) {
                    form.addEventListener("submit", async (e) => {
                        e.preventDefault();
                        
                        const formData = new FormData(form);
                        const action = formData.get("_action") as string;
                        
                        try {
                            let result;
                            if (action === "create") {
                                const { actions } = await import('astro:actions');
                                result = await actions.createTransaction(formData);
                            } else if (action === "update") {
                                const { actions } = await import('astro:actions');
                                result = await actions.updateTransaction(formData);
                            }
                            
                            if (result?.data?.ok) {
                                const { ToastService } = await import('@lib/toast.ts');
                                const message = action === "create" 
                                    ? "Transaction created successfully!" 
                                    : "Transaction updated successfully!";
                                ToastService.success(message);
                                closeModal();
                                // Reload the page to show updated data
                                window.location.reload();
                            } else {
                                const { ToastService } = await import('@lib/toast.ts');
                                const message = action === "create" 
                                    ? "Failed to create transaction. Please try again." 
                                    : "Failed to update transaction. Please try again.";
                                ToastService.error(message);
                                console.error('Transaction operation failed:', result?.error || result?.data?.error);
                            }
                        } catch (error) {
                            const { ToastService } = await import('@lib/toast.ts');
                            ToastService.error('An error occurred. Please try again.');
                            console.error('Error submitting transaction:', error);
                        }
                    });
                }

                if (modal) {
                    let downOutside = false;
                    modal.addEventListener("mousedown", (e) => {
                        if (
                            e.target === modal &&
                            (e as MouseEvent).button === 0
                        ) {
                            downOutside = true;
                        } else {
                            downOutside = false;
                        }
                    });
                    modal.addEventListener("mouseup", (e) => {
                        if (
                            downOutside &&
                            e.target === modal &&
                            (e as MouseEvent).button === 0
                        ) {
                            closeModal();
                        }
                        downOutside = false;
                    });
                }

                // default date
                if (dateInput) dateInput.value = getCurrentDateTimeLocal();

                // expose instance methods
                (this as any).openModal = openModal;
                (this as any).closeModal = closeModal;
                (this as any).resetForm = resetForm;
                (this as any).fillFormForEdit = async (
                    transaction: Transaction,
                ) => {
                    if (formTitle) formTitle.textContent = "Edit Transaction";
                    if (formAction) formAction.value = "update";
                    if (transactionId) transactionId.value = transaction.id;
                    if (submitText)
                        submitText.textContent = "Update Transaction";

                    if (accountId) accountId.value = transaction.accountId;
                    // set type radio
                    if (type) {
                        const radio = this.querySelector(
                            `input[name="type"][value="${transaction.type}"]`,
                        );
                        if (radio) (radio as HTMLInputElement).checked = true;
                    }
                    if (name) name.value = transaction.name;
                    if (amount) amount.value = transaction.amount;
                    if (dateInput) {
                        dateInput.value = formatToDateTimeLocal(
                            transaction.date,
                        );
                    }
                    if (categoryId)
                        categoryId.value = transaction.categoryId || "";

                    if (tags) {
                        const tagNames = Array.isArray(transaction.tags)
                            ? transaction.tags.map((tag) => tag.name)
                            : [];
                        tags.value = tagNames.join(", ");
                    }

                    openModal();
                };
            }
        }

        // Register the custom element
        if (!customElements.get("transaction-modal")) {
            customElements.define("transaction-modal", TransactionModal);
        }

        // No global helpers: prefer instance methods on <transaction-modal id="..."> elements
    </script>
</transaction-modal>
