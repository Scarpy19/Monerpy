---
import X from "@svg/mono/X.astro";
import Input from "@comps/Input.astro";
import { daysOfWeek, months, frequency } from "../../types/arrays.ts";
import TypePicker from "@comps/TypePicker.astro";
import Amount from "@comps/transaction/Amount.astro";
import Account from "@comps/transaction/Account.astro";
import Category from "../transaction/Category.astro";
import { getCurrentDate } from "@/lib/date-utils";
import TagsDropdownSelect from "../tags/TagsDropdownSelect.astro";
---

<div
    id="recurringTransactionModal"
    class="fixed inset-0 bg-black/50 hidden items-center justify-center z-50"
>
    <div
        class="bg-gray-800 rounded-lg w-full max-w-4xl max-h-[90vh] overflow-y-auto mx-4"
    >
        <header
            class="flex items-end justify-between py-4.5 px-6 border-b border-gray-700"
        >
            <h2
                class="font-semibold text-purple-400 text-xl"
                id="recurringModalTitle"
            >
                Add Recurring Transaction
            </h2>
            <button
                type="button"
                id="closeRecurringModal"
                class="text-gray-400 hover:text-white"
            >
                <X class="w-6 h-6" />
            </button>
        </header>

        <form
            id="recurringTransactionForm"
            method="POST"
            class="p-6 flex flex-col gap-y-6"
        >
            <input
                type="hidden"
                name="_action"
                id="recurringFormAction"
                value="create"
            />
            <input type="hidden" name="id" id="recurringId" />

            <!-- Account and Name -->
            <div class="flex items-center gap-x-4 justify-center">
                <Account />
                <Input
                    id="description"
                    label="Recurring Transaction Name"
                    name="description"
                    required
                    placeholder="Enter recurring transaction name"
                    classes="flex-1"
                />
            </div>

            <!-- Columns -->
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6 h-[346px]">
                <!-- Left Column -->
                <div class="flex flex-col gap-y-4">
                    <div class="flex items-center gap-x-4 justify-center">
                        <TypePicker />
                        <Amount classes="flex-1" />
                    </div>

                    <Category />

                    <!-- Start Date -->
                    <label for="startDate">
                        <p class="text-sm font-medium text-gray-300 mb-2">
                            Start Date *
                        </p>
                        <input
                            type="date"
                            id="startDate"
                            name="startDate"
                            required
                            class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-purple-500"
                        />
                    </label>

                    <!-- End Condition -->
                    <div>
                        <p
                            class="text-sm font-medium text-gray-300 mb-2 cursor-default"
                        >
                            End Condition *
                        </p>
                        <div
                            class="flex items-center justify-between flex-wrap"
                        >
                            <label
                                for="endConditionNever"
                                class="flex items-center gap-x-2"
                            >
                                <input
                                    id="endConditionNever"
                                    type="radio"
                                    name="endCondition"
                                    value="never"
                                    checked
                                    class="text-purple-600 focus:ring-purple-500"
                                />
                                <span class="text-white">Never ends</span>
                            </label>
                            <label
                                for="endConditionEndDate"
                                class="flex items-center gap-x-2"
                            >
                                <input
                                    id="endConditionEndDate"
                                    type="radio"
                                    name="endCondition"
                                    value="endDate"
                                    class="text-purple-600 focus:ring-purple-500"
                                />
                                <span class="text-white">End by date</span>
                            </label>
                            <label
                                for="endConditionMaxOccurrences"
                                class="flex items-center gap-x-2"
                            >
                                <input
                                    id="endConditionMaxOccurrences"
                                    type="radio"
                                    name="endCondition"
                                    value="maxOccurrences"
                                    class="text-purple-600 focus:ring-purple-500"
                                />
                                <span class="text-white"
                                    >End after X occurrences</span
                                >
                            </label>
                        </div>
                    </div>
                </div>

                <!-- Right Column -->
                <div class="flex flex-col gap-y-4">
                    <!-- Frequency -->
                    <label for="frequency">
                        <p class="text-sm font-medium text-gray-300 mb-2">
                            Frequency *
                        </p>
                        <select
                            id="frequency"
                            name="frequency"
                            required
                            class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-purple-500"
                        >
                            <option value="" class="hidden"
                                >Select frequency</option
                            >
                            {
                                frequency.map((freq) => (
                                    <option value={freq}>
                                        {freq.charAt(0).toUpperCase() +
                                            freq.slice(1)}
                                    </option>
                                ))
                            }
                        </select>
                    </label>

                    <div
                        class="flex items-baseline gap-x-4 justify-center *:grow"
                    >
                        <!-- Day of Month (for Monthly/Yearly) -->
                        <label
                            for="dayOfMonth"
                            id="dayOfMonthContainer"
                            class="hidden"
                        >
                            <p class="text-sm font-medium text-gray-300 mb-2">
                                Day of Month *
                            </p>
                            <input
                                type="number"
                                id="dayOfMonth"
                                name="dayOfMonth"
                                min="1"
                                max="31"
                                placeholder="1-31"
                                class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-purple-500"
                            />
                            <p class="text-xs text-gray-400 mt-1 w-[125%]">
                                For months with fewer days, the last day of the
                                month will be used
                            </p>
                        </label>

                        <!-- Day of Week (for Weekly) -->
                        <label
                            for="dayOfWeek"
                            id="dayOfWeekContainer"
                            class="hidden"
                        >
                            <p class="text-sm font-medium text-gray-300 mb-2">
                                Day of Week *
                            </p>
                            <select
                                id="dayOfWeek"
                                name="dayOfWeek"
                                class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-purple-500"
                            >
                                <option value="" class="hidden"
                                    >Select day of week</option
                                >
                                {
                                    daysOfWeek.map((day) => (
                                        <option value={day.value}>
                                            {day.label}
                                        </option>
                                    ))
                                }
                            </select>
                        </label>

                        <!-- Time of Day -->
                        <label
                            for="timeOfDay"
                            id="timeOfDayContainer"
                            class="hidden grow-0"
                        >
                            <p class="text-sm font-medium text-gray-300 mb-2">
                                Time of Day *
                            </p>
                            <input
                                type="time"
                                id="timeOfDay"
                                name="timeOfDay"
                                required
                                value="09:00"
                                class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-purple-500"
                            />
                        </label>
                    </div>

                    <!-- Month (for Yearly) -->
                    <label for="month" id="monthContainer" class="hidden">
                        <p class="text-sm font-medium text-gray-300 mb-2">
                            Month *
                        </p>
                        <select
                            id="month"
                            name="month"
                            class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-purple-500"
                        >
                            <option value="" class="hidden">Select month</option
                            >
                            {
                                months.map((month) => (
                                    <option value={month.value}>
                                        {month.label}
                                    </option>
                                ))
                            }
                        </select>
                    </label>

                    <!-- End Date (when endCondition is endDate) -->
                    <label for="endDate" id="endDateContainer" class="hidden">
                        <p class="text-sm font-medium text-gray-300 mb-2">
                            End Date *
                        </p>
                        <input
                            type="date"
                            id="endDate"
                            name="endDate"
                            min={getCurrentDate()}
                            class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-purple-500"
                        />
                    </label>

                    <!-- Max Occurrences (when endCondition is maxOccurrences) -->
                    <label
                        for="maxOccurrences"
                        id="maxOccurrencesContainer"
                        class="hidden"
                    >
                        <p class="text-sm font-medium text-gray-300 mb-2">
                            Maximum Occurrences *
                        </p>
                        <input
                            type="number"
                            id="maxOccurrences"
                            name="maxOccurrences"
                            min="1"
                            placeholder="Number of times to repeat"
                            class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-purple-500"
                        />
                    </label>
                </div>
            </div>

            <TagsDropdownSelect />
            <!-- <TagsPicker
                id="recurringTags"
                name="tags"
                label="Tags (comma-separated)"
            /> -->

            <!-- Form Buttons -->
            <div class="flex gap-3 pt-4">
                <div class="flex-3 text-right">
                    <button
                        type="button"
                        id="recurringModalCancelBtn"
                        class="bg-gray-600 hover:bg-gray-700 px-4 py-2 rounded text-white transition duration-200"
                    >
                        Cancel
                    </button>
                </div>
                <button
                    type="submit"
                    class="flex-2 bg-purple-600 hover:bg-purple-700 px-4 py-2 rounded text-white transition duration-200"
                >
                    <span id="recurringSubmitBtnText"
                        >Add Recurring Transaction</span
                    >
                </button>
            </div>
        </form>
    </div>
</div>

<script>
    // Modal functionality
    const modal = document.getElementById("recurringTransactionModal");
    const closeButton = document.getElementById("closeRecurringModal");
    const cancelBtn = document.getElementById("recurringModalCancelBtn");

    function openModal() {
        if (modal) {
            modal.classList.remove("hidden");
            modal.classList.add("flex");
            document.body.style.overflow = "hidden";
        }
    }

    function closeModal() {
        if (modal) {
            modal.classList.add("hidden");
            modal.classList.remove("flex");
            document.body.style.overflow = "auto";
            resetForm();
        }
    }

    const formTitle = document.getElementById("recurringModalTitle");
    const formAction = document.getElementById(
        "recurringFormAction",
    ) as HTMLInputElement;
    const recurringTransactionId = document.getElementById(
        "recurringId",
    ) as HTMLInputElement;
    const submitText = document.getElementById("recurringSubmitBtnText");
    const form = document.getElementById(
        "recurringTransactionForm",
    ) as HTMLFormElement;
    const startDateInput = document.getElementById(
        "startDate",
    ) as HTMLInputElement;
    const tagsDropdownRoots = document.querySelectorAll(
        "[data-tags-dropdown-root]",
    ) as NodeListOf<HTMLDivElement>;

    async function resetForm() {
        if (formTitle) formTitle.textContent = "Add Recurring Transaction";
        if (formAction) formAction.value = "create";
        if (recurringTransactionId) recurringTransactionId.value = "";
        if (submitText) submitText.textContent = "Add Recurring Transaction";
        if (form) form.reset();
        if (startDateInput) {
            const today = new Date();
            startDateInput.value = today.toISOString().split("T")[0];
        }
        // Reset time to default
        const timeInput = document.getElementById(
            "timeOfDay",
        ) as HTMLInputElement;

        if (timeInput) timeInput.value = "09:00";

        // Reset end condition to never
        const neverRadio = document.querySelector(
            'input[name="endCondition"][value="never"]',
        ) as HTMLInputElement;

        if (neverRadio) neverRadio.checked = true;

        // Hide frequency-specific fields
        hideAllFrequencyFields();
        hideAllEndConditionFields();

        // Reset tags
        const recurringTags = document.getElementById(
            "recurringTags",
        ) as HTMLInputElement;

        if (recurringTags) recurringTags.value = "";

        if (tagsDropdownRoots) {
            tagsDropdownRoots.forEach((tagsDropdownRoot) => {
                const resetTags = (tagsDropdownRoot as any).resetTags;
                if (typeof resetTags === "function") {
                    resetTags();
                }
            });
        }
    }

    // Event listeners
    if (closeButton) {
        closeButton.addEventListener("click", closeModal);
    }

    if (cancelBtn) {
        cancelBtn.addEventListener("click", closeModal);
    }

    // Close modal only if the *entire* left-click starts and finishes outside the modal content
    if (modal) {
        let downOutside = false;

        modal.addEventListener("mousedown", function (e) {
            // button 0 = left mouse button
            if (e.target === modal && e.button === 0) {
                downOutside = true;
            } else {
                downOutside = false;
            }
        });

        modal.addEventListener("mouseup", function (e) {
            if (downOutside && e.target === modal && e.button === 0) {
                closeModal();
            }
            downOutside = false;
        });
    }

    // Frequency change handler
    const frequencySelect = document.getElementById(
        "frequency",
    ) as HTMLSelectElement;
    const dayOfWeekContainer = document.getElementById("dayOfWeekContainer");
    const dayOfMonthContainer = document.getElementById("dayOfMonthContainer");
    const monthContainer = document.getElementById("monthContainer");
    const timeOfDayContainer = document.getElementById("timeOfDayContainer");

    function hideAllFrequencyFields() {
        if (dayOfWeekContainer) dayOfWeekContainer.classList.add("hidden");
        if (dayOfMonthContainer) dayOfMonthContainer.classList.add("hidden");
        if (monthContainer) monthContainer.classList.add("hidden");
        if (timeOfDayContainer) timeOfDayContainer.classList.add("hidden");
    }

    if (frequencySelect) {
        frequencySelect.addEventListener("change", function () {
            hideAllFrequencyFields();

            const frequency = this.value;

            // Show time of day for any valid frequency
            if (frequency && frequency !== "") {
                if (timeOfDayContainer)
                    timeOfDayContainer.classList.remove("hidden");
            }

            if (frequency === "weekly") {
                if (dayOfWeekContainer)
                    dayOfWeekContainer.classList.remove("hidden");
            } else if (frequency === "monthly") {
                if (dayOfMonthContainer)
                    dayOfMonthContainer.classList.remove("hidden");
            } else if (frequency === "yearly") {
                if (dayOfMonthContainer)
                    dayOfMonthContainer.classList.remove("hidden");
                if (monthContainer) monthContainer.classList.remove("hidden");
            }
        });
    }

    // End condition change handler
    const endConditionRadios = document.querySelectorAll(
        'input[name="endCondition"]',
    );
    const endDateContainer = document.getElementById("endDateContainer");
    const maxOccurrencesContainer = document.getElementById(
        "maxOccurrencesContainer",
    );

    function hideAllEndConditionFields() {
        if (endDateContainer) endDateContainer.classList.add("hidden");
        if (maxOccurrencesContainer)
            maxOccurrencesContainer.classList.add("hidden");
    }

    endConditionRadios.forEach((radio) => {
        radio.addEventListener("change", function (this: HTMLInputElement) {
            hideAllEndConditionFields();

            const endCondition = this.value;

            if (endCondition === "endDate") {
                if (endDateContainer)
                    endDateContainer.classList.remove("hidden");
            } else if (endCondition === "maxOccurrences") {
                if (maxOccurrencesContainer)
                    maxOccurrencesContainer.classList.remove("hidden");
            }
        });
    });

    // Set today's date as default
    (() => {
        const startDateInput = document.getElementById(
            "startDate",
        ) as HTMLInputElement;

        if (startDateInput) {
            const today = new Date();
            startDateInput.value = today.toISOString().split("T")[0];
        }
    })();

    // Function to fill form for editing (will be called from parent page)
    async function fillFormForEdit(recurringTransaction: any) {
        // Fill form with recurring transaction data
        const accountId = document.getElementById(
            "accountId",
        ) as HTMLSelectElement;
        const type = document.getElementById(
            "recurringType",
        ) as HTMLSelectElement;
        const description = document.getElementById(
            "description",
        ) as HTMLInputElement;
        const amount = document.getElementById("amount") as HTMLInputElement;
        const frequency = document.getElementById(
            "frequency",
        ) as HTMLSelectElement;
        const dayOfWeek = document.getElementById(
            "dayOfWeek",
        ) as HTMLSelectElement;
        const dayOfMonth = document.getElementById(
            "dayOfMonth",
        ) as HTMLInputElement;
        const month = document.getElementById("month") as HTMLSelectElement;
        const timeOfDay = document.getElementById(
            "timeOfDay",
        ) as HTMLInputElement;
        const startDate = document.getElementById(
            "startDate",
        ) as HTMLInputElement;
        const endDate = document.getElementById("endDate") as HTMLInputElement;
        const maxOccurrences = document.getElementById(
            "maxOccurrences",
        ) as HTMLInputElement;
        const categoryId = document.getElementById(
            "categoryId",
        ) as HTMLSelectElement;
        const tagsInput = document.getElementById(
            "recurringTags",
        ) as HTMLInputElement;

        if (recurringTransactionId)
            recurringTransactionId.value = recurringTransaction.id;

        if (submitText) submitText.textContent = "Update Recurring Transaction";

        if (accountId) accountId.value = recurringTransaction.accountId;
        if (type) type.value = recurringTransaction.type;
        if (description) description.value = recurringTransaction.description;
        if (amount) amount.value = recurringTransaction.amount;
        if (frequency) {
            frequency.value = recurringTransaction.frequency;
            // Trigger change event to show appropriate fields
            frequency.dispatchEvent(new Event("change"));
        }
        if (dayOfWeek && recurringTransaction.dayOfWeek !== null)
            dayOfWeek.value = recurringTransaction.dayOfWeek;
        if (dayOfMonth && recurringTransaction.dayOfMonth !== null)
            dayOfMonth.value = recurringTransaction.dayOfMonth;
        if (month && recurringTransaction.month !== null)
            month.value = recurringTransaction.month;
        if (timeOfDay) timeOfDay.value = recurringTransaction.timeOfDay;
        if (startDate) {
            // Convert database date string to date input format
            const startDateObj = new Date(recurringTransaction.startDate);
            startDate.value = startDateObj.toISOString().split("T")[0];
        }
        if (categoryId)
            categoryId.value = recurringTransaction.categoryId || "";

        // Handle end condition
        let endCondition = "never";

        if (recurringTransaction.endDate) {
            endCondition = "endDate";
            if (endDate) {
                const endDateObj = new Date(recurringTransaction.endDate);
                endDate.value = endDateObj.toISOString().split("T")[0];
            }
        } else if (recurringTransaction.maxOccurrences) {
            endCondition = "maxOccurrences";
            if (maxOccurrences)
                maxOccurrences.value = recurringTransaction.maxOccurrences;
        }

        // Set end condition radio
        const endConditionRadio = document.querySelector(
            `input[name="endCondition"][value="${endCondition}"]`,
        ) as HTMLInputElement;

        if (endConditionRadio) {
            endConditionRadio.checked = true;
            endConditionRadio.dispatchEvent(new Event("change"));
        }

        if (formTitle) formTitle.textContent = "Edit Recurring Transaction";
        if (formAction) formAction.value = "update";

        if (tagsInput && Array.isArray(recurringTransaction.tags)) {
            tagsInput.value = recurringTransaction.tags
                .map((t: any) => t.name)
                .join(", ");
        }

        openModal();
    }

    // Make functions available globally
    (window as any).openRecurringTransactionModal = openModal;
    (window as any).fillRecurringFormForEdit = fillFormForEdit;
</script>
