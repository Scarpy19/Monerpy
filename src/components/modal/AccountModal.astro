---
import X from "@svg/mono/X.astro";
import ColorPicker from "../ColorPicker.astro";

// Account type options
const accountTypes = [
    { value: "Cash", label: "Cash", icon: "üíµ" },
    { value: "Checking", label: "Checking Account", icon: "üè¶" },
    { value: "Savings", label: "Savings Account", icon: "üí∞" },
    { value: "CreditCard", label: "Credit Card", icon: "üí≥" },
    { value: "Investment", label: "Investment Account", icon: "üìà" },
    { value: "Loan", label: "Loan Account", icon: "üè†" },
];

---

<!-- Modal Background -->
<div id="accountModal" class="fixed inset-0 bg-black/50 z-50 hidden">
    <div class="flex items-center justify-center min-h-screen p-4">
        <div
            class="bg-gray-800 rounded-lg shadow-xl max-w-md w-full max-h-[90vh] overflow-y-auto"
        >
            <!-- Modal Header -->
            <div
                class="flex items-end justify-between p-6 border-b border-gray-700"
            >
                <h2 class="text-xl font-semibold text-purple-400">
                    Create Account
                </h2>
                <button
                    type="button"
                    id="closeModal"
                    class="text-gray-400 hover:text-white transition-colors"
                >
                    <X class="w-6 h-6" />
                </button>
            </div>

            <!-- Modal Content -->
            <div class="p-6">
                <form method="POST" class="flex flex-col gap-y-4">
                    <input type="hidden" name="_action" value="create" />

                    <div>
                        <label
                            for="name"
                            class="block text-sm font-medium text-gray-300 mb-2"
                        >
                            Account Name *
                        </label>
                        <input
                            type="text"
                            id="name"
                            name="name"
                            required
                            class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                            placeholder="Enter account name"
                        />
                    </div>

                    <div>
                        <label
                            for="accountType"
                            class="block text-sm font-medium text-gray-300 mb-2"
                        >
                            Account Type *
                        </label>
                        <select
                            id="accountType"
                            name="accountType"
                            required
                            class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                        >
                            <option value="">Select account type</option>
                            {
                                accountTypes.map((type) => (
                                    <option value={type.value}>
                                        {type.icon} {type.label}
                                    </option>
                                ))
                            }
                        </select>
                    </div>

                    <div>
                        <label
                            for="initialBalance"
                            class="block text-sm font-medium text-gray-300 mb-2"
                        >
                            Initial Balance
                        </label>
                        <input
                            type="number"
                            id="initialBalance"
                            name="initialBalance"
                            step="0.01"
                            value="0"
                            class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                            placeholder="0.00"
                        />
                    </div>

                    <div>
                        <ColorPicker id="color" formName="Account Color" />
                    </div>

                    <div class="flex gap-x-3 pt-4">
                        <button
                            type="button"
                            id="cancelBtn"
                            class="flex-1 bg-gray-600 hover:bg-gray-700 text-white font-semibold py-2 px-4 rounded-lg transition-colors"
                        >
                            Cancel
                        </button>
                        <button
                            type="submit"
                            class="flex-1 bg-purple-600 hover:bg-purple-700 text-white font-semibold py-2 px-4 rounded-lg transition-colors"
                        >
                            Create Account
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const modal = document.getElementById("accountModal");
        const closeModalBtn = document.getElementById("closeModal");
        const cancelBtn = document.getElementById("cancelBtn");
        const colorPicker = document.getElementById(
            "color",
        ) as HTMLInputElement;
        const colorHex = document.getElementById(
            "colorHex",
        ) as HTMLInputElement;

        // Modal controls
        function showModal() {
            if (modal) {
                modal.classList.remove("hidden");
                document.body.style.overflow = "hidden";
            }
        }

        function closeModal() {
            if (modal) {
                modal.classList.add("hidden");
                document.body.style.overflow = "auto";
            }
        }

        // Close modal events
        if (closeModalBtn) {
            closeModalBtn.addEventListener("click", closeModal);
        }

        if (cancelBtn) {
            cancelBtn.addEventListener("click", closeModal);
        }

        // Close modal when clicking outside
        if (modal) {
            modal.addEventListener("click", function (e) {
                if (e.target === modal) {
                    closeModal();
                }
            });
        }

        // Color picker synchronization
        if (colorPicker && colorHex) {
            colorPicker.addEventListener("change", function () {
                colorHex.value = this.value;
            });

            colorHex.addEventListener("input", function () {
                if (/^#[0-9A-Fa-f]{6}$/.test(this.value)) {
                    colorPicker.value = this.value;
                }
            });
        }

        // Expose showModal function globally
        (window as any).openAccountModal = showModal;
    });
</script>
