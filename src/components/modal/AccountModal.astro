---
import X from "@svg/mono/X.astro";
import ColorPicker from "../ColorPicker.astro";
import Input from "@comps/Input.astro";
import { accountTypes } from "../../types/arrays.ts";
---

<!-- Modal Background -->
<div
    id="accountModal"
    class="fixed inset-0 bg-black/50 z-50 hidden items-center justify-center h-screen"
>
    <div
        class="bg-gray-800 rounded-lg shadow-xl max-w-md w-full max-h-[90vh] overflow-y-auto"
    >
        <!-- Modal Header -->
        <header
            class="flex items-end justify-between py-4.5 px-6 border-b border-gray-700"
        >
            <h2 class="text-xl font-semibold text-purple-400">
                Create Account
            </h2>
            <button
                type="button"
                id="closeModal"
                class="text-gray-400 hover:text-white transition-colors"
            >
                <X class="w-6 h-6" />
            </button>
        </header>

        <!-- Modal Content -->
        <form method="POST" class="p-6 flex flex-col gap-y-4">
            <input type="hidden" name="_action" value="create" />

            <Input
                id="accountName"
                name="Account Name"
                formName="name"
                required
                placeholder="Enter account name"
            />

            <label>
                <p class="text-sm font-medium text-gray-200 mb-2">
                    Account Type *
                </p>
                <select
                    id="accountType"
                    name="accountType"
                    required
                    class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                >
                    <option value="">Select account type</option>
                    {
                        accountTypes.map((type) => (
                            <option value={type.value}>
                                {type.icon} {type.label}
                            </option>
                        ))
                    }
                </select>
            </label>

            <label>
                <p class="text-sm font-medium text-gray-200 mb-2">
                    Initial Balance
                </p>
                <input
                    type="number"
                    id="initialBalance"
                    name="initialBalance"
                    step="0.01"
                    value="0.00"
                    class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                    placeholder="0.00"
                />
            </label>

            <ColorPicker id="color" label="Account Color" />

            <div class="flex items-center justify-end gap-x-3 pt-4">
                <button
                    type="button"
                    id="cancelAccountButton"
                    class="bg-gray-600 hover:bg-gray-700 px-4 py-2 rounded text-white transition duration-200"
                >
                    Cancel
                </button>
                <button
                    type="submit"
                    class="px-6 py-2 bg-purple-600 hover:bg-purple-700 text-white font-semibold rounded transition-colors"
                >
                    Create Account
                </button>
            </div>
        </form>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const modal = document.getElementById("accountModal");
        const closeModalBtn = document.getElementById("closeModal");
        const cancelBtn = document.getElementById("cancelAccountButton");

        // Modal controls
        function showModal() {
            if (modal) {
                modal.classList.remove("hidden");
                modal.classList.add("flex");
                document.body.style.overflow = "hidden";
            }
        }

        function closeModal() {
            if (modal) {
                modal.classList.add("hidden");
                modal.classList.remove("flex");
                document.body.style.overflow = "auto";
            }
        }

        // Close modal events
        if (closeModalBtn) {
            closeModalBtn.addEventListener("click", closeModal);
        }

        if (cancelBtn) {
            cancelBtn.addEventListener("click", closeModal);
        }

        // Close modal when clicking and releasing left mouse button outside modal content
        if (modal) {
            modal.addEventListener("mouseup", function (e) {
                if (e.target === modal && e.button === 0) {
                    closeModal();
                }
            });
        }

        // Expose showModal function globally
        (window as any).openAccountModal = showModal;
    });
</script>
