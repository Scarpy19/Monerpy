---
import { actions } from "astro:actions";
import type { Category, GetCategoriesResult } from "@types.d.ts";

interface Props {
    id?: string;
    classes?: string;
}

const { classes, id } = Astro.props;

const categoriesResult = await Astro.callAction(actions.getCategories, {});

// Trust the server action to return the typed payload exported from the action.
const typedResult = categoriesResult.data as GetCategoriesResult | undefined;
const categories: Category[] = typedResult?.ok ? typedResult.categories : [];
---

<label for={`${id}categoryId`} class={classes}>
    <p class="text-sm font-medium text-gray-300 mb-2">Category</p>
    <select
        id={`${id}categoryId`}
        name="categoryId"
        class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-purple-500"
    >
        <option value="">Select a category</option>
        {
            categories &&
                categories.map((category) => {
                    const parentName = category.parent?.name ?? null;

                    return (
                        <option
                            value={category.id.toString()}
                            data-color={category.color}
                        >
                            {parentName
                                ? `${parentName} > ${category.name}`
                                : category.name}
                        </option>
                    );
                })
        }
    </select>
</label>
