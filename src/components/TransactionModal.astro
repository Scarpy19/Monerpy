---
import { actions } from "astro:actions";

// Get data for the modal form
const [accountsResult, categoriesResult, tagsResult] = await Promise.all([
    Astro.callAction(actions.getAccounts, {}),
    Astro.callAction(actions.getCategories, {}),
    Astro.callAction(actions.getTags, {}),
]);

const accounts = accountsResult.data?.ok ? accountsResult.data.accounts : [];
const categories = categoriesResult.data?.ok
    ? categoriesResult.data.categories
    : [];
const tags = tagsResult.data?.ok ? tagsResult.data.tags : [];
---

<div
    id="transactionModal"
    class="fixed inset-0 bg-black/50 hidden items-center justify-center z-50"
>
    <div
        class="bg-gray-800 rounded-lg p-6 w-full max-w-2xl max-h-[90vh] overflow-y-auto mx-4"
    >
        <div class="flex justify-between items-center mb-6">
            <h2
                class="font-semibold text-purple-400 text-xl"
                id="modal-form-title"
            >
                Add Transaction
            </h2>
            <button
                type="button"
                id="closeModal"
                class="text-gray-400 hover:text-white text-2xl"
            >
                ×
            </button>
        </div>

        <form id="transactionForm" method="POST" class="space-y-4">
            <input
                type="hidden"
                name="_action"
                id="form-action"
                value="create"
            />
            <input type="hidden" name="id" id="transaction-id" />

            <!-- Account Selection -->
            <div>
                <label
                    for="accountId"
                    class="block text-sm font-medium text-gray-300 mb-2"
                >
                    Account *
                </label>
                <select
                    id="accountId"
                    name="accountId"
                    required
                    class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-purple-500"
                >
                    <option value="">Select an account</option>
                    {
                        accounts &&
                            accounts.map((account) => (
                                <option
                                    value={account.id}
                                    data-color={account.color}
                                >
                                    {account.name} ({account.accountType}) -{" "}
                                    {new Intl.NumberFormat("es-ES", {
                                        style: "currency",
                                        currency: "EUR",
                                        minimumFractionDigits: 2,
                                    }).format(account.balance)}
                                </option>
                            ))
                    }
                </select>
            </div>

            <!-- Transaction Type -->
            <div>
                <label
                    for="type"
                    class="block text-sm font-medium text-gray-300 mb-2"
                >
                    Type *
                </label>
                <select
                    id="type"
                    name="type"
                    required
                    class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-purple-500"
                >
                    <option value="">Select transaction type</option>
                    <option value="Income">Income</option>
                    <option value="Expense">Expense</option>
                    <option value="InvestmentBuy">Investment Buy</option>
                    <option value="InvestmentSell">Investment Sell</option>
                    <option value="LoanPayment">Loan Payment</option>
                    <option value="LoanRepayment">Loan Repayment</option>
                </select>
            </div>

            <!-- Transaction Name -->
            <div>
                <label
                    for="name"
                    class="block text-sm font-medium text-gray-300 mb-2"
                >
                    Description *
                </label>
                <input
                    type="text"
                    id="name"
                    name="name"
                    required
                    placeholder="Enter transaction description"
                    class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-purple-500"
                />
            </div>

            <!-- Amount -->
            <div>
                <label
                    for="amount"
                    class="block text-sm font-medium text-gray-300 mb-2"
                >
                    Amount (€) *
                </label>
                <input
                    type="number"
                    id="amount"
                    name="amount"
                    required
                    min="0.01"
                    step="0.01"
                    placeholder="0.00"
                    class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-purple-500"
                />
            </div>

            <!-- Date -->
            <div>
                <label
                    for="date"
                    class="block text-sm font-medium text-gray-300 mb-2"
                >
                    Date *
                </label>
                <input
                    type="datetime-local"
                    id="date"
                    name="date"
                    required
                    class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-purple-500"
                />
            </div>

            <!-- Category -->
            <div>
                <label
                    for="categoryId"
                    class="block text-sm font-medium text-gray-300 mb-2"
                >
                    Category
                </label>
                <select
                    id="categoryId"
                    name="categoryId"
                    class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-purple-500"
                >
                    <option value="">Select a category (optional)</option>
                    {
                        categories &&
                            categories.map((category) => (
                                <option
                                    value={category.id}
                                    data-color={category.color}
                                >
                                    {category.parent
                                        ? `${category.parent.name} > ${category.name}`
                                        : category.name}
                                </option>
                            ))
                    }
                </select>
            </div>

            <!-- New Category -->
            <div>
                <label
                    for="newCategory"
                    class="block text-sm font-medium text-gray-300 mb-2"
                >
                    Or create new category
                </label>
                <div class="flex gap-2">
                    <input
                        type="text"
                        id="newCategory"
                        name="newCategory"
                        placeholder="New category name"
                        class="flex-1 px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-purple-500"
                    />
                    <input
                        type="color"
                        id="newCategoryColor"
                        name="newCategoryColor"
                        value="#6172F3"
                        class="w-12 h-10 bg-gray-700 border border-gray-600 rounded-lg"
                    />
                </div>
            </div>

            <!-- Tags -->
            <div>
                <label
                    for="tags"
                    class="block text-sm font-medium text-gray-300 mb-2"
                >
                    Tags (comma-separated)
                </label>
                <input
                    type="text"
                    id="tags"
                    name="tags"
                    placeholder="tag1, tag2, tag3"
                    class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-purple-500"
                />
                <div class="mt-2">
                    <p class="text-xs text-gray-400 mb-1">Existing tags:</p>
                    <div class="flex flex-wrap gap-1">
                        {
                            tags &&
                                tags.map((tag) => (
                                    <button
                                        type="button"
                                        class="tag-btn text-xs px-2 py-1 rounded text-white hover:opacity-80"
                                        style={`background-color: ${tag.color}`}
                                        data-tag={tag.name}
                                    >
                                        {tag.name}
                                    </button>
                                ))
                        }
                    </div>
                </div>
            </div>

            <!-- Form Buttons -->
            <div class="flex gap-3 pt-4">
                <button
                    type="submit"
                    class="flex-1 bg-purple-600 hover:bg-purple-700 px-4 py-2 rounded text-white transition duration-200"
                >
                    <span id="submit-text">Add Transaction</span>
                </button>
                <button
                    type="button"
                    id="modal-cancel-btn"
                    class="bg-gray-600 hover:bg-gray-700 px-4 py-2 rounded text-white transition duration-200"
                >
                    Cancel
                </button>
            </div>
        </form>
    </div>
</div>

<script>
    // Import date utility functions once
    import {
        getCurrentDateTimeLocal,
        formatToDateTimeLocal,
    } from "../lib/date-utils.js";

    // Modal functionality
    const modal = document.getElementById("transactionModal");
    const closeModal = document.getElementById("closeModal");
    const cancelBtn = document.getElementById("modal-cancel-btn");

    function openModal() {
        if (modal) {
            modal.classList.remove("hidden");
            modal.classList.add("flex");
        }
    }

    function closeModalHandler() {
        if (modal) {
            modal.classList.add("hidden");
            modal.classList.remove("flex");
            resetForm();
        }
    }

    async function resetForm() {
        const formTitle = document.getElementById("modal-form-title");
        const formAction = document.getElementById(
            "form-action",
        ) as HTMLInputElement;
        const transactionId = document.getElementById(
            "transaction-id",
        ) as HTMLInputElement;
        const submitText = document.getElementById("submit-text");
        const form = document.getElementById(
            "transactionForm",
        ) as HTMLFormElement;
        const dateInput = document.getElementById("date") as HTMLInputElement;

        if (formTitle) formTitle.textContent = "Add Transaction";
        if (formAction) formAction.value = "create";
        if (transactionId) transactionId.value = "";
        if (submitText) submitText.textContent = "Add Transaction";
        if (form) form.reset();
        if (dateInput) {
            dateInput.value = getCurrentDateTimeLocal();
        }
    }

    // Event listeners
    if (closeModal) {
        closeModal.addEventListener("click", closeModalHandler);
    }

    if (cancelBtn) {
        cancelBtn.addEventListener("click", closeModalHandler);
    }

    // Close modal when clicking outside
    if (modal) {
        modal.addEventListener("click", function (event) {
            if (event.target === modal) {
                closeModalHandler();
            }
        });
    }

    // Set today's date as default
    (() => {
        const dateInput = document.getElementById("date") as HTMLInputElement;
        if (dateInput) {
            dateInput.value = getCurrentDateTimeLocal();
        }
    })();

    // Tag button functionality
    document.querySelectorAll(".tag-btn").forEach((btn) => {
        btn.addEventListener("click", function (this: HTMLElement) {
            const tagName = this.dataset.tag;
            const tagsInput = document.getElementById(
                "tags",
            ) as HTMLInputElement;
            if (tagsInput && tagName) {
                const currentTags = tagsInput.value
                    .split(",")
                    .map((t) => t.trim())
                    .filter((t) => t.length > 0);

                if (!currentTags.includes(tagName)) {
                    currentTags.push(tagName);
                    tagsInput.value = currentTags.join(", ");
                }
            }
        });
    });

    // New category input handling
    const newCategoryInput = document.getElementById(
        "newCategory",
    ) as HTMLInputElement;
    if (newCategoryInput) {
        newCategoryInput.addEventListener("input", function () {
            const categorySelect = document.getElementById(
                "categoryId",
            ) as HTMLSelectElement;
            if (categorySelect) {
                if (this.value.trim()) {
                    categorySelect.disabled = true;
                    categorySelect.value = "";
                } else {
                    categorySelect.disabled = false;
                }
            }
        });
    }

    const categorySelect = document.getElementById(
        "categoryId",
    ) as HTMLSelectElement;
    if (categorySelect) {
        categorySelect.addEventListener("change", function () {
            const newCategoryInput = document.getElementById(
                "newCategory",
            ) as HTMLInputElement;
            if (newCategoryInput) {
                if (this.value) {
                    newCategoryInput.disabled = true;
                    newCategoryInput.value = "";
                } else {
                    newCategoryInput.disabled = false;
                }
            }
        });
    }

    // Function to fill form for editing (will be called from parent page)
    async function fillFormForEdit(transaction: any) {
        const formTitle = document.getElementById("modal-form-title");
        const formAction = document.getElementById(
            "form-action",
        ) as HTMLInputElement;
        const transactionId = document.getElementById(
            "transaction-id",
        ) as HTMLInputElement;
        const submitText = document.getElementById("submit-text");

        if (formTitle) formTitle.textContent = "Edit Transaction";
        if (formAction) formAction.value = "update";
        if (transactionId) transactionId.value = transaction.id;
        if (submitText) submitText.textContent = "Update Transaction";

        // Fill form with transaction data
        const accountId = document.getElementById(
            "accountId",
        ) as HTMLSelectElement;
        const type = document.getElementById("type") as HTMLSelectElement;
        const name = document.getElementById("name") as HTMLInputElement;
        const amount = document.getElementById("amount") as HTMLInputElement;
        const date = document.getElementById("date") as HTMLInputElement;
        const categoryId = document.getElementById(
            "categoryId",
        ) as HTMLSelectElement;
        const tags = document.getElementById("tags") as HTMLInputElement;

        if (accountId) accountId.value = transaction.accountId;
        if (type) type.value = transaction.type;
        if (name) name.value = transaction.name;
        if (amount) amount.value = transaction.amount;
        if (date) {
            // Convert database date string to datetime-local format
            date.value = formatToDateTimeLocal(transaction.date);
        }
        if (categoryId) categoryId.value = transaction.categoryId || "";

        // Fill tags
        if (tags) {
            const tagNames = transaction.tags.map((tag: any) => tag.name);
            tags.value = tagNames.join(", ");
        }

        openModal();
    }

    // Make functions available globally
    (window as any).openTransactionModal = openModal;
    (window as any).fillFormForEdit = fillFormForEdit;
</script>
