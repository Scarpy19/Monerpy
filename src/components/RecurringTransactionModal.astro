---
import { actions } from "astro:actions";

// Get data for the modal form
const [accountsResult, categoriesResult, tagsResult] = await Promise.all([
    Astro.callAction(actions.getAccountsForRecurring, {}),
    Astro.callAction(actions.getCategoriesForRecurring, {}),
    Astro.callAction(actions.getTagsForRecurring, {}),
]);

const accounts = accountsResult.data?.ok ? accountsResult.data.accounts : [];
const categories = categoriesResult.data?.ok
    ? categoriesResult.data.categories
    : [];
const tags = tagsResult.data?.ok ? tagsResult.data.tags : [];

// Days of week for weekly frequency
const daysOfWeek = [
    { value: 0, label: 'Sunday' },
    { value: 1, label: 'Monday' },
    { value: 2, label: 'Tuesday' },
    { value: 3, label: 'Wednesday' },
    { value: 4, label: 'Thursday' },
    { value: 5, label: 'Friday' },
    { value: 6, label: 'Saturday' }
];

// Months for yearly frequency
const months = [
    { value: 1, label: 'January' },
    { value: 2, label: 'February' },
    { value: 3, label: 'March' },
    { value: 4, label: 'April' },
    { value: 5, label: 'May' },
    { value: 6, label: 'June' },
    { value: 7, label: 'July' },
    { value: 8, label: 'August' },
    { value: 9, label: 'September' },
    { value: 10, label: 'October' },
    { value: 11, label: 'November' },
    { value: 12, label: 'December' }
];
---

<div
    id="recurringTransactionModal"
    class="fixed inset-0 bg-black/50 hidden items-center justify-center z-50"
>
    <div
        class="bg-gray-800 rounded-lg p-6 w-full max-w-4xl max-h-[90vh] overflow-y-auto mx-4"
    >
        <div class="flex justify-between items-center mb-6">
            <h2
                class="font-semibold text-purple-400 text-xl"
                id="modal-form-title"
            >
                Add Recurring Transaction
            </h2>
            <button
                type="button"
                id="closeModal"
                class="text-gray-400 hover:text-white text-2xl"
            >
                ×
            </button>
        </div>

        <form id="recurringTransactionForm" method="POST" class="space-y-6">
            <input
                type="hidden"
                name="_action"
                id="form-action"
                value="create"
            />
            <input type="hidden" name="id" id="recurring-transaction-id" />

            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <!-- Left Column -->
                <div class="space-y-4">
                    <!-- Account Selection -->
                    <div>
                        <label
                            for="accountId"
                            class="block text-sm font-medium text-gray-300 mb-2"
                        >
                            Account *
                        </label>
                        <select
                            id="accountId"
                            name="accountId"
                            required
                            class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-purple-500"
                        >
                            <option value="">Select an account</option>
                            {
                                accounts &&
                                    accounts.map((account) => (
                                        <option
                                            value={account.id}
                                            data-color={account.color}
                                        >
                                            {account.name} ({account.accountType}) -
                                            {new Intl.NumberFormat("es-ES", {
                                                style: "currency",
                                                currency: "EUR",
                                                minimumFractionDigits: 2,
                                            }).format(account.balance)}
                                        </option>
                                    ))
                            }
                        </select>
                    </div>

                    <!-- Transaction Type -->
                    <div>
                        <label
                            for="type"
                            class="block text-sm font-medium text-gray-300 mb-2"
                        >
                            Type *
                        </label>
                        <select
                            id="type"
                            name="type"
                            required
                            class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-purple-500"
                        >
                            <option value="">Select transaction type</option>
                            <option value="Income">Income</option>
                            <option value="Expense">Expense</option>
                            <option value="InvestmentBuy">Investment Buy</option>
                            <option value="InvestmentSell">Investment Sell</option>
                            <option value="LoanPayment">Loan Payment</option>
                            <option value="LoanRepayment">Loan Repayment</option>
                        </select>
                    </div>

                    <!-- Description -->
                    <div>
                        <label
                            for="description"
                            class="block text-sm font-medium text-gray-300 mb-2"
                        >
                            Description *
                        </label>
                        <input
                            type="text"
                            id="description"
                            name="description"
                            required
                            placeholder="Enter recurring transaction description"
                            class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-purple-500"
                        />
                    </div>

                    <!-- Amount -->
                    <div>
                        <label
                            for="amount"
                            class="block text-sm font-medium text-gray-300 mb-2"
                        >
                            Amount (€) *
                        </label>
                        <input
                            type="number"
                            id="amount"
                            name="amount"
                            required
                            min="0.01"
                            step="0.01"
                            placeholder="0.00"
                            class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-purple-500"
                        />
                    </div>

                    <!-- Category -->
                    <div>
                        <label
                            for="categoryId"
                            class="block text-sm font-medium text-gray-300 mb-2"
                        >
                            Category
                        </label>
                        <select
                            id="categoryId"
                            name="categoryId"
                            class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-purple-500"
                        >
                            <option value="">Select a category (optional)</option>
                            {
                                categories &&
                                    categories.map((category) => (
                                        <option
                                            value={category.id}
                                            data-color={category.color}
                                        >
                                            {category.parent
                                                ? `${category.parent.name} > ${category.name}`
                                                : category.name}
                                        </option>
                                    ))
                            }
                        </select>
                    </div>

                    <!-- New Category -->
                    <div>
                        <label
                            for="newCategory"
                            class="block text-sm font-medium text-gray-300 mb-2"
                        >
                            Or create new category
                        </label>
                        <div class="flex gap-2">
                            <input
                                type="text"
                                id="newCategory"
                                name="newCategory"
                                placeholder="New category name"
                                class="flex-1 px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-purple-500"
                            />
                            <input
                                type="color"
                                id="newCategoryColor"
                                name="newCategoryColor"
                                value="#6172F3"
                                class="w-12 h-10 bg-gray-700 border border-gray-600 rounded-lg"
                            />
                        </div>
                    </div>
                </div>

                <!-- Right Column -->
                <div class="space-y-4">
                    <!-- Frequency -->
                    <div>
                        <label
                            for="frequency"
                            class="block text-sm font-medium text-gray-300 mb-2"
                        >
                            Frequency *
                        </label>
                        <select
                            id="frequency"
                            name="frequency"
                            required
                            class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-purple-500"
                        >
                            <option value="">Select frequency</option>
                            <option value="Daily">Daily</option>
                            <option value="Weekly">Weekly</option>
                            <option value="Monthly">Monthly</option>
                            <option value="Yearly">Yearly</option>
                        </select>
                    </div>

                    <!-- Day of Week (for Weekly) -->
                    <div id="dayOfWeekContainer" class="hidden">
                        <label
                            for="dayOfWeek"
                            class="block text-sm font-medium text-gray-300 mb-2"
                        >
                            Day of Week *
                        </label>
                        <select
                            id="dayOfWeek"
                            name="dayOfWeek"
                            class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-purple-500"
                        >
                            <option value="">Select day of week</option>
                            {
                                daysOfWeek.map((day) => (
                                    <option value={day.value}>
                                        {day.label}
                                    </option>
                                ))
                            }
                        </select>
                    </div>

                    <!-- Day of Month (for Monthly/Yearly) -->
                    <div id="dayOfMonthContainer" class="hidden">
                        <label
                            for="dayOfMonth"
                            class="block text-sm font-medium text-gray-300 mb-2"
                        >
                            Day of Month *
                        </label>
                        <input
                            type="number"
                            id="dayOfMonth"
                            name="dayOfMonth"
                            min="1"
                            max="31"
                            placeholder="1-31"
                            class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-purple-500"
                        />
                        <p class="text-xs text-gray-400 mt-1">
                            For months with fewer days, the last day of the month will be used
                        </p>
                    </div>

                    <!-- Time of Day -->
                    <div>
                        <label
                            for="timeOfDay"
                            class="block text-sm font-medium text-gray-300 mb-2"
                        >
                            Time of Day *
                        </label>
                        <input
                            type="time"
                            id="timeOfDay"
                            name="timeOfDay"
                            required
                            value="09:00"
                            class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-purple-500"
                        />
                    </div>

                    <!-- Start Date -->
                    <div>
                        <label
                            for="startDate"
                            class="block text-sm font-medium text-gray-300 mb-2"
                        >
                            Start Date *
                        </label>
                        <input
                            type="date"
                            id="startDate"
                            name="startDate"
                            required
                            class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-purple-500"
                        />
                    </div>

                    <!-- End Condition -->
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-2">
                            End Condition *
                        </label>
                        <div class="space-y-2">
                            <label class="flex items-center space-x-2">
                                <input
                                    type="radio"
                                    name="endCondition"
                                    value="never"
                                    checked
                                    class="text-purple-600 focus:ring-purple-500"
                                />
                                <span class="text-white">Never ends</span>
                            </label>
                            <label class="flex items-center space-x-2">
                                <input
                                    type="radio"
                                    name="endCondition"
                                    value="endDate"
                                    class="text-purple-600 focus:ring-purple-500"
                                />
                                <span class="text-white">End by date</span>
                            </label>
                            <label class="flex items-center space-x-2">
                                <input
                                    type="radio"
                                    name="endCondition"
                                    value="maxOccurrences"
                                    class="text-purple-600 focus:ring-purple-500"
                                />
                                <span class="text-white">End after X occurrences</span>
                            </label>
                        </div>
                    </div>

                    <!-- End Date (when endCondition is endDate) -->
                    <div id="endDateContainer" class="hidden">
                        <label
                            for="endDate"
                            class="block text-sm font-medium text-gray-300 mb-2"
                        >
                            End Date *
                        </label>
                        <input
                            type="date"
                            id="endDate"
                            name="endDate"
                            class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-purple-500"
                        />
                    </div>

                    <!-- Max Occurrences (when endCondition is maxOccurrences) -->
                    <div id="maxOccurrencesContainer" class="hidden">
                        <label
                            for="maxOccurrences"
                            class="block text-sm font-medium text-gray-300 mb-2"
                        >
                            Maximum Occurrences *
                        </label>
                        <input
                            type="number"
                            id="maxOccurrences"
                            name="maxOccurrences"
                            min="1"
                            placeholder="Number of times to repeat"
                            class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-purple-500"
                        />
                    </div>
                </div>
            </div>

            <!-- Tags -->
            <div>
                <label
                    for="tags"
                    class="block text-sm font-medium text-gray-300 mb-2"
                >
                    Tags (comma-separated)
                </label>
                <input
                    type="text"
                    id="tags"
                    name="tags"
                    placeholder="tag1, tag2, tag3"
                    class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-purple-500"
                />
                <div class="mt-2">
                    <p class="text-xs text-gray-400 mb-1">Existing tags:</p>
                    <div class="flex flex-wrap gap-1">
                        {
                            tags &&
                                tags.map((tag) => (
                                    <button
                                        type="button"
                                        class="tag-btn text-xs px-2 py-1 rounded text-white hover:opacity-80"
                                        style={`background-color: ${tag.color}`}
                                        data-tag={tag.name}
                                    >
                                        {tag.name}
                                    </button>
                                ))
                        }
                    </div>
                </div>
            </div>

            <!-- Form Buttons -->
            <div class="flex gap-3 pt-4">
                <button
                    type="submit"
                    class="flex-1 bg-purple-600 hover:bg-purple-700 px-4 py-2 rounded text-white transition duration-200"
                >
                    <span id="submit-text">Add Recurring Transaction</span>
                </button>
                <button
                    type="button"
                    id="modal-cancel-btn"
                    class="bg-gray-600 hover:bg-gray-700 px-4 py-2 rounded text-white transition duration-200"
                >
                    Cancel
                </button>
            </div>
        </form>
    </div>
</div>

<script>
    // Modal functionality
    const modal = document.getElementById("recurringTransactionModal");
    const closeModal = document.getElementById("closeModal");
    const cancelBtn = document.getElementById("modal-cancel-btn");

    function openModal() {
        if (modal) {
            modal.classList.remove("hidden");
            modal.classList.add("flex");
        }
    }

    function closeModalHandler() {
        if (modal) {
            modal.classList.add("hidden");
            modal.classList.remove("flex");
            resetForm();
        }
    }

    async function resetForm() {
        const formTitle = document.getElementById("modal-form-title");
        const formAction = document.getElementById(
            "form-action",
        ) as HTMLInputElement;
        const recurringTransactionId = document.getElementById(
            "recurring-transaction-id",
        ) as HTMLInputElement;
        const submitText = document.getElementById("submit-text");
        const form = document.getElementById(
            "recurringTransactionForm",
        ) as HTMLFormElement;
        const startDateInput = document.getElementById("startDate") as HTMLInputElement;

        if (formTitle) formTitle.textContent = "Add Recurring Transaction";
        if (formAction) formAction.value = "create";
        if (recurringTransactionId) recurringTransactionId.value = "";
        if (submitText) submitText.textContent = "Add Recurring Transaction";
        if (form) form.reset();
        if (startDateInput) {
            const today = new Date();
            startDateInput.value = today.toISOString().split('T')[0];
        }
        
        // Reset time to default
        const timeInput = document.getElementById("timeOfDay") as HTMLInputElement;
        if (timeInput) timeInput.value = "09:00";
        
        // Reset end condition to never
        const neverRadio = document.querySelector('input[name="endCondition"][value="never"]') as HTMLInputElement;
        if (neverRadio) neverRadio.checked = true;
        
        // Hide frequency-specific fields
        hideAllFrequencyFields();
        hideAllEndConditionFields();
    }

    // Event listeners
    if (closeModal) {
        closeModal.addEventListener("click", closeModalHandler);
    }

    if (cancelBtn) {
        cancelBtn.addEventListener("click", closeModalHandler);
    }

    // Close modal when clicking outside
    if (modal) {
        modal.addEventListener("click", function (event) {
            if (event.target === modal) {
                closeModalHandler();
            }
        });
    }

    // Frequency change handler
    const frequencySelect = document.getElementById("frequency") as HTMLSelectElement;
    const dayOfWeekContainer = document.getElementById("dayOfWeekContainer");
    const dayOfMonthContainer = document.getElementById("dayOfMonthContainer");

    function hideAllFrequencyFields() {
        if (dayOfWeekContainer) dayOfWeekContainer.classList.add("hidden");
        if (dayOfMonthContainer) dayOfMonthContainer.classList.add("hidden");
    }

    if (frequencySelect) {
        frequencySelect.addEventListener("change", function() {
            hideAllFrequencyFields();
            
            const frequency = this.value;
            
            if (frequency === "Weekly") {
                if (dayOfWeekContainer) dayOfWeekContainer.classList.remove("hidden");
            } else if (frequency === "Monthly" || frequency === "Yearly") {
                if (dayOfMonthContainer) dayOfMonthContainer.classList.remove("hidden");
            }
        });
    }

    // End condition change handler
    const endConditionRadios = document.querySelectorAll('input[name="endCondition"]');
    const endDateContainer = document.getElementById("endDateContainer");
    const maxOccurrencesContainer = document.getElementById("maxOccurrencesContainer");

    function hideAllEndConditionFields() {
        if (endDateContainer) endDateContainer.classList.add("hidden");
        if (maxOccurrencesContainer) maxOccurrencesContainer.classList.add("hidden");
    }

    endConditionRadios.forEach(radio => {
        radio.addEventListener("change", function(this: HTMLInputElement) {
            hideAllEndConditionFields();
            
            const endCondition = this.value;
            
            if (endCondition === "endDate") {
                if (endDateContainer) endDateContainer.classList.remove("hidden");
            } else if (endCondition === "maxOccurrences") {
                if (maxOccurrencesContainer) maxOccurrencesContainer.classList.remove("hidden");
            }
        });
    });

    // Set today's date as default
    (() => {
        const startDateInput = document.getElementById("startDate") as HTMLInputElement;
        if (startDateInput) {
            const today = new Date();
            startDateInput.value = today.toISOString().split('T')[0];
        }
    })();

    // Tag button functionality
    document.querySelectorAll(".tag-btn").forEach((btn) => {
        btn.addEventListener("click", function (this: HTMLElement) {
            const tagName = this.dataset.tag;
            const tagsInput = document.getElementById(
                "tags",
            ) as HTMLInputElement;
            if (tagsInput && tagName) {
                const currentTags = tagsInput.value
                    .split(",")
                    .map((t) => t.trim())
                    .filter((t) => t.length > 0);

                if (!currentTags.includes(tagName)) {
                    currentTags.push(tagName);
                    tagsInput.value = currentTags.join(", ");
                }
            }
        });
    });

    // New category input handling
    const newCategoryInput = document.getElementById(
        "newCategory",
    ) as HTMLInputElement;
    if (newCategoryInput) {
        newCategoryInput.addEventListener("input", function () {
            const categorySelect = document.getElementById(
                "categoryId",
            ) as HTMLSelectElement;
            if (categorySelect) {
                if (this.value.trim()) {
                    categorySelect.disabled = true;
                    categorySelect.value = "";
                } else {
                    categorySelect.disabled = false;
                }
            }
        });
    }

    const categorySelect = document.getElementById(
        "categoryId",
    ) as HTMLSelectElement;
    if (categorySelect) {
        categorySelect.addEventListener("change", function () {
            const newCategoryInput = document.getElementById(
                "newCategory",
            ) as HTMLInputElement;
            if (newCategoryInput) {
                if (this.value) {
                    newCategoryInput.disabled = true;
                    newCategoryInput.value = "";
                } else {
                    newCategoryInput.disabled = false;
                }
            }
        });
    }

    // Function to fill form for editing (will be called from parent page)
    async function fillFormForEdit(recurringTransaction: any) {
        const formTitle = document.getElementById("modal-form-title");
        const formAction = document.getElementById(
            "form-action",
        ) as HTMLInputElement;
        const recurringTransactionId = document.getElementById(
            "recurring-transaction-id",
        ) as HTMLInputElement;
        const submitText = document.getElementById("submit-text");

        if (formTitle) formTitle.textContent = "Edit Recurring Transaction";
        if (formAction) formAction.value = "update";
        if (recurringTransactionId) recurringTransactionId.value = recurringTransaction.id;
        if (submitText) submitText.textContent = "Update Recurring Transaction";

        // Fill form with recurring transaction data
        const accountId = document.getElementById("accountId") as HTMLSelectElement;
        const type = document.getElementById("type") as HTMLSelectElement;
        const description = document.getElementById("description") as HTMLInputElement;
        const amount = document.getElementById("amount") as HTMLInputElement;
        const frequency = document.getElementById("frequency") as HTMLSelectElement;
        const dayOfWeek = document.getElementById("dayOfWeek") as HTMLSelectElement;
        const dayOfMonth = document.getElementById("dayOfMonth") as HTMLInputElement;
        const timeOfDay = document.getElementById("timeOfDay") as HTMLInputElement;
        const startDate = document.getElementById("startDate") as HTMLInputElement;
        const endDate = document.getElementById("endDate") as HTMLInputElement;
        const maxOccurrences = document.getElementById("maxOccurrences") as HTMLInputElement;
        const categoryId = document.getElementById("categoryId") as HTMLSelectElement;
        const tags = document.getElementById("tags") as HTMLInputElement;

        if (accountId) accountId.value = recurringTransaction.accountId;
        if (type) type.value = recurringTransaction.type;
        if (description) description.value = recurringTransaction.description;
        if (amount) amount.value = recurringTransaction.amount;
        if (frequency) {
            frequency.value = recurringTransaction.frequency;
            // Trigger change event to show appropriate fields
            frequency.dispatchEvent(new Event('change'));
        }
        if (dayOfWeek && recurringTransaction.dayOfWeek !== null) dayOfWeek.value = recurringTransaction.dayOfWeek;
        if (dayOfMonth && recurringTransaction.dayOfMonth !== null) dayOfMonth.value = recurringTransaction.dayOfMonth;
        if (timeOfDay) timeOfDay.value = recurringTransaction.timeOfDay;
        if (startDate) {
            // Convert database date string to date input format
            const startDateObj = new Date(recurringTransaction.startDate);
            startDate.value = startDateObj.toISOString().split('T')[0];
        }
        if (categoryId) categoryId.value = recurringTransaction.categoryId || "";

        // Handle end condition
        let endCondition = 'never';
        if (recurringTransaction.endDate) {
            endCondition = 'endDate';
            if (endDate) {
                const endDateObj = new Date(recurringTransaction.endDate);
                endDate.value = endDateObj.toISOString().split('T')[0];
            }
        } else if (recurringTransaction.maxOccurrences) {
            endCondition = 'maxOccurrences';
            if (maxOccurrences) maxOccurrences.value = recurringTransaction.maxOccurrences;
        }

        // Set end condition radio
        const endConditionRadio = document.querySelector(`input[name="endCondition"][value="${endCondition}"]`) as HTMLInputElement;
        if (endConditionRadio) {
            endConditionRadio.checked = true;
            endConditionRadio.dispatchEvent(new Event('change'));
        }

        // Fill tags
        if (tags) {
            const tagNames = recurringTransaction.tags.map((tag: any) => tag.name);
            tags.value = tagNames.join(", ");
        }

        openModal();
    }

    // Make functions available globally
    (window as any).openRecurringTransactionModal = openModal;
    (window as any).fillRecurringFormForEdit = fillFormForEdit;
</script>
