---

---

<div
    id="toastContainer"
    class="fixed bottom-6 left-1/2 transform -translate-x-1/2 z-50 flex flex-col gap-y-3 max-w-md w-full px-4"
>
</div>

<script>
    import type { Toast } from "@types.d.ts";
    import { TOAST_TYPES } from "@arrays.d.ts";

    const TOAST_COLORS = {
        [TOAST_TYPES.SUCCESS]: "bg-green-600",
        [TOAST_TYPES.ERROR]: "bg-red-600",
        [TOAST_TYPES.INFO]: "bg-blue-600",
        [TOAST_TYPES.WARNING]: "bg-yellow-600",
    };

    const TOAST_ICONS = {
        [TOAST_TYPES.SUCCESS]:
            '<svg fill="currentColor" viewBox="0 0 24 24" height="24" width="24" xmlns="http://www.w3.org/2000/svg"><path xmlns="http://www.w3.org/2000/svg" d="M12 4C7.58172 4 4 7.58172 4 12C4 16.4183 7.58172 20 12 20C16.4183 20 20 16.4183 20 12C20 7.58172 16.4183 4 12 4ZM2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12C22 17.5228 17.5228 22 12 22C6.47715 22 2 17.5228 2 12ZM16.6644 8.75259C17.0771 9.11951 17.1143 9.75158 16.7474 10.1644L11.4141 16.1644C11.2243 16.3779 10.9523 16.5 10.6667 16.5C10.381 16.5 10.109 16.3779 9.91926 16.1644L7.25259 13.1644C6.88567 12.7516 6.92285 12.1195 7.33564 11.7526C7.74842 11.3857 8.38049 11.4229 8.74741 11.8356L10.6667 13.9948L15.2526 8.83564C15.6195 8.42285 16.2516 8.38567 16.6644 8.75259Z" fill="currentColor"></path></svg>',
        [TOAST_TYPES.ERROR]:
            '<svg fill="currentColor" viewBox="0 0 24 24" height="24" width="24" xmlns="http://www.w3.org/2000/svg"><path xmlns="http://www.w3.org/2000/svg" d="M12 4C7.58172 4 4 7.58172 4 12C4 16.4183 7.58172 20 12 20C16.4183 20 20 16.4183 20 12C20 7.58172 16.4183 4 12 4ZM2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12C22 17.5228 17.5228 22 12 22C6.47715 22 2 17.5228 2 12ZM7.79289 7.79289C8.18342 7.40237 8.81658 7.40237 9.20711 7.79289L12 10.5858L14.7929 7.79289C15.1834 7.40237 15.8166 7.40237 16.2071 7.79289C16.5976 8.18342 16.5976 8.81658 16.2071 9.20711L13.4142 12L16.2071 14.7929C16.5976 15.1834 16.5976 15.8166 16.2071 16.2071C15.8166 16.5976 15.1834 16.5976 14.7929 16.2071L12 13.4142L9.20711 16.2071C8.81658 16.5976 8.18342 16.5976 7.79289 16.2071C7.40237 15.8166 7.40237 15.1834 7.79289 14.7929L10.5858 12L7.79289 9.20711C7.40237 8.81658 7.40237 8.18342 7.79289 7.79289Z" fill="currentColor"></path></svg>',
        [TOAST_TYPES.INFO]:
            '<svg fill="currentColor" viewBox="0 0 24 24" height="24" width="24" xmlns="http://www.w3.org/2000/svg"><path xmlns="http://www.w3.org/2000/svg" d="M12 4C7.58172 4 4 7.58172 4 12C4 16.4183 7.58172 20 12 20C16.4183 20 20 16.4183 20 12C20 7.58172 16.4183 4 12 4ZM2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12C22 17.5228 17.5228 22 12 22C6.47715 22 2 17.5228 2 12Z" fill="currentColor"></path><path xmlns="http://www.w3.org/2000/svg" d="M12 10C12.5523 10 13 10.4477 13 11V17C13 17.5523 12.5523 18 12 18C11.4477 18 11 17.5523 11 17V11C11 10.4477 11.4477 10 12 10Z" fill="currentColor"></path><path xmlns="http://www.w3.org/2000/svg" d="M13.5 7.5C13.5 8.32843 12.8284 9 12 9C11.1716 9 10.5 8.32843 10.5 7.5C10.5 6.67157 11.1716 6 12 6C12.8284 6 13.5 6.67157 13.5 7.5Z" fill="currentColor"></path></svg>',
        [TOAST_TYPES.WARNING]:
            '<svg fill="currentColor" viewBox="0 0 24 24" height="24" width="24" xmlns="http://www.w3.org/2000/svg"><path xmlns="http://www.w3.org/2000/svg" d="M12 14C11.4477 14 11 13.5523 11 13V10C11 9.44772 11.4477 9 12 9C12.5523 9 13 9.44772 13 10V13C13 13.5523 12.5523 14 12 14Z" fill="currentColor"></path><path xmlns="http://www.w3.org/2000/svg" d="M10.5 16.5C10.5 15.6716 11.1716 15 12 15C12.8284 15 13.5 15.6716 13.5 16.5C13.5 17.3284 12.8284 18 12 18C11.1716 18 10.5 17.3284 10.5 16.5Z" fill="currentColor"></path><path xmlns="http://www.w3.org/2000/svg" d="M10.2301 3.2156C10.98 1.79093 13.02 1.79092 13.7698 3.2156L22.1135 19.0685C22.8144 20.4003 21.8486 22 20.3436 22H3.65635C2.15133 22 1.18556 20.4003 1.88651 19.0685L10.2301 3.2156ZM20.3436 20L12 4.1471L3.65635 20L20.3436 20Z" fill="currentColor"></path></svg>',
    };

    class ToastManager {
        private container: HTMLElement;
        private toasts: Map<string, NodeJS.Timeout> = new Map();

        constructor() {
            this.container = document.getElementById("toastContainer")!;
            this.loadFromSessionStorage();
            this.setupStorageListener();
        }

        private setupStorageListener() {
            // Listen for storage changes from other tabs/windows
            window.addEventListener("storage", (e) => {
                if (e.key === "toasts") {
                    this.loadFromSessionStorage();
                }
            });

            // Listen for custom toast events
            window.addEventListener("toast:show", ((e: CustomEvent) => {
                this.showToast(e.detail);
            }) as EventListener);
        }

        private loadFromSessionStorage() {
            const toastsData = sessionStorage.getItem("toasts");
            if (toastsData) {
                try {
                    const toasts: Toast[] = JSON.parse(toastsData);
                    toasts.forEach((toast) => this.displayToast(toast));
                    // Clear from session storage after displaying
                    sessionStorage.removeItem("toasts");
                } catch (error) {
                    console.error(
                        "Error parsing toasts from session storage:",
                        error,
                    );
                }
            }
        }

        private getToastStyles(type: string): string {
            const baseStyles =
                "flex items-center justify-between p-4 rounded-lg shadow-lg text-white font-medium transition-all duration-300 transform translate-y-0 opacity-100";

            return `${baseStyles} ${TOAST_COLORS[type] || "bg-gray-600"}`;
        }

        private getToastIcon(type: string): string {
            const defaultIcon =
                '<svg fill="currentColor" viewBox="0 0 24 24" height="24" width="24" xmlns="http://www.w3.org/2000/svg"><path xmlns="http://www.w3.org/2000/svg" d="M10.1461 3.24812C10.4433 2.51616 11.1614 2 12 2C12.8386 2 13.5567 2.51616 13.8539 3.24812C16.8202 4.06072 19 6.77579 19 10V14.6972L20.8321 17.4453C21.0366 17.7522 21.0557 18.1467 20.8817 18.4719C20.7077 18.797 20.3688 19 20 19H15.4646C15.2219 20.6961 13.7632 22 12 22C10.2368 22 8.77806 20.6961 8.53545 19H4C3.63121 19 3.29235 18.797 3.11833 18.4719C2.94431 18.1467 2.96338 17.7522 3.16795 17.4453L5 14.6972V10C5 6.77579 7.17983 4.06072 10.1461 3.24812ZM10.5854 19C10.7913 19.5826 11.3469 20 12 20C12.6531 20 13.2087 19.5826 13.4146 19H10.5854ZM12 5C9.23858 5 7 7.23858 7 10V15C7 15.1974 6.94156 15.3904 6.83205 15.5547L5.86852 17H18.1315L17.168 15.5547C17.0584 15.3904 17 15.1974 17 15V10C17 7.23858 14.7614 5 12 5Z" fill="currentColor"></path></svg>';

            return `${TOAST_ICONS[type] || defaultIcon}`;
        }

        private displayToast(toast: Toast) {
            // Check if toast already exists
            if (document.getElementById(`${toast.id}Toast`)) {
                return;
            }

            const toastElement = document.createElement("div");
            toastElement.id = `${toast.id}Toast`;
            toastElement.className = this.getToastStyles(toast.type);
            toastElement.style.transform = "translateY(100px)";
            toastElement.style.opacity = "0";

            toastElement.innerHTML = `
            <div class="flex items-center gap-x-3">
                <span class="text-lg">${this.getToastIcon(toast.type)}</span>
                <span>${toast.message}</span>
            </div>
            <button type="button" class="ml-4 text-white hover:text-gray-200 focus:outline-none" onclick="toastManager.removeToast('${toast.id}')">
                <svg class="w-6 h-6" fill="currentColor" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
            </button>
        `;

            this.container.appendChild(toastElement);

            // Animate in
            requestAnimationFrame(() => {
                toastElement.style.transform = "translateY(0)";
                toastElement.style.opacity = "1";
            });

            // Auto-remove after duration
            const duration = toast.duration || 10000; // 10 seconds default
            const timeoutId = setTimeout(() => {
                this.removeToast(toast.id);
            }, duration);

            this.toasts.set(toast.id, timeoutId);
        }

        public removeToast(id: string) {
            const toastElement = document.getElementById(`${id}Toast`);
            if (toastElement) {
                // Animate out
                toastElement.style.transform = "translateY(100px)";
                toastElement.style.opacity = "0";

                setTimeout(() => {
                    if (toastElement.parentNode) {
                        toastElement.parentNode.removeChild(toastElement);
                    }
                }, 300);
            }

            // Clear timeout
            const timeoutId = this.toasts.get(id);
            if (timeoutId) {
                clearTimeout(timeoutId);
                this.toasts.delete(id);
            }
        }

        public showToast(toast: Omit<Toast, "id">) {
            const fullToast: Toast = {
                id:
                    Date.now().toString() +
                    Math.random().toString(36).substring(2, 9),
                ...toast,
            };
            this.displayToast(fullToast);
        }
    }

    // Global instance
    declare global {
        var toastManager: ToastManager;
    }

    // Initialize toast manager
    if (typeof window !== "undefined") {
        window.toastManager = new ToastManager();
    }
</script>
