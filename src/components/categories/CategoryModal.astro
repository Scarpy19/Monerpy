---
import { actions } from "astro:actions";
import X from "@svg/mono/X.astro";
import Input from "@comps/Input.astro";
import ColorPicker from "@comps/ColorPicker.astro";


// Categories for parent selection
interface Category {
    id: number;
    name: string;
    color: string;
    parentId?: number | null;
}

// Get categories data for parent selection
const userResult = await Astro.callAction(actions.getFamilyDetails, {});
const userInFamily = userResult.data?.ok && userResult.data.family;

const categoriesResult = userInFamily
    ? await Astro.callAction(actions.getCategoriesList, {
          includeDeleted: false,
      })
    : { data: { ok: false, categories: [] } };

const allCategories = categoriesResult.data?.ok
    ? categoriesResult.data.categories
    : [];

// Filter to get only parent categories for the dropdown
const parentCategories = allCategories?.filter((cat) => !cat.parentId) || [];
---

<!-- Modal Background -->
<div
    id="categoryModal"
    class="fixed inset-0 bg-black/50 z-50 hidden items-center justify-center h-screen"
>
    <div
        class="bg-gray-800 rounded-lg shadow-xl max-w-md w-full max-h-[90vh] overflow-y-auto"
    >
        <!-- Modal Header -->
        <div
            class="flex items-end justify-between p-6 border-b border-gray-700"
        >
            <h2 class="text-xl font-semibold text-purple-400">
                Create Category
            </h2>
            <button
                type="button"
                id="closeCategoryModal"
                class="text-gray-400 hover:text-white transition-colors"
            >
                <X class="w-6 h-6" />
            </button>
        </div>

        <!-- Modal Content -->
        <div class="p-6">
            <form method="POST" class="flex flex-col gap-y-4">
                <input type="hidden" name="_action" value="create" />

                <div>
                    <Input
                        id="categoryName"
                        name="Category Name"
                        formName="name"
                        required={false}
                        placeholder="Enter category name"
                    />
                </div>

                <!-- Parent Category -->
                <div>
                    <label
                        for="parentCategory"
                        class="block text-sm font-medium text-gray-200 mb-2"
                    >
                        Parent Category (Optional)
                    </label>
                    <select
                        id="parentCategory"
                        name="parentId"
                        class="w-full px-4 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                    >
                        <option value="" selected></option>
                        {
                            parentCategories.map((category) => (
                                <option value={category.id}>
                                    {category.name}
                                </option>
                            ))
                        }
                    </select>
                </div>

                <div>
                    <ColorPicker id="color" formName="Category Color" />
                </div>

                <!-- Submit Buttons -->
                <div class="flex items-center justify-end gap-x-3 pt-4">
                    <button
                        type="button"
                        id="cancelCategoryButton"
                        class="px-4 py-2 text-gray-300 hover:text-white transition-colors"
                    >
                        Cancel
                    </button>
                    <button
                        type="submit"
                        class="px-6 py-2 bg-purple-600 hover:bg-purple-700 text-white font-semibold rounded-lg transition-colors"
                    >
                        Create Category
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const modal = document.getElementById("categoryModal");
        const closeModalBtn = document.getElementById("closeCategoryModal");
        const cancelBtn = document.getElementById("cancelCategoryButton");
        const customColorInput = document.getElementById(
            "customColor",
        ) as HTMLInputElement;

        // Modal controls
        function showModal() {
            if (modal) {
                modal.classList.remove("hidden");
                modal.classList.add("flex");
                document.body.style.overflow = "hidden";

                // Focus on name input
                const nameInput = modal.querySelector(
                    'input[name="name"]',
                ) as HTMLInputElement;
                nameInput?.focus();
            }
        }

        function hideModal() {
            if (modal) {
                modal.classList.add("hidden");
                modal.classList.remove("flex");

                document.body.style.overflow = "auto";

                // Reset form
                const form = modal.querySelector("form") as HTMLFormElement;
                if (form) {
                    form.reset();
                    // Reset to first color option
                    const firstColorRadio = form.querySelector(
                        'input[name="color"]',
                    ) as HTMLInputElement;
                    if (firstColorRadio) {
                        firstColorRadio.checked = true;
                    }
                    // Remove any custom color hidden input
                    const customColorHidden =
                        document.getElementById("customColorHidden");
                    if (customColorHidden) {
                        customColorHidden.remove();
                    }
                }
            }
        }

        // Close modal events
        if (closeModalBtn) {
            closeModalBtn.addEventListener("click", hideModal);
        }

        if (cancelBtn) {
            cancelBtn.addEventListener("click", hideModal);
        }

        // Close modal when clicking outside
        if (modal) {
            modal.addEventListener("click", function (e) {
                if (e.target === modal) {
                    hideModal();
                }
            });
        }

        // Handle use custom color button
        const useCustomColorBtn = document.querySelector(
            ".use-custom-color-btn",
        );
        if (useCustomColorBtn) {
            useCustomColorBtn.addEventListener("click", useCustomColor);
        }

        // Custom color functionality
        function useCustomColor() {
            if (customColorInput) {
                const customColor = customColorInput.value;
                const colorRadios = document.querySelectorAll(
                    'input[name="color"]',
                ) as NodeListOf<HTMLInputElement>;

                // Uncheck all radio buttons
                colorRadios.forEach((radio) => (radio.checked = false));

                // Create or update a hidden input for custom color
                let customColorHidden = document.getElementById(
                    "customColorHidden",
                ) as HTMLInputElement;
                if (!customColorHidden) {
                    customColorHidden = document.createElement("input");
                    customColorHidden.type = "hidden";
                    customColorHidden.name = "color";
                    customColorHidden.id = "customColorHidden";
                    customColorInput.parentElement?.appendChild(
                        customColorHidden,
                    );
                }
                customColorHidden.value = customColor;
            }
        }

        // Make useCustomColor available globally for the onclick handler
        (window as any).useCustomColor = useCustomColor;

        // Expose showModal function globally
        (window as any).showCategoryModal = showModal;
    });
</script>
