---
import { actions } from "astro:actions";
import X from "@svg/mono/X.astro";
import Input from "@comps/Input.astro";
import ColorPicker from "@comps/ColorPicker.astro";

// Categories for parent selection
interface Category {
    id: number;
    name: string;
    color: string;
    parentId?: number | null;
}

// Get categories data for parent selection
const userResult = await Astro.callAction(actions.getFamilyDetails, {});
const userInFamily = userResult.data?.ok && userResult.data.family;

const categoriesResult = userInFamily
    ? await Astro.callAction(actions.getCategoriesList, {
          includeDeleted: false,
      })
    : { data: { ok: false, categories: [] } };

const allCategories = categoriesResult.data?.ok
    ? categoriesResult.data.categories
    : [];

// Filter to get only parent categories for the dropdown
const parentCategories = allCategories?.filter((cat) => !cat.parentId) || [];
---

<!-- Modal Background -->
<div
    id="categoryModal"
    class="fixed inset-0 bg-black/50 z-50 hidden items-center justify-center h-screen"
>
    <div
        class="bg-gray-800 rounded-lg shadow-xl max-w-md w-full max-h-[90vh] overflow-y-auto"
    >
        <!-- Modal Header -->
        <header
            class="flex items-end justify-between py-4.5 px-6 border-b border-gray-700"
        >
            <h2 class="text-xl font-semibold text-purple-400">
                Create Category
            </h2>
            <button
                type="button"
                id="closeCategoryModal"
                class="text-gray-400 hover:text-white transition-colors"
            >
                <X class="w-6 h-6" />
            </button>
        </header>

        <!-- Modal Content -->
        <form method="POST" class="p-6 flex flex-col gap-y-4">
            <input type="hidden" name="_action" value="create" />

            <Input
                id="categoryName"
                name="Category Name"
                formName="name"
                required={false}
                placeholder="Enter category name"
            />

            <label>
                <span class="block text-sm font-medium text-gray-200 mb-2">
                    Parent Category (Optional)
                </span>
                <select
                    id="parentCategory"
                    name="parentId"
                    class="w-full px-4 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                >
                    <option value="">Select parent category</option>
                    {
                        parentCategories.map((category) => (
                            <option value={category.id}>{category.name}</option>
                        ))
                    }
                </select>
            </label>

            <ColorPicker id="color" formText="Category Color" />

            <!-- Submit Buttons -->
            <div class="flex items-center justify-end gap-x-3 pt-4">
                <button
                    type="button"
                    id="cancelCategoryButton"
                    class="bg-gray-600 hover:bg-gray-700 px-4 py-2 rounded text-white transition duration-200"
                >
                    Cancel
                </button>
                <button
                    type="submit"
                    class="px-6 py-2 bg-purple-600 hover:bg-purple-700 text-white font-semibold rounded transition-colors"
                >
                    Create Category
                </button>
            </div>
        </form>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const modal = document.getElementById("categoryModal");
        const closeModalBtn = document.getElementById("closeCategoryModal");
        const cancelBtn = document.getElementById("cancelCategoryButton");

        // Modal controls
        function openModal() {
            if (modal) {
                modal.classList.remove("hidden");
                modal.classList.add("flex");
                document.body.style.overflow = "hidden";

                // Focus on name input
                const nameInput = modal.querySelector(
                    'input[name="name"]',
                ) as HTMLInputElement;
                nameInput?.focus();
            }
        }

        function closeModal() {
            if (modal) {
                modal.classList.add("hidden");
                modal.classList.remove("flex");
                document.body.style.overflow = "auto";

                // Reset form
                const form = modal.querySelector("form") as HTMLFormElement;
                if (form) {
                    form.reset();
                    // Reset to first color option
                    const firstColorRadio = form.querySelector(
                        'input[name="color"]',
                    ) as HTMLInputElement;
                    if (firstColorRadio) {
                        firstColorRadio.checked = true;
                    }
                    // Remove any custom color hidden input
                    const customColorHidden =
                        document.getElementById("customColorHidden");
                    if (customColorHidden) {
                        customColorHidden.remove();
                    }
                }
            }
        }

        // Close modal events
        if (closeModalBtn) {
            closeModalBtn.addEventListener("click", closeModal);
        }

        if (cancelBtn) {
            cancelBtn.addEventListener("click", closeModal);
        }

        // Close modal when clicking outside
        if (modal) {
            modal.addEventListener("click", function (e) {
                if (e.target === modal) {
                    closeModal();
                }
            });
        }

        // Expose showModal function globally
        (window as any).openCategoryModal = openModal;
    });
</script>
