---
import { actions } from "astro:actions";
import X from "@svg/mono/X.astro";
import Input from "@comps/Input.astro";
import ColorPicker from "@comps/ColorPicker.astro";

// Categories for parent selection
interface Category {
    id: number;
    name: string;
    color: string;
    parentId?: number | null;
}

// Get categories data for parent selection
const userResult = await Astro.callAction(actions.getFamilyDetails, {});
const userInFamily = userResult.data?.ok && userResult.data.family;

const categoriesResult = userInFamily
    ? await Astro.callAction(actions.getCategories, {
          includeDeleted: false,
      })
    : { data: { ok: false, categories: [] } };

// Cast to local Category[] to avoid broad union types inferred from the action result
const allCategories: Category[] = categoriesResult.data?.ok
    ? (categoriesResult.data.categories as Category[])
    : ([] as Category[]);

// Filter to get only parent categories for the dropdown (explicitly typed)
const parentCategories: Category[] = (allCategories || []).filter(
    (cat) => cat && (cat.parentId === undefined || cat.parentId === null),
);
---

<!-- Modal as custom element host -->
<category-modal
    id="categoryModal"
    class="fixed inset-0 bg-black/50 z-50 hidden items-center justify-center h-screen"
>
    <div
        class="bg-gray-800 rounded-lg shadow-xl max-w-md w-full max-h-[90vh] overflow-y-auto"
    >
        <header
            class="flex items-end justify-between py-4.5 px-6 border-b border-gray-700"
        >
            <h2 class="text-xl font-semibold text-purple-400">
                Create Category
            </h2>
            <button
                type="button"
                id="closeCategoryModal"
                class="text-gray-400 hover:text-white transition-colors"
                ><X class="w-6 h-6" /></button
            >
        </header>

        <form method="POST" class="p-6 flex flex-col gap-y-4">
            <input type="hidden" name="_action" value="create" />

            <Input
                id="categoryName"
                label="Category Name"
                name="name"
                required={false}
                placeholder="Enter category name"
            />

            <label for="parentCategory">
                <p class="text-sm font-medium text-gray-200 mb-2">
                    Parent Category (Optional)
                </p>
                <select
                    id="parentCategory"
                    name="parentId"
                    class="w-full px-4 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                >
                    <option value="">Select parent category</option>
                    {
                        parentCategories.map((category: Category) => (
                            <option value={String(category.id)}>
                                {category.name}
                            </option>
                        ))
                    }
                </select>
            </label>

            <ColorPicker id="color" label="Category Color" />

            <div class="flex items-center justify-end gap-x-3 pt-4">
                <button
                    type="button"
                    id="cancelCategoryButton"
                    class="bg-gray-600 hover:bg-gray-700 px-4 py-2 rounded text-white transition duration-200"
                    >Cancel</button
                >
                <button
                    type="submit"
                    class="px-6 py-2 bg-purple-600 hover:bg-purple-700 text-white font-semibold rounded transition-colors"
                    >Create Category</button
                >
            </div>
        </form>
    </div>
</category-modal>

<script type="module" is:inline>
    class CategoryModal extends HTMLElement {
        constructor() {
            super();
            this._onClose = this._onClose.bind(this);
            this._onCancel = this._onCancel.bind(this);
            this._onMouseDown = this._onMouseDown.bind(this);
            this._onMouseUp = this._onMouseUp.bind(this);
            this._downOutside = false;
        }

        connectedCallback() {
            this.root = this;
            this._closeBtn = this.root.querySelector("#closeCategoryModal");
            this._cancelBtn = this.root.querySelector("#cancelCategoryButton");

            if (this._closeBtn)
                this._closeBtn.addEventListener("click", this._onClose);
            if (this._cancelBtn)
                this._cancelBtn.addEventListener("click", this._onCancel);

            this.addEventListener("mousedown", this._onMouseDown);
            this.addEventListener("mouseup", this._onMouseUp);

            // Provide backward-compatible alias for older pages
            this.showModal = this.openModal.bind(this);
        }

        disconnectedCallback() {
            if (this._closeBtn)
                this._closeBtn.removeEventListener("click", this._onClose);
            if (this._cancelBtn)
                this._cancelBtn.removeEventListener("click", this._onCancel);
            this.removeEventListener("mousedown", this._onMouseDown);
            this.removeEventListener("mouseup", this._onMouseUp);
        }

        _onClose() {
            this.closeModal();
        }
        _onCancel() {
            this.closeModal();
        }

        _onMouseDown(e) {
            if (e.target === this && e.button === 0) this._downOutside = true;
            else this._downOutside = false;
        }

        _onMouseUp(e) {
            if (this._downOutside && e.target === this && e.button === 0)
                this.closeModal();
            this._downOutside = false;
        }

        openModal() {
            this.classList.remove("hidden");
            this.classList.add("flex");
            document.body.style.overflow = "hidden";
            const nameInput = this.querySelector('input[name="name"]');
            if (nameInput && typeof nameInput.focus === "function")
                nameInput.focus();
        }

        closeModal() {
            this.classList.add("hidden");
            this.classList.remove("flex");
            document.body.style.overflow = "auto";
            const form = this.querySelector("form");
            if (form) form.reset();
            const firstColor = form
                ? form.querySelector('input[name="color"]')
                : null;
            if (firstColor) firstColor.checked = true;
        }
    }

    if (!customElements.get("category-modal")) {
        customElements.define("category-modal", CategoryModal);
    }
</script>
