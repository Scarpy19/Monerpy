---
// Delete confirmation modal component for tags
---

<div
    id="deleteTagConfirmModal"
    class="fixed inset-0 bg-black/50 z-50 items-center justify-center hidden"
>
    <div class="bg-gray-800 rounded-lg p-6 max-w-md w-full mx-4 shadow-xl">
        <div class="flex items-center mb-4">
            <div
                class="w-10 h-10 bg-red-100 rounded-full flex items-center justify-center mr-3"
            >
                <svg
                    class="w-6 h-6 text-red-600"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                >
                    <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"
                    ></path>
                </svg>
            </div>
            <h3 class="text-lg font-semibold text-white">Delete Tag</h3>
        </div>

        <p class="text-gray-300 mb-6">
            Are you sure you want to delete the tag "<span
                id="deleteTagName"
                class="font-semibold text-purple-400"></span>"? This action
            cannot be undone.
        </p>

        <div class="flex justify-end space-x-3">
            <button
                id="cancelDeleteTagButton"
                type="button"
                class="px-4 py-2 text-gray-300 bg-gray-700 hover:bg-gray-600 rounded-lg transition-colors"
            >
                Cancel
            </button>
            <button
                id="confirmDeleteTagButton"
                type="button"
                class="px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg transition-colors"
            >
                Delete
            </button>
        </div>
    </div>
</div>

<script>
    class DeleteTagConfirmModal {
        private modal: HTMLElement;
        private nameSpan: HTMLElement;
        private confirmButton: HTMLElement;
        private cancelButton: HTMLElement;
        private currentCallback: (() => void) | null = null;

        constructor() {
            this.modal = document.getElementById("deleteTagConfirmModal")!;
            this.nameSpan = document.getElementById("deleteTagName")!;
            this.confirmButton = document.getElementById(
                "confirmDeleteTagButton",
            )!;
            this.cancelButton = document.getElementById("cancelDeleteTagButton")!;

            this.setupEventListeners();
        }

        private setupEventListeners() {
            // Close modal on background click
            this.modal.addEventListener("click", (e) => {
                if (e.target === this.modal) {
                    this.hide();
                }
            });

            // Close modal on cancel
            this.cancelButton.addEventListener("click", () => {
                this.hide();
            });

            // Confirm deletion
            this.confirmButton.addEventListener("click", () => {
                if (this.currentCallback) {
                    this.currentCallback();
                }
                this.hide();
            });

            // Close on Escape key
            document.addEventListener("keydown", (e) => {
                if (
                    e.key === "Escape" &&
                    !this.modal.classList.contains("hidden")
                ) {
                    this.hide();
                }
            });
        }

        show(tagName: string, onConfirm: () => void) {
            this.nameSpan.textContent = tagName;
            this.currentCallback = onConfirm;
            this.modal.classList.remove("hidden");
            this.modal.classList.add("flex");

            // Focus the confirm button
            setTimeout(() => {
                this.confirmButton.focus();
            }, 100);
        }

        hide() {
            this.modal.classList.add("hidden");
            this.modal.classList.remove("flex");
            this.currentCallback = null;
        }
    }

    // Initialize modal when DOM is ready
    document.addEventListener("DOMContentLoaded", () => {
        (window as any).deleteTagConfirmModal = new DeleteTagConfirmModal();
    });
</script>
