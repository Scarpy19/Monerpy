---
import Bin from "@svg/mono/Bin.astro";
import Edit from "@svg/mono/Edit.astro";
import Save from "@svg/mono/Save.astro";
import X from "@svg/mono/X.astro";

interface Props {
    tag: {
        id: number;
        name: string;
        color: string;
        _count?: {
            transactions?: number;
        };
    };
}

const { tag } = Astro.props;
---

<div
    class="bg-gray-700 rounded-lg p-4 hover:bg-gray-600 transition-colors"
    data-tag-id={tag.id}
>
    <!-- Display Mode -->
    <div class="tag-display flex items-center justify-between">
        <div class="flex items-center gap-x-3 flex-1">
            <div
                class="tag-color-display w-4 h-4 rounded-full flex-shrink-0 cursor-pointer hover:ring-2 hover:ring-purple-500 transition-all"
                style={`background-color: ${tag.color}`}
                title="Click to edit color"
            >
            </div>
            <div class="min-w-0 flex-1">
                <h3
                    class="tag-name-display font-semibold text-white truncate cursor-pointer hover:text-purple-300 transition-colors w-fit"
                    title="Click to edit name"
                >
                    {tag.name}
                </h3>
                <p class="text-sm text-gray-400">
                    {tag._count?.transactions || 0} transactions
                </p>
            </div>
        </div>
        <div class="tag-actions flex items-center gap-x-2 ml-2">
            <button
                type="button"
                class="edit-tag-btn group text-purple-400 hover:text-purple-300 transition-colors p-1 rounded hover:bg-purple-900/20"
                data-tag-id={tag.id}
                title="Edit Tag"
            >
                <Edit />
            </button>
            <button
                type="button"
                class="delete-tag-btn group text-red-400 hover:text-red-300 transition-colors p-1 rounded hover:bg-red-900/20"
                data-tag-id={tag.id}
                data-tag-name={tag.name}
                title="Delete Tag"
            >
                <Bin />
            </button>
        </div>
    </div>

    <!-- Edit Mode -->
    <form
        class="tag-edit py-1 hidden edit-tag-form items-center gap-x-3 w-full"
    >
        <input type="hidden" name="tagId" value={tag.id} />

        <label class="relative cursor-pointer">
            <input
                type="color"
                name="color"
                value={tag.color}
                class="tag-color-input absolute bottom-0 right-0 w-0 h-0 opacity-0"
            />
            <div
                class="w-4 h-4 rounded-full shadow-md border-2 border-white flex items-center justify-center"
                style={`background-color: ${tag.color}`}
            >
            </div>
        </label>

        <input
            autocomplete="off"
            type="text"
            name="name"
            value={tag.name}
            class="tag-name-input min-w-0 bg-gray-600 text-white border border-gray-500 rounded px-1.5 py-1 focus:ring-2 focus:ring-purple-500 focus:border-transparent"
            placeholder="Tag name"
            required
        />

        <div class="tag-edit-actions flex items-center gap-x-2">
            <button
                type="button"
                class="save-tag-btn group text-green-400 hover:text-green-300 transition-colors p-1 rounded hover:bg-green-900/20"
                data-tag-id={tag.id}
                title="Save Changes"
            >
                <Save />
            </button>
            <button
                type="button"
                class="cancel-tag-btn group text-red-400 hover:text-red-300 transition-colors p-1 rounded hover:bg-gray-900/20"
                data-tag-id={tag.id}
                title="Cancel Editing"
            >
                <X />
            </button>
        </div>
    </form>
</div>

<script>
    // Keep the visible swatch in sync
    document.addEventListener("DOMContentLoaded", () => {
        document.querySelectorAll('input[type="color"]').forEach((input) => {
            input.addEventListener("input", (e) => {
                const target = e.target as HTMLInputElement;
                const preview = target.nextElementSibling as HTMLDivElement;

                preview.style.backgroundColor = target.value;
            });
        });
    });
</script>
