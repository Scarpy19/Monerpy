---
import X from "@svg/mono/X.astro";
import ColorPicker from "@comps/ColorPicker.astro";
import CSRFToken from "@comps/CSRFToken.astro";
---

<!-- Render as custom element host -->
<tag-modal
    id="tagModal"
    class="fixed inset-0 bg-black/50 z-50 hidden items-center justify-center min-h-screen p-4"
>
    <div
        class="bg-gray-800 rounded-lg shadow-xl max-w-md w-full max-h-[90vh] overflow-y-auto"
    >
        <header
            class="flex items-end justify-between py-4.5 px-6 border-b border-gray-700"
        >
            <h2 class="text-xl font-semibold text-purple-400">Create Tag</h2>
            <button
                type="button"
                id="closeTagModal"
                class="text-gray-400 hover:text-white transition-colors"
                ><X class="w-6 h-6" /></button
            >
        </header>

        <form id="tagForm" class="p-6 flex flex-col gap-y-4">
            <CSRFToken />

            <label for="tagName">
                <p class="text-sm font-medium text-gray-200 mb-2">Tag Name</p>
                <input
                    type="text"
                    id="tagName"
                    name="name"
                    required
                    class="w-full px-4 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                    placeholder="Enter tag name"
                />
            </label>

            <ColorPicker id="color" label="Tag Color" />

            <div class="flex items-center justify-end gap-x-3 pt-4">
                <button
                    type="button"
                    id="cancelTagButton"
                    class="bg-gray-600 hover:bg-gray-700 px-4 py-2 rounded text-white transition duration-200"
                    >Cancel</button
                >
                <button
                    type="submit"
                    class="px-6 py-2 bg-purple-600 hover:bg-purple-700 text-white font-semibold rounded transition-colors"
                    >Create Tag</button
                >
            </div>
        </form>
    </div>
</tag-modal>

<script>
    class TagModal extends HTMLElement {
        private root!: HTMLElement;
        private _closeBtn: HTMLButtonElement | null = null;
        private _cancelBtn: HTMLButtonElement | null = null;
        private _form: HTMLFormElement | null = null;
        private _downOutside: boolean = false;

        constructor() {
            super();
            this._onClose = this._onClose.bind(this);
            this._onCancel = this._onCancel.bind(this);
            this._onMouseDown = this._onMouseDown.bind(this);
            this._onMouseUp = this._onMouseUp.bind(this);
            this._downOutside = false;
        }

        connectedCallback() {
            this.root = this;
            this._closeBtn = this.root.querySelector("#closeTagModal");
            this._cancelBtn = this.root.querySelector("#cancelTagButton");
            this._form = this.root.querySelector("#tagForm");

            if (this._closeBtn)
                this._closeBtn.addEventListener("click", this._onClose);
            if (this._cancelBtn)
                this._cancelBtn.addEventListener("click", this._onCancel);
            if (this._form)
                this._form.addEventListener(
                    "submit",
                    this._onSubmit.bind(this),
                );

            this.addEventListener("mousedown", this._onMouseDown);
            this.addEventListener("mouseup", this._onMouseUp);
        }

        disconnectedCallback() {
            if (this._closeBtn)
                this._closeBtn.removeEventListener("click", this._onClose);
            if (this._cancelBtn)
                this._cancelBtn.removeEventListener("click", this._onCancel);
            if (this._form)
                this._form.removeEventListener(
                    "submit",
                    this._onSubmit.bind(this),
                );
            this.removeEventListener("mousedown", this._onMouseDown);
            this.removeEventListener("mouseup", this._onMouseUp);
        }

        _onClose() {
            this.closeModal();
        }
        _onCancel() {
            this.closeModal();
        }

        async _onSubmit(e: Event) {
            e.preventDefault();

            if (!this._form) return;
            const formData = new FormData(this._form);

            const { ToastService } = await import("@lib/toast.ts");
            try {
                const { actions } = await import("astro:actions");
                const result = await actions.createTag(formData);

                if (result.data?.ok) {
                    ToastService.success("Tag created successfully!");
                    this.closeModal();
                    // Reload the page to show updated data
                    window.location.reload();
                } else {
                    ToastService.error(
                        result.data?.error || "Failed to create tag",
                    );
                    console.error(
                        "Tag creation failed:",
                        result.error || result.data?.error,
                    );
                }
            } catch (error) {
                ToastService.error("An error occurred. Please try again.");
                console.error("Error creating tag:", error);
            }
        }

        _onMouseDown(e: MouseEvent) {
            if (e.target === this && e.button === 0) this._downOutside = true;
            else this._downOutside = false;
        }

        _onMouseUp(e: MouseEvent) {
            if (this._downOutside && e.target === this && e.button === 0)
                this.closeModal();
            this._downOutside = false;
        }

        openModal() {
            this.classList.remove("hidden");
            this.classList.add("flex");
            document.body.style.overflow = "hidden";
            const nameInput = this.querySelector(
                'input[name="name"]',
            ) as HTMLInputElement;
            if (nameInput && typeof nameInput.focus === "function")
                nameInput.focus();
        }

        closeModal() {
            this.classList.add("hidden");
            this.classList.remove("flex");
            document.body.style.overflow = "auto";
            const form = this.querySelector("form") as HTMLFormElement;
            if (form) form.reset();
            const firstColor = form
                ? (form.querySelector(
                      'input[name="color"]',
                  ) as HTMLInputElement)
                : null;
            if (firstColor) firstColor.checked = true;
        }
    }

    if (!customElements.get("tag-modal")) {
        customElements.define("tag-modal", TagModal);
    }
</script>
