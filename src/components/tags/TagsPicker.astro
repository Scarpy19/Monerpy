---
import { actions } from "astro:actions";

interface Props {
  id?: string;
  name?: string;
  label?: string;
  placeholder?: string;
  value?: string; // comma separated
}

const {
  id = "tags",
  name = "tags",
  label = "Tags (comma-separated)",
  placeholder = "tag1, tag2, tag3",
  value = "",
} = Astro.props as Props;

const tagsResult = await Astro.callAction(actions.getTags, {});
const existingTags = tagsResult.data?.ok ? tagsResult.data.tags : [];
---

<div class="flex gap-x-2" data-tags-input-root data-target-id={id}>
  <label for={id} class="flex-1">
    {
      label && (
        <span class="block text-sm font-medium text-gray-300 mb-2">
          {label}
        </span>
      )
    }
    <input
      type="text"
      id={id}
      name={name}
      value={value}
      placeholder={placeholder}
      class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-purple-500"
    />
  </label>
  <div class="mt-2">
    <span class="text-xs text-gray-400 mb-1 block">Existing tags:</span>
    <div class="flex flex-wrap gap-1">
      {
        existingTags &&
          existingTags.map((tag) => (
            <button
              type="button"
              class="tag-chip text-xs px-2 py-1 rounded text-white hover:opacity-80"
              style={`background-color: ${tag.color}`}
            >
              {tag.name}
            </button>
          ))
      }
    </div>
  </div>
</div>

<script>
  // Attach click handlers to tag chips so they toggle their value in the target input
  function wire(root: HTMLElement) {
    if (root.hasAttribute("data-tags-input-wired")) return; // prevent double-binding
    root.setAttribute("data-tags-input-wired", "true");

    const targetId = root.getAttribute("data-target-id") || "tags";
    const chips = root.querySelectorAll(".tag-chip");

    chips.forEach((chip) => {
      chip.addEventListener("click", function (this: HTMLButtonElement) {
        const tagName = this.textContent?.trim();
        const input = document.getElementById(
          targetId,
        ) as HTMLInputElement | null;
        if (!input || !tagName) {
          console.error("[TagsPicker] Missing input or tagName", {
            inputFound: !!input,
            tagName,
          });
          alert("Error: Missing input or tag name");
          return;
        }

        // Parse current comma-separated tags into an array
        const current = input.value
          .split(",")
          .map((t) => t.trim())
          .filter((t) => t.length > 0);

        // Toggle presence of the clicked tag
        if (!current.includes(tagName)) {
          current.push(tagName);
          input.value = current.join(", ");
        } else {
          input.value = current.filter((t) => t !== tagName).join(", ");
        }
      });
    });
  }

  document
    .querySelectorAll("[data-tags-input-root]")
    .forEach((el) => wire(el as HTMLElement));
</script>
