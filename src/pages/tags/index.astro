---
import Layout from "@layouts/Layout.astro";
import LogoutScript from "@comps/layout/LogoutScript.astro";
import TagModal from "@comps/tags/TagModal.astro";
import TagItem from "@comps/tags/TagItem.astro";
import DeleteTagConfirmModal from "@comps/tags/DeleteTagConfirmModal.astro";
import Header from "@comps/layout/Header.astro";
import ToastScript from "@comps/toast/ToastScript.astro";
import { actions } from "astro:actions";
import JoinFamily from "@comps/layout/JoinFamily.astro";
import Tag from "@comps/svgs/mono/Tag.astro";
import PlusButton from "@/components/PlusButton.astro";
import TextButton from "@/components/TextButton.astro";

const user = Astro.locals.user;

if (!user) {
    return Astro.redirect("/login");
}

// Handle form submissions
let toastMessage = "";
let toastType = "success";

if (Astro.request.method === "POST") {
    const formData = await Astro.request.formData();
    const action = formData.get("_action") as string;

    if (action === "create") {
        const result = await Astro.callAction(actions.createTag, formData);
        if (result.data?.ok) {
            toastMessage = "Tag created successfully!";
            toastType = "success";
        } else {
            toastMessage = result.data?.error || "Failed to create tag";
            toastType = "error";
        }
    } else if (action === "update") {
        const result = await Astro.callAction(actions.updateTag, formData);
        if (result.data?.ok) {
            toastMessage = "Tag updated successfully!";
            toastType = "success";
        } else {
            toastMessage = result.data?.error || "Failed to update tag";
            toastType = "error";
        }
    } else if (action === "delete") {
        const result = await Astro.callAction(actions.deleteTag, formData);
        if (result.data?.ok) {
            toastMessage = "Tag deleted successfully!";
            toastType = "success";
        } else {
            toastMessage = result.data?.error || "Failed to delete tag";
            toastType = "error";
        }
    } else if (action === "restore") {
        const result = await Astro.callAction(actions.restoreTag, formData);
        if (result.data?.ok) {
            toastMessage = "Tag restored successfully!";
            toastType = "success";
        } else {
            toastMessage = result.data?.error || "Failed to restore tag";
            toastType = "error";
        }
    }
}

// Check if user is in a family first
const userResult = await Astro.callAction(actions.getFamilyDetails, {});
const userInFamily = userResult.data?.ok && userResult.data.family;

// Get tags data only if user is in a family
const tagsResult = userInFamily
    ? await Astro.callAction(actions.getTags, { includeDeleted: false })
    : { data: { ok: false, tags: [] } };

// Normalize tags to a predictable shape for the TagItem component
const rawTagsSource = tagsResult.data?.ok ? tagsResult.data.tags : [];
// Ensure we always have an array. If the API returned an object (e.g. keyed by id or grouped),
// convert to an array using Object.values. If it's already an array, use it. Otherwise fallback to empty array.
const rawTags: any[] = Array.isArray(rawTagsSource)
    ? rawTagsSource
    : rawTagsSource
      ? Object.values(rawTagsSource)
      : [];
type TagShape = {
    id: number;
    name: string;
    color: string;
    _count?: { transactions?: number };
};
const tags: TagShape[] = (rawTags ?? []).map((t: TagShape) => ({
    id: t.id,
    name: t.name,
    color: t.color,
    _count: t._count,
}));
---

<Layout title="Tags" description="Manage your transaction tags">
    <main class="bg-gray-900 p-8 text-white">
        <Header currentPage="tags" user={user} />

        {
            !userInFamily ? (
                <JoinFamily />
            ) : (
                <div class="bg-gray-800 shadow-lg px-6 py-6 rounded-lg mx-auto max-w-7xl">
                    <div class="flex items-center justify-between mb-6">
                        <h2 class="font-semibold text-purple-400 text-xl flex items-center gap-x-2">
                            <Tag />
                            Tags
                        </h2>
                        <PlusButton id="addTagButton" title="Add a new Tag" />
                    </div>

                    {tags && tags.length === 0 ? (
                        <div class="text-center py-10">
                            <Tag class="w-20 h-20 mx-auto text-purple-400 mb-4" />
                            <h3 class="text-xl font-semibold text-gray-300 mb-2">
                                No Tags yet
                            </h3>
                            <p class="text-gray-400 mb-6">
                                Create tags to label and organize your
                                transactions better.
                            </p>
                            <TextButton id="addFirstTagButton" title="Add Tag">
                                Create Your First Tag
                            </TextButton>
                        </div>
                    ) : (
                        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
                            {tags && tags.map((tag) => <TagItem tag={tag} />)}
                        </div>
                    )}
                </div>
            )
        }
    </main>

    <TagModal />
    <DeleteTagConfirmModal />
    <LogoutScript />
    {toastMessage && <ToastScript message={toastMessage} type={toastType} />}
</Layout>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        // Listen for custom events from TagItem components
        document.addEventListener("tag-updated", (event) => {
            const customEvent = event as CustomEvent;
            console.log("Tag updated:", customEvent.detail);
            // Optionally handle any page-level updates needed
        });

        document.addEventListener("tag-deleted", (event) => {
            const customEvent = event as CustomEvent;
            console.log("Tag deleted:", customEvent.detail);

            // Check if no tags left and reload to show empty state
            const tagsContainer = document.querySelector(".grid");
            if (tagsContainer && tagsContainer.children.length === 0) {
                location.reload();
            }
        });

        document.addEventListener("tag-edit-started", (event) => {
            const customEvent = event as CustomEvent;
            console.log("Tag edit started:", customEvent.detail);
            // Optionally handle any page-level state changes
        });

        document.addEventListener("tag-edit-cancelled", (event) => {
            const customEvent = event as CustomEvent;
            console.log("Tag edit cancelled:", customEvent.detail);
            // Optionally handle any page-level state changes
        });

        const addTagButton = document.getElementById(
            "addTagButton",
        ) as HTMLButtonElement;
        if (addTagButton) {
            addTagButton.addEventListener("click", () => {
                if ((window as any).openTagModal) {
                    (window as any).openTagModal();
                }
            });
        }

        const addFirstTagButton = document.getElementById(
            "addFirstTagButton",
        ) as HTMLButtonElement;
        if (addFirstTagButton) {
            addFirstTagButton.addEventListener("click", () => {
                if ((window as any).openTagModal) {
                    (window as any).openTagModal();
                }
            });
        }

        // addTagButton.click();
    });
</script>
