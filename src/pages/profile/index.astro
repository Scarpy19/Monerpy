---
import LogoutScript from "@comps/layout/LogoutScript.astro";
import Layout from "@layouts/Layout.astro";
import Header from "@comps/layout/Header.astro";
import { actions } from "astro:actions";
import {
    formatDateForDisplay,
    formatTimestampToDisplay,
} from "@/lib/date-utils";

const user = Astro.locals.user;

if (!user) {
    return Astro.redirect("/login");
}

const userInfoResult = await Astro.callAction(actions.getUser, { id: user.id });
const userInfo = userInfoResult.data?.ok && userInfoResult.data.user;
---

<Layout title="Profile">
    <main class="bg-gray-900 text-white p-8">
        <Header currentPage="profile" user={user} />

        <div class="mt-8 flex flex-wrap gap-6 mx-auto max-w-7xl">
            <div class="grow bg-gray-800 rounded-lg shadow-lg p-6">
                <h2 class="text-2xl font-semibold mb-5 text-purple-400">
                    Account Information
                </h2>
                <form id="profileForm" class="flex flex-col gap-y-6">
                    <label for="username">
                        <p class="text-sm font-medium text-purple-300 mb-2">
                            Username
                        </p>
                        <input
                            type="text"
                            id="username"
                            name="username"
                            value={user.username}
                            required
                            class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                        />
                    </label>

                    <label for="email">
                        <p class="text-sm font-medium text-purple-300 mb-2">
                            Email
                        </p>
                        <input
                            type="email"
                            id="email"
                            name="email"
                            value={user.email}
                            required
                            class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                        />
                    </label>

                    <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                        <div>
                            <p class="text-sm text-purple-300">Role</p>
                            <p class="text-white font-medium">
                                {(userInfo && userInfo.role) || "Unknown"}
                            </p>
                        </div>

                        <div>
                            <p class="text-sm text-purple-300">Counts</p>
                            <div
                                class="text-white font-medium grid grid-cols-2"
                            >
                                <span>
                                    Transactions: {
                                        (userInfo &&
                                            userInfo._count?.transactions) ||
                                            0
                                    }
                                </span>
                                <span>
                                    Recurring: {
                                        (userInfo &&
                                            userInfo._count
                                                ?.recurringTransactions) ||
                                            0
                                    }
                                </span>
                            </div>
                        </div>

                        <div>
                            <p class="text-sm text-purple-300">
                                Session Created
                            </p>
                            <p class="text-white font-medium">
                                {
                                    formatTimestampToDisplay(
                                        parseInt(user.created),
                                    )
                                }
                            </p>
                        </div>

                        <div>
                            <p class="text-sm text-purple-300">
                                Account Created
                            </p>
                            <p class="text-white font-medium">
                                {
                                    userInfo && userInfo.createdAt
                                        ? formatDateForDisplay(
                                              userInfo.createdAt,
                                              {
                                                  includeTime: true,
                                                  pm: true,
                                              },
                                          )
                                        : "Unknown"
                                }
                            </p>
                        </div>

                        <div>
                            <p class="text-sm text-purple-300">Last Login</p>
                            <p class="text-white font-medium">
                                {
                                    userInfo && userInfo.lastLogin
                                        ? formatDateForDisplay(
                                              userInfo.lastLogin,
                                              {
                                                  includeTime: true,
                                                  pm: true,
                                              },
                                          )
                                        : "Never logged in"
                                }
                            </p>
                        </div>

                        <div>
                            <p class="text-sm text-purple-300">Last Updated</p>
                            <p class="text-white font-medium">
                                {
                                    userInfo && userInfo.updatedAt
                                        ? formatDateForDisplay(
                                              userInfo.updatedAt,
                                              {
                                                  includeTime: true,
                                                  pm: true,
                                              },
                                          )
                                        : "Unknown"
                                }
                            </p>
                        </div>
                    </div>

                    <button
                        type="submit"
                        class="w-fit self-end flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-purple-600 hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500"
                    >
                        Update Profile
                    </button>
                </form>
            </div>

            <div class="grow bg-gray-800 rounded-lg shadow-lg p-6">
                <h2 class="text-xl font-semibold mb-5 text-purple-400">
                    Change Password
                </h2>
                <form id="passwordForm" class="flex flex-col gap-y-6">
                    <label for="currentPassword">
                        <p class="text-sm font-medium text-purple-300 mb-2">
                            Current Password
                        </p>
                        <input
                            type="password"
                            id="currentPassword"
                            name="currentPassword"
                            required
                            class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                        />
                    </label>

                    <label for="newPassword">
                        <p class="text-sm font-medium text-purple-300 mb-2">
                            New Password
                        </p>
                        <input
                            type="password"
                            id="newPassword"
                            name="newPassword"
                            required
                            class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                        />
                    </label>

                    <label for="confirmPassword">
                        <p class="text-sm font-medium text-purple-300 mb-2">
                            Confirm New Password
                        </p>
                        <input
                            type="password"
                            id="confirmPassword"
                            name="confirmPassword"
                            required
                            class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                        />
                    </label>

                    <button
                        type="submit"
                        class="w-fit self-end flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-purple-600 hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500"
                    >
                        Change Password
                    </button>
                </form>
            </div>

            <div class="w-full mx-auto bg-gray-800 p-6 rounded-lg">
                <h2 class="text-xl font-semibold mb-4">
                    How This Page is Protected
                </h2>

                <p class="text-gray-300">
                    The user information is available in <code
                        >Astro.locals.user</code
                    > which is set by the middleware.
                </p>

                <button
                    type="button"
                    class="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition float-right"
                >
                    Useless Button
                </button>
            </div>
        </div>
    </main>

    <script>
        const profileForm = document.getElementById(
            "profileForm",
        ) as HTMLFormElement;
        const passwordForm = document.getElementById(
            "passwordForm",
        ) as HTMLFormElement;

        profileForm?.addEventListener("submit", async (e) => {
            e.preventDefault();

            const formData = new FormData(e.target as HTMLFormElement);
            const data = {
                username: formData.get("username"),
                email: formData.get("email"),
            };

            try {
                const response = await fetch("/api/user/profile", {
                    method: "PUT",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify(data),
                });

                if (response.ok) {
                    alert("Profile updated successfully");
                    window.location.reload();
                } else {
                    const error = await response.json();
                    alert(error.error || "Failed to update profile");
                }
            } catch (error) {
                console.error("Error:", error);
                alert("Failed to update profile");
            }
        });

        passwordForm?.addEventListener("submit", async (e) => {
            e.preventDefault();

            const formData = new FormData(e.target as HTMLFormElement);
            const newPassword = formData.get("newPassword");
            const confirmPassword = formData.get("confirmPassword");

            if (newPassword !== confirmPassword) {
                alert("New passwords do not match");
                return;
            }

            const data = {
                currentPassword: formData.get("currentPassword"),
                newPassword: newPassword,
            };

            try {
                const response = await fetch("/api/user/password", {
                    method: "PUT",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify(data),
                });

                if (response.ok) {
                    alert("Password updated successfully");
                    (e.target as HTMLFormElement).reset();
                } else {
                    const error = await response.json();
                    alert(error.error || "Failed to update password");
                }
            } catch (error) {
                console.error("Error:", error);
                alert("Failed to update password");
            }
        });
    </script>
</Layout>

<LogoutScript />
