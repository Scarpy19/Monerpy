---
import Layout from "@layouts/Layout.astro";
import Header from "@comps/layout/Header.astro";
import { actions } from "astro:actions";
import { formatDateForDisplay, formatCurrency } from "@lib/date-utils.ts";
import { accountTypes } from "@arrays.d.ts";
import Input from "@comps/Input.astro";
import AccountTypeSelect from "@comps/accounts/AccountTypeSelect.astro";
import ColorPicker from "@comps/ColorPicker.astro";

const user = Astro.locals.user;

if (!user) {
    return Astro.redirect("/login");
}

// Get account ID from URL
const accountId = parseInt(Astro.params.id as string);
if (isNaN(accountId)) {
    return Astro.redirect("/accounts");
}

// Check if user is in a family first
const userResult = await Astro.callAction(actions.getFamilyDetails, {});
const userInFamily = userResult.data?.ok && userResult.data.family;

if (!userInFamily) {
    return Astro.redirect("/accounts");
}

// Get account data
const accountResult = await Astro.callAction(actions.getAccount, {
    id: accountId,
});
if (!accountResult.data?.ok || !accountResult.data.account) {
    return Astro.redirect("/accounts");
}

const account = accountResult.data.account;
---

<Layout
    title={`Account: ${account.name}`}
    description={`Manage ${account.name} account`}
>
    <main class="bg-gray-900 p-8 text-white">
        <Header currentPage="accounts" user={user} />

        <div class="mx-auto max-w-7xl">
            <!-- Back Link -->
            <div class="mb-6">
                <a
                    href="/accounts"
                    class="text-purple-400 hover:text-purple-300 flex items-center gap-x-2"
                >
                    <span>←</span>
                    <span>Back to Accounts</span>
                </a>
            </div>

            <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
                <!-- Account Details & Edit Form -->
                <div class="flex flex-col gap-y-6">
                    <!-- Account Overview -->
                    <div class="bg-gray-800 shadow-lg px-6 py-6 rounded-lg">
                        <div class="flex items-center gap-x-4 mb-4">
                            <div
                                class="w-6 h-6 rounded-full"
                                style={`background-color: ${account.color}`}
                            >
                            </div>
                            <h1 class="text-2xl font-bold text-white">
                                {account.name}
                            </h1>
                        </div>

                        <div class="grid grid-cols-2 gap-4">
                            <div>
                                <p class="text-gray-400 text-sm">
                                    Account Type
                                </p>
                                <p class="text-white font-semibold">
                                    {
                                        accountTypes.find(
                                            (t) =>
                                                t.value === account.accountType,
                                        )?.icon
                                    }
                                    {
                                        accountTypes.find(
                                            (t) =>
                                                t.value === account.accountType,
                                        )?.label || account.accountType
                                    }
                                </p>
                            </div>
                            <div>
                                <p class="text-gray-400 text-sm">
                                    Current Balance
                                </p>
                                <p
                                    class={`text-2xl font-bold ${account.balance >= 0 ? "text-green-400" : "text-red-400"}`}
                                >
                                    {formatCurrency(account.balance)}
                                </p>
                            </div>
                        </div>
                    </div>

                    <!-- Edit Account Form -->
                    <div class="bg-gray-800 shadow-lg px-6 py-6 rounded-lg">
                        <h2 class="mb-6 font-semibold text-purple-400 text-xl">
                            Edit Account
                        </h2>

                        <form
                            id="updateAccountForm"
                            class="flex flex-col gap-y-4"
                        >
                            <input type="hidden" name="id" value={account.id} />

                            <!-- Account Name -->
                            <Input
                                id="accountName"
                                label="Account Name"
                                name="name"
                                required
                                value={account.name}
                                placeholder="Enter account name"
                            />

                            <AccountTypeSelect
                                required
                                value={account.accountType}
                            />

                            <ColorPicker
                                required={true}
                                id="color"
                                label="Account Color"
                                checkedColor={account.color}
                            />

                            <button
                                type="submit"
                                class="w-full bg-purple-600 hover:bg-purple-700 text-white font-semibold py-2 px-4 rounded-lg transition-colors"
                            >
                                Update Account
                            </button>
                        </form>
                    </div>
                </div>

                <!-- Account Activity & Balance History -->
                <div class="flex flex-col gap-y-6">
                    <!-- Recent Transactions -->
                    <div class="bg-gray-800 shadow-lg px-6 py-6 rounded-lg">
                        <h2 class="mb-4 font-semibold text-purple-400 text-xl">
                            Recent Transactions
                        </h2>

                        {
                            account.transactions &&
                            account.transactions.length > 0 ? (
                                <div class="flex flex-col gap-y-3">
                                    {account.transactions.map(
                                        (transaction: any) => (
                                            <div class="flex items-center justify-between py-2 border-b border-gray-700 last:border-b-0">
                                                <div>
                                                    <p class="text-white font-medium">
                                                        {transaction.name}
                                                    </p>
                                                    <p class="text-gray-400 text-sm">
                                                        {formatDateForDisplay(
                                                            transaction.date,
                                                            {
                                                                includeTime: false,
                                                            },
                                                        )}
                                                    </p>
                                                </div>
                                                <div class="text-right">
                                                    <p
                                                        class={`font-semibold ${
                                                            transaction.type ===
                                                            "Income"
                                                                ? "text-green-400"
                                                                : "text-red-400"
                                                        }`}
                                                    >
                                                        {transaction.type ===
                                                        "Income"
                                                            ? "+"
                                                            : "-"}
                                                        {formatCurrency(
                                                            transaction.amount,
                                                        )}
                                                    </p>
                                                </div>
                                            </div>
                                        ),
                                    )}
                                    <div class="pt-4">
                                        <a
                                            href="/transactions"
                                            class="text-purple-400 hover:text-purple-300 text-sm"
                                        >
                                            View all transactions →
                                        </a>
                                    </div>
                                </div>
                            ) : (
                                <div class="text-center py-8 text-gray-400">
                                    <p>No transactions yet</p>
                                    <a
                                        href="/transactions"
                                        class="text-purple-400 hover:text-purple-300 text-sm underline"
                                    >
                                        Create your first transaction
                                    </a>
                                </div>
                            )
                        }
                    </div>

                    <!-- Balance History Link -->
                    <div class="bg-gray-800 shadow-lg px-6 py-6 rounded-lg">
                        <h2 class="mb-4 font-semibold text-purple-400 text-xl">
                            Balance History
                        </h2>

                        {
                            account.accountBalances &&
                            account.accountBalances.length > 0 ? (
                                <div class="flex flex-col gap-y-3">
                                    {account.accountBalances
                                        .slice(0, 5)
                                        .map((balance: any) => (
                                            <div class="flex items-center justify-between py-2">
                                                <p class="text-gray-400">
                                                    {formatDateForDisplay(
                                                        balance.date,
                                                        {
                                                            includeTime: false,
                                                            dateStyle: "normal",
                                                        },
                                                    )}
                                                </p>
                                                <p
                                                    class={`font-semibold ${balance.balance >= 0 ? "text-green-400" : "text-red-400"}`}
                                                >
                                                    {formatCurrency(
                                                        balance.balance,
                                                    )}
                                                </p>
                                            </div>
                                        ))}
                                    <div class="pt-4">
                                        <a
                                            href={`/accounts/${account.id}/balance`}
                                            class="text-purple-400 hover:text-purple-300 text-sm"
                                        >
                                            View full balance history →
                                        </a>
                                    </div>
                                </div>
                            ) : (
                                <div class="text-center py-8 text-gray-400">
                                    <p>No balance history available</p>
                                </div>
                            )
                        }
                    </div>
                </div>
            </div>
        </div>
    </main>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const colorPicker = document.getElementById(
                "color",
            ) as HTMLInputElement;
            const colorHex = document.getElementById(
                "colorHex",
            ) as HTMLInputElement;

            if (colorPicker && colorHex) {
                colorPicker.addEventListener("change", function () {
                    colorHex.value = this.value;
                });

                colorHex.addEventListener("input", function () {
                    if (/^#[0-9A-Fa-f]{6}$/.test(this.value)) {
                        colorPicker.value = this.value;
                    }
                });
            }
        });

        // Handle form submission
        const updateForm = document.getElementById(
            "updateAccountForm",
        ) as HTMLFormElement;
        if (updateForm) {
            updateForm.addEventListener("submit", async function (e) {
                e.preventDefault();

                const formData = new FormData(updateForm);
                const csrfInput = document.querySelector(
                    'input[name="_csrf_token"]',
                ) as HTMLInputElement;

                if (csrfInput && csrfInput.value) {
                    formData.set("_csrf_token", csrfInput.value);
                }

                const { ToastService } = await import("@lib/toast.ts");
                try {
                    const { actions } = await import("astro:actions");
                    const result = await actions.updateAccount(formData);

                    if (result.data?.ok) {
                        ToastService.success("Account updated successfully!");
                    } else {
                        ToastService.showToast({
                            message:
                                result.data?.error ||
                                "Failed to update account",
                            type: "error",
                        });
                        console.error(
                            "Account update failed:",
                            result.error || result.data?.error,
                        );
                    }
                } catch (error) {
                    ToastService.showToast({
                        message: "An error occurred. Please try again.",
                        type: "error",
                    });
                    console.error("Error updating account:", error);
                }
            });
        }
    </script>
</Layout>
