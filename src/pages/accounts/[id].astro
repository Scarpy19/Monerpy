---
import Layout from "@layouts/Layout.astro";
import Footer from "@comps/Footer.astro";
import LogoutScript from "@comps/LogoutScript.astro";
import Header from "@comps/Header.astro";
import { actions } from "astro:actions";

const user = Astro.locals.user;

if (!user) {
    return Astro.redirect("/login");
}

// Get account ID from URL
const accountId = parseInt(Astro.params.id as string);
if (isNaN(accountId)) {
    return Astro.redirect("/accounts");
}

// Check if user is in a family first
const userResult = await Astro.callAction(actions.getFamilyDetails, {});
const userInFamily = userResult.data?.ok && userResult.data.family;

if (!userInFamily) {
    return Astro.redirect("/accounts");
}

// Handle form submissions
if (Astro.request.method === "POST") {
    const formData = await Astro.request.formData();
    const action = formData.get("_action") as string;

    if (action === "update") {
        const result = await Astro.callAction(actions.updateAccount, formData);
        if (result.data?.ok) {
            return Astro.redirect(`/accounts/${accountId}?success=updated`);
        }
    }
}

// Get account data
const accountResult = await Astro.callAction(actions.getAccount, {
    id: accountId,
});
if (!accountResult.data?.ok || !accountResult.data.account) {
    return Astro.redirect("/accounts");
}

const account = accountResult.data.account;

// Get URL parameters for success messages
const url = new URL(Astro.request.url);
const success = url.searchParams.get("success");

// Account type options
const accountTypes = [
    { value: "Cash", label: "Cash", icon: "üíµ" },
    { value: "Checking", label: "Checking Account", icon: "üè¶" },
    { value: "Savings", label: "Savings Account", icon: "üí∞" },
    { value: "CreditCard", label: "Credit Card", icon: "üí≥" },
    { value: "Investment", label: "Investment Account", icon: "üìà" },
    { value: "Loan", label: "Loan Account", icon: "üè†" },
];

// Predefined colors
const colors = [
    "#6172F3",
    "#10B981",
    "#F59E0B",
    "#EF4444",
    "#8B5CF6",
    "#06B6D4",
    "#84CC16",
    "#F97316",
    "#EC4899",
    "#6B7280",
    "#14B8A6",
    "#F43F5E",
];
---

<Layout
    title={`Account: ${account.name}`}
    description={`Manage ${account.name} account`}
>
    <main class="bg-gray-900 p-8 min-h-screen text-white">
        <Header currentPage="accounts" user={user} />

        <!-- Success Messages -->
        {
            success && (
                <div class="mx-auto max-w-7xl mb-6">
                    <div class="bg-green-600 text-white px-4 py-3 rounded-lg">
                        {success === "updated" &&
                            "Account updated successfully!"}
                    </div>
                </div>
            )
        }

        <div class="mx-auto max-w-7xl">
            <!-- Back Link -->
            <div class="mb-6">
                <a
                    href="/accounts"
                    class="text-purple-400 hover:text-purple-300 flex items-center space-x-2"
                >
                    <span>‚Üê</span>
                    <span>Back to Accounts</span>
                </a>
            </div>

            <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
                <!-- Account Details & Edit Form -->
                <div class="space-y-6">
                    <!-- Account Overview -->
                    <div class="bg-gray-800 shadow-lg px-6 py-6 rounded-lg">
                        <div class="flex items-center space-x-4 mb-4">
                            <div
                                class="w-6 h-6 rounded-full"
                                style={`background-color: ${account.color}`}
                            >
                            </div>
                            <h1 class="text-2xl font-bold text-white">
                                {account.name}
                            </h1>
                        </div>

                        <div class="grid grid-cols-2 gap-4">
                            <div>
                                <p class="text-gray-400 text-sm">
                                    Account Type
                                </p>
                                <p class="text-white font-semibold">
                                    {
                                        accountTypes.find(
                                            (t) =>
                                                t.value === account.accountType,
                                        )?.icon
                                    }
                                    {
                                        accountTypes.find(
                                            (t) =>
                                                t.value === account.accountType,
                                        )?.label || account.accountType
                                    }
                                </p>
                            </div>
                            <div>
                                <p class="text-gray-400 text-sm">
                                    Current Balance
                                </p>
                                <p
                                    class={`text-2xl font-bold ${account.balance >= 0 ? "text-green-400" : "text-red-400"}`}
                                >
                                    {
                                        new Intl.NumberFormat("es-ES", {
                                            style: "currency",
                                            currency: "EUR",
                                            minimumFractionDigits: 2,
                                        }).format(account.balance)
                                    }
                                </p>
                            </div>
                        </div>
                    </div>

                    <!-- Edit Account Form -->
                    <div class="bg-gray-800 shadow-lg px-6 py-6 rounded-lg">
                        <h2 class="mb-6 font-semibold text-purple-400 text-xl">
                            Edit Account
                        </h2>

                        <form method="POST" class="space-y-4">
                            <input
                                type="hidden"
                                name="_action"
                                value="update"
                            />
                            <input type="hidden" name="id" value={account.id} />

                            <!-- Account Name -->
                            <div>
                                <label
                                    for="name"
                                    class="block text-sm font-medium text-gray-300 mb-2"
                                >
                                    Account Name *
                                </label>
                                <input
                                    type="text"
                                    id="name"
                                    name="name"
                                    value={account.name}
                                    required
                                    class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                                />
                            </div>

                            <!-- Account Type -->
                            <div>
                                <label
                                    for="accountType"
                                    class="block text-sm font-medium text-gray-300 mb-2"
                                >
                                    Account Type *
                                </label>
                                <select
                                    id="accountType"
                                    name="accountType"
                                    required
                                    class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                                >
                                    {
                                        accountTypes.map((type) => (
                                            <option
                                                value={type.value}
                                                selected={
                                                    account.accountType ===
                                                    type.value
                                                }
                                            >
                                                {type.icon} {type.label}
                                            </option>
                                        ))
                                    }
                                </select>
                            </div>

                            <!-- Color Picker -->
                            <div>
                                <label
                                    for="color"
                                    class="block text-sm font-medium text-gray-300 mb-2"
                                >
                                    Account Color
                                </label>
                                <div class="flex items-center space-x-3">
                                    <input
                                        type="color"
                                        id="color"
                                        name="color"
                                        value={account.color}
                                        class="w-12 h-10 border border-gray-600 rounded cursor-pointer"
                                    />
                                    <input
                                        type="text"
                                        id="colorHex"
                                        name="colorHex"
                                        value={account.color}
                                        pattern="^#[0-9A-Fa-f]{6}$"
                                        class="flex-1 px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                                    />
                                </div>
                                <!-- Predefined Colors -->
                                <div class="mt-3 grid grid-cols-6 gap-2">
                                    {
                                        colors.map((color) => (
                                            <button
                                                type="button"
                                                class="w-8 h-8 rounded border-2 border-gray-600 hover:border-white transition-colors"
                                                style={`background-color: ${color}`}
                                                onclick={`document.getElementById('color').value = '${color}'; document.getElementById('colorHex').value = '${color}';`}
                                            />
                                        ))
                                    }
                                </div>
                            </div>

                            <button
                                type="submit"
                                class="w-full bg-purple-600 hover:bg-purple-700 text-white font-semibold py-2 px-4 rounded-lg transition-colors"
                            >
                                Update Account
                            </button>
                        </form>
                    </div>
                </div>

                <!-- Account Activity & Balance History -->
                <div class="space-y-6">
                    <!-- Recent Transactions -->
                    <div class="bg-gray-800 shadow-lg px-6 py-6 rounded-lg">
                        <h2 class="mb-4 font-semibold text-purple-400 text-xl">
                            Recent Transactions
                        </h2>

                        {
                            account.transactions &&
                            account.transactions.length > 0 ? (
                                <div class="space-y-3">
                                    {account.transactions.map(
                                        (transaction: any) => (
                                            <div class="flex items-center justify-between py-2 border-b border-gray-700 last:border-b-0">
                                                <div>
                                                    <p class="text-white font-medium">
                                                        {transaction.name}
                                                    </p>
                                                    <p class="text-gray-400 text-sm">
                                                        {new Date(
                                                            transaction.date,
                                                        ).toLocaleDateString(
                                                            "es-ES",
                                                            {
                                                                year: "numeric",
                                                                month: "short",
                                                                day: "numeric",
                                                            },
                                                        )}
                                                    </p>
                                                </div>
                                                <div class="text-right">
                                                    <p
                                                        class={`font-semibold ${
                                                            transaction.type ===
                                                            "Income"
                                                                ? "text-green-400"
                                                                : "text-red-400"
                                                        }`}
                                                    >
                                                        {transaction.type ===
                                                        "Income"
                                                            ? "+"
                                                            : "-"}
                                                        {new Intl.NumberFormat(
                                                            "es-ES",
                                                            {
                                                                style: "currency",
                                                                currency: "EUR",
                                                                minimumFractionDigits: 2,
                                                            },
                                                        ).format(
                                                            transaction.amount,
                                                        )}
                                                    </p>
                                                </div>
                                            </div>
                                        ),
                                    )}
                                    <div class="pt-4">
                                        <a
                                            href="/transactions"
                                            class="text-purple-400 hover:text-purple-300 text-sm"
                                        >
                                            View all transactions ‚Üí
                                        </a>
                                    </div>
                                </div>
                            ) : (
                                <div class="text-center py-8 text-gray-400">
                                    <p>No transactions yet</p>
                                    <a
                                        href="/transactions"
                                        class="text-purple-400 hover:text-purple-300 text-sm underline"
                                    >
                                        Create your first transaction
                                    </a>
                                </div>
                            )
                        }
                    </div>

                    <!-- Balance History Link -->
                    <div class="bg-gray-800 shadow-lg px-6 py-6 rounded-lg">
                        <h2 class="mb-4 font-semibold text-purple-400 text-xl">
                            Balance History
                        </h2>

                        {
                            account.accountBalances &&
                            account.accountBalances.length > 0 ? (
                                <div class="space-y-3">
                                    {account.accountBalances
                                        .slice(0, 5)
                                        .map((balance: any) => (
                                            <div class="flex items-center justify-between py-2">
                                                <p class="text-gray-400">
                                                    {new Date(
                                                        balance.date,
                                                    ).toLocaleDateString(
                                                        "es-ES",
                                                        {
                                                            year: "numeric",
                                                            month: "short",
                                                            day: "numeric",
                                                        },
                                                    )}
                                                </p>
                                                <p
                                                    class={`font-semibold ${balance.balance >= 0 ? "text-green-400" : "text-red-400"}`}
                                                >
                                                    {new Intl.NumberFormat(
                                                        "es-ES",
                                                        {
                                                            style: "currency",
                                                            currency: "EUR",
                                                            minimumFractionDigits: 2,
                                                        },
                                                    ).format(balance.balance)}
                                                </p>
                                            </div>
                                        ))}
                                    <div class="pt-4">
                                        <a
                                            href={`/accounts/${account.id}/balance`}
                                            class="text-purple-400 hover:text-purple-300 text-sm"
                                        >
                                            View full balance history ‚Üí
                                        </a>
                                    </div>
                                </div>
                            ) : (
                                <div class="text-center py-8 text-gray-400">
                                    <p>No balance history available</p>
                                </div>
                            )
                        }
                    </div>
                </div>
            </div>
        </div>
    </main>

    <Footer />
    <LogoutScript />

    <!-- Color picker synchronization script -->
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const colorPicker = document.getElementById(
                "color",
            ) as HTMLInputElement;
            const colorHex = document.getElementById(
                "colorHex",
            ) as HTMLInputElement;

            if (colorPicker && colorHex) {
                colorPicker.addEventListener("change", function () {
                    colorHex.value = this.value;
                });

                colorHex.addEventListener("input", function () {
                    if (/^#[0-9A-Fa-f]{6}$/.test(this.value)) {
                        colorPicker.value = this.value;
                    }
                });
            }
        });
    </script>
</Layout>
