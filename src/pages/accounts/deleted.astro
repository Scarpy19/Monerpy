---
import Layout from "@layouts/Layout.astro";
import Header from "@comps/layout/Header.astro";
import ConfirmationModal from "@comps/ConfirmationModal.astro";
import { actions } from "astro:actions";
import { formatDate, formatCurrency } from "@lib/date-utils.ts";
import Bin from "@comps/svgs/mono/Bin.astro";
import CreditCard from "@comps/svgs/mono/CreditCard.astro";
import { accountTypes } from "@arrays.d.ts";
import DeletedInfo from "@/components/DeletedInfo.astro";

const user = Astro.locals.user;

if (!user) {
    return Astro.redirect("/login");
}

// Check if user is in a family first
const userResult = await Astro.callAction(actions.getFamilyDetails, {});
const userInFamily = userResult.data?.ok && userResult.data.family;

if (!userInFamily) {
    return Astro.redirect("/accounts");
}

// Get deleted accounts
const accountsResult = await Astro.callAction(actions.getAccountsList, {
    includeDeleted: true,
});
const allAccounts = accountsResult.data?.ok ? accountsResult.data.accounts : [];
const deletedAccounts = allAccounts
    ? allAccounts.filter((account: any) => account.deletedAt !== null)
    : [];

const deletedMsg = [
    "Deleted accounts are hidden from the main interface but their data is preserved",
    "All transactions and balance history remain intact",
    "You can restore deleted accounts at any time",
    "Restored accounts will reappear in your account lists",
];
---

<Layout title="Deleted Accounts" description="Manage deleted accounts">
    <main class="bg-gray-900 p-8 text-white">
        <Header currentPage="accounts" user={user} />
        <!-- Deleted Accounts List -->
        <div
            class="bg-gray-800 shadow-lg px-6 py-6 rounded-lg mx-auto max-w-7xl"
        >
            <div class="flex items-center justify-between mb-6">
                <div class="flex items-baseline-last gap-x-4">
                    <h1
                        class="font-semibold text-purple-400 text-xl flex items-center gap-x-2"
                    >
                        <Bin />
                        Deleted Accounts
                    </h1>
                    <a
                        href="/accounts"
                        class="text-purple-400 hover:text-purple-300 flex items-center gap-x-2"
                    >
                        <CreditCard class="w-4 h-4" />
                        <span>Accounts</span>
                    </a>
                </div>
                <div id="bulkHeaderBar" class="hidden items-center gap-x-4">
                    <div class="text-sm text-gray-300">
                        <span id="selectedCount">0</span> selected (max 10)
                    </div>
                    <div class="flex items-center gap-x-2">
                        <button
                            id="bulkRestoreBtn"
                            class="bg-green-600 hover:bg-green-700 text-white px-3 py-1 rounded text-sm disabled:opacity-40 disabled:cursor-not-allowed"
                            disabled>Restore Selected</button
                        >
                        <button
                            id="bulkPurgeBtn"
                            class="bg-red-600 hover:bg-red-700 text-white px-3 py-1 rounded text-sm disabled:opacity-40 disabled:cursor-not-allowed"
                            disabled>Purge Selected</button
                        >
                        <button
                            id="clearSelectionBtn"
                            class="bg-gray-600 hover:bg-gray-500 text-white px-3 py-1 rounded text-sm"
                            >Clear</button
                        >
                        <button
                            id="selectAllBtn"
                            class="bg-purple-600 hover:bg-purple-500 text-white px-3 py-1 rounded text-sm disabled:opacity-40 disabled:cursor-not-allowed"
                            disabled>Select All</button
                        >
                    </div>
                </div>
            </div>
            {
                deletedAccounts.length === 0 ? (
                    <div class="text-center py-10 text-gray-400">
                        <div class="mb-4 flex justify-center">
                            <Bin class="w-14 h-14" />
                        </div>
                        <p class="text-xl font-semibold text-gray-300 mb-2">
                            No deleted accounts
                        </p>
                        <p>All your accounts are active!</p>
                    </div>
                ) : (
                    <div id="accountsList" class="flex flex-col gap-y-4">
                        {deletedAccounts.map((account: any) => (
                            <div
                                class="account-row bg-gray-700 rounded-lg p-4 border-l-4 border-red-500 group"
                                data-account-id={account.id}
                                data-account-name={account.name}
                            >
                                <div class="flex items-center justify-between">
                                    <div class="flex items-center gap-x-4">
                                        <div class="w-4 h-4 rounded-sm opacity-50 selection-checkbox-wrapper relative">
                                            <input
                                                type="checkbox"
                                                class="hidden selection-checkbox"
                                                value={account.id}
                                                data-name={account.name}
                                            />
                                            <div
                                                class="w-4 h-4 rounded-full color-indicator"
                                                style={`background-color: ${account.color}`}
                                            />
                                        </div>
                                        <div>
                                            <h3 class="font-semibold text-white flex items-baseline gap-x-2">
                                                <span class="account-name">
                                                    {account.name}
                                                </span>
                                                <span class="text-sm text-gray-400">
                                                    {accountTypes.find(
                                                        (t) =>
                                                            t.value ===
                                                            account.accountType,
                                                    )?.label ||
                                                        account.accountType}
                                                </span>
                                                <span class="text-red-400 text-xs">
                                                    (Deleted)
                                                </span>
                                            </h3>

                                            <p class="text-xs text-gray-500 mt-1">
                                                Deleted on:{" "}
                                                {formatDate(
                                                    account.deletedAt,
                                                    {
                                                        includeTime: true,
                                                        dateStyle: "long",
                                                    },
                                                )}
                                            </p>
                                        </div>
                                    </div>
                                    <div class="flex items-center gap-x-4">
                                        <div class="text-right">
                                            <p
                                                class={`font-semibold ${account.balance >= 0 ? "text-green-400" : "text-red-400"} opacity-75`}
                                            >
                                                {formatCurrency(
                                                    account.balance,
                                                )}
                                            </p>
                                            <p class="text-xs text-gray-500">
                                                Last balance
                                            </p>
                                        </div>
                                        <div class="flex items-center gap-x-2 per-item-actions">
                                            <form class="restore-account-form inline">
                                                <input
                                                    type="hidden"
                                                    name="id"
                                                    value={account.id}
                                                />
                                                <button
                                                    type="submit"
                                                    data-account-name={
                                                        account.name
                                                    }
                                                    class="bg-green-600 hover:bg-green-700 text-white px-3 py-1 rounded text-sm transition-colors"
                                                >
                                                    Restore
                                                </button>
                                            </form>
                                            <form class="purge-account-form inline">
                                                <input
                                                    type="hidden"
                                                    name="id"
                                                    value={account.id}
                                                />
                                                <button
                                                    type="submit"
                                                    data-account-name={
                                                        account.name
                                                    }
                                                    class="bg-red-600 hover:bg-red-700 text-white px-3 py-1 rounded text-sm transition-colors"
                                                >
                                                    Purge
                                                </button>
                                            </form>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        ))}
                    </div>
                )
            }
        </div>
        <DeletedInfo
            classes="mx-auto max-w-7xl"
            title="About Deleted Accounts"
            listItems={deletedMsg}
        />
    </main>

    <ConfirmationModal variant="info" />

    <script>
        // Mirror categories multi-select behavior
        const selection = new Set<number>();
        let selectionMode = false;
        const MAX_BULK = 10;

        function updateBulkBar() {
            const bulkHeaderBar = document.getElementById("bulkHeaderBar");
            if (!bulkHeaderBar) return;
            const countEl = document.getElementById("selectedCount");
            if (countEl) countEl.textContent = String(selection.size);
            if (selection.size > 0) {
                bulkHeaderBar.classList.remove("hidden");
                bulkHeaderBar.classList.add("flex");
            } else {
                bulkHeaderBar.classList.add("hidden");
                bulkHeaderBar.classList.remove("flex");
                exitSelectionMode();
            }
            (
                document.getElementById("bulkRestoreBtn") as HTMLButtonElement
            )?.toggleAttribute("disabled", selection.size === 0);
            (
                document.getElementById("bulkPurgeBtn") as HTMLButtonElement
            )?.toggleAttribute("disabled", selection.size === 0);
            const selectAllBtn = document.getElementById(
                "selectAllBtn",
            ) as HTMLButtonElement | null;
            if (selectAllBtn) {
                const total = document.querySelectorAll(".account-row").length;
                const disableSelectAll =
                    selection.size === 0 ||
                    selection.size >= Math.min(total, MAX_BULK);
                selectAllBtn.toggleAttribute("disabled", disableSelectAll);
            }
        }

        function enterSelectionMode() {
            if (selectionMode) return;
            selectionMode = true;
            document.querySelectorAll(".selection-checkbox").forEach((el) => {
                (el as HTMLInputElement).classList.remove("hidden");
            });
            document
                .querySelectorAll(".color-indicator")
                .forEach((el) => el.classList.add("hidden"));
            document
                .querySelectorAll(".per-item-actions")
                .forEach((el) => (el as HTMLElement).classList.add("hidden"));
            document
                .getElementById("accountsList")
                ?.classList.add("select-none");
        }

        function clearSelection() {
            selection.clear();
            document.querySelectorAll(".selection-checkbox").forEach((el) => {
                (el as HTMLInputElement).checked = false;
            });
            try {
                window.getSelection()?.removeAllRanges();
            } catch {}
            updateBulkBar();
        }

        function exitSelectionMode() {
            if (!selectionMode) return;
            selectionMode = false;
            document
                .querySelectorAll(".selection-checkbox")
                .forEach((el) => el.classList.add("hidden"));
            document
                .querySelectorAll(".color-indicator")
                .forEach((el) => el.classList.remove("hidden"));
            document
                .querySelectorAll(".per-item-actions")
                .forEach((el) =>
                    (el as HTMLElement).classList.remove("hidden"),
                );
            document
                .getElementById("accountsList")
                ?.classList.remove("select-none");
            try {
                window.getSelection()?.removeAllRanges();
            } catch {}
        }

        // ESC support
        window.addEventListener("keydown", (e) => {
            if (e.key === "Escape" && selectionMode) {
                clearSelection();
                exitSelectionMode();
            }
        });

        // Shift+click row to toggle
        document.addEventListener("click", (e) => {
            const target = e.target as HTMLElement;
            const row = target.closest(".account-row") as HTMLElement | null;
            if (!row) return;
            const id = parseInt(row.getAttribute("data-account-id") || "0", 10);
            const checkbox = row.querySelector(
                ".selection-checkbox",
            ) as HTMLInputElement | null;
            if (e.shiftKey && id && checkbox) {
                e.preventDefault();
                enterSelectionMode();
                if (selection.has(id)) {
                    selection.delete(id);
                    checkbox.checked = false;
                } else {
                    if (selection.size < MAX_BULK) {
                        selection.add(id);
                        checkbox.checked = true;
                    }
                }
                updateBulkBar();
            }
        });

        // Direct checkbox click support
        document.addEventListener("change", (e) => {
            const target = e.target as HTMLElement;
            if (target.classList.contains("selection-checkbox")) {
                const cb = target as HTMLInputElement;
                const id = parseInt(cb.value || "0", 10);
                if (!id) return;
                if (!selectionMode) enterSelectionMode();
                if (cb.checked) {
                    if (selection.size >= MAX_BULK && !selection.has(id)) {
                        cb.checked = false;
                        return;
                    }
                    selection.add(id);
                } else {
                    selection.delete(id);
                }
                updateBulkBar();
            }
        });

        document
            .getElementById("clearSelectionBtn")
            ?.addEventListener("click", () => {
                clearSelection();
            });
        document
            .getElementById("selectAllBtn")
            ?.addEventListener("click", () => {
                const items = Array.from(
                    document.querySelectorAll(".account-row"),
                ) as HTMLElement[];
                let changed = false;
                for (const el of items) {
                    if (selection.size >= MAX_BULK) break;
                    const id = parseInt(
                        el.getAttribute("data-account-id") || "0",
                        10,
                    );
                    if (id && !selection.has(id)) {
                        selection.add(id);
                        const cb = el.querySelector(
                            ".selection-checkbox",
                        ) as HTMLInputElement | null;
                        if (cb) cb.checked = true;
                        changed = true;
                    }
                }
                if (changed) updateBulkBar();
            });

        // Bulk restore
        document
            .getElementById("bulkRestoreBtn")
            ?.addEventListener("click", async () => {
                if (selection.size === 0) return;
                const names: string[] = [];
                selection.forEach((id) => {
                    const el = document.querySelector(
                        `.account-row[data-account-id="${id}"]`,
                    );
                    if (el) {
                        const n = el.getAttribute("data-account-name");
                        if (n) names.push(n);
                    }
                });
                const confirmationModal = document.getElementById(
                    "confirmationModal",
                ) as any;
                (confirmationModal as any)?.show({
                    title: "Restore Accounts",
                    message: `Restore these accounts?\n\n${names.join("\n")}`,
                    confirmLabel: "Restore",
                    cancelLabel: "Cancel",
                    onConfirm: async () => {
                        const csrfInput = document.querySelector(
                            'input[name="_csrf_token"]',
                        ) as HTMLInputElement;
                        const formData = new FormData();
                        formData.set("ids", Array.from(selection).join(","));
                        if (csrfInput?.value)
                            formData.set("_csrf_token", csrfInput.value);
                        const { ToastService } = await import("@lib/toast.ts");
                        try {
                            const { actions } = await import("astro:actions");
                            const result =
                                await actions.bulkRestoreAccounts(formData);
                            if (result.data?.ok) {
                                ToastService.success(
                                    `Restored ${result.data.restored} accounts.`,
                                );
                                if (result.data.skipped?.length)
                                    ToastService.info(
                                        `${result.data.skipped.length} skipped.`,
                                    );
                                window.location.reload();
                            } else {
                                ToastService.showToast({
                                    message:
                                        result.data?.error ||
                                        "Bulk restore failed",
                                    type: "error",
                                });
                            }
                        } catch (err) {
                            console.error(err);
                        }
                    },
                });
            });

        // Bulk purge
        document
            .getElementById("bulkPurgeBtn")
            ?.addEventListener("click", async () => {
                if (selection.size === 0) return;
                const names: string[] = [];
                selection.forEach((id) => {
                    const el = document.querySelector(
                        `.account-row[data-account-id="${id}"]`,
                    );
                    if (el) {
                        const n = el.getAttribute("data-account-name");
                        if (n) names.push(n);
                    }
                });
                const confirmationModal2 = document.getElementById(
                    "confirmationModal",
                ) as any;
                (confirmationModal2 as any)?.show({
                    title: "Permanently Delete Accounts",
                    message: `Permanently delete these accounts? This cannot be undone.\n\n${names.join("\n")}`,
                    confirmLabel: "Purge",
                    cancelLabel: "Cancel",
                    onConfirm: async () => {
                        const csrfInput = document.querySelector(
                            'input[name="_csrf_token"]',
                        ) as HTMLInputElement;
                        const formData = new FormData();
                        formData.set("ids", Array.from(selection).join(","));
                        if (csrfInput?.value)
                            formData.set("_csrf_token", csrfInput.value);
                        const { ToastService } = await import("@lib/toast.ts");
                        try {
                            const { actions } = await import("astro:actions");
                            const result =
                                await actions.bulkPurgeAccounts(formData);
                            if (result.data?.ok) {
                                ToastService.success(
                                    `Purged ${result.data.purged} accounts.`,
                                );
                                if (result.data.skipped?.length)
                                    ToastService.info(
                                        `${result.data.skipped.length} skipped.`,
                                    );
                                window.location.reload();
                            } else {
                                ToastService.showToast({
                                    message:
                                        result.data?.error ||
                                        "Bulk purge failed",
                                    type: "error",
                                });
                            }
                        } catch (err) {
                            console.error(err);
                        }
                    },
                });
            });

        // Single-item restore/purge forms (unchanged logic)
        document.addEventListener("DOMContentLoaded", () => {
            document
                .querySelectorAll(".restore-account-form")
                .forEach((form) => {
                    form.addEventListener("submit", async (e) => {
                        e.preventDefault();
                        const button = form.querySelector("button");
                        const accountName =
                            button?.getAttribute("data-account-name");
                        const confirmationModal = document.getElementById(
                            "confirmationModal",
                        ) as any;
                        confirmationModal.show({
                            title: "Restore Account",
                            message: `Are you sure you want to restore "${accountName}"?`,
                            confirmLabel: "Restore",
                            cancelLabel: "Cancel",
                            onConfirm: async () => {
                                const csrfInput = document.querySelector(
                                    'input[name="_csrf_token"]',
                                ) as HTMLInputElement;
                                const formData = new FormData(
                                    form as HTMLFormElement,
                                );
                                if (csrfInput?.value)
                                    formData.set(
                                        "_csrf_token",
                                        csrfInput.value,
                                    );
                                const { ToastService } = await import(
                                    "@lib/toast.ts"
                                );
                                try {
                                    const { actions } = await import(
                                        "astro:actions"
                                    );
                                    const result =
                                        await actions.restoreAccount(formData);
                                    if (result.data?.ok) {
                                        ToastService.success(
                                            "Account restored successfully!",
                                        );
                                        window.location.reload();
                                    } else {
                                        ToastService.showToast({
                                            message:
                                                result.data?.error ||
                                                "Failed to restore account",
                                            type: "error",
                                        });
                                    }
                                } catch (err) {
                                    ToastService.showToast({
                                        message: "An error occurred.",
                                        type: "error",
                                    });
                                }
                            },
                        });
                    });
                });
            document.querySelectorAll(".purge-account-form").forEach((form) => {
                form.addEventListener("submit", async (e) => {
                    e.preventDefault();
                    const button = form.querySelector("button");
                    const accountName =
                        button?.getAttribute("data-account-name");
                    const confirmationModal = document.getElementById(
                        "confirmationModal",
                    ) as any;
                    confirmationModal.show({
                        title: "Permanently Delete Account",
                        message: `Are you sure you want to permanently delete "${accountName}"? This action cannot be undone and will also delete all associated transactions and balance history.`,
                        confirmLabel: "Purge",
                        cancelLabel: "Cancel",
                        onConfirm: async () => {
                            const csrfInput = document.querySelector(
                                'input[name="_csrf_token"]',
                            ) as HTMLInputElement;
                            const formData = new FormData(
                                form as HTMLFormElement,
                            );
                            if (csrfInput?.value)
                                formData.set("_csrf_token", csrfInput.value);
                            const { ToastService } = await import(
                                "@lib/toast.ts"
                            );
                            try {
                                const { actions } = await import(
                                    "astro:actions"
                                );
                                const result =
                                    await actions.purgeAccount(formData);
                                if (result.data?.ok) {
                                    ToastService.success(
                                        "Account permanently deleted!",
                                    );
                                    window.location.reload();
                                } else {
                                    ToastService.showToast({
                                        message:
                                            result.data?.error ||
                                            "Failed to permanently delete account",
                                        type: "error",
                                    });
                                }
                            } catch (err) {
                                // Safely extract message from unknown error
                                const msg =
                                    err instanceof Error
                                        ? err.message
                                        : String(err);
                                const errorMessage = `An error occurred. ${msg}`;
                                ToastService.showToast({
                                    message: errorMessage,
                                    type: "error",
                                });
                                console.error(err);
                            }
                        },
                    });
                });
            });
        });
    </script>
</Layout>
