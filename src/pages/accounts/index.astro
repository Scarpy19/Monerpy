---
import Layout from "@layouts/Layout.astro";
import LogoutScript from "@comps/layout/LogoutScript.astro";
import Header from "@comps/layout/Header.astro";
import AccountModal from "@comps/accounts/AccountModal.astro";
import DeleteConfirmModal from "@comps/DeleteConfirmModal.astro";
import CSRFToken from "@comps/CSRFToken.astro";
import { actions } from "astro:actions";
import JoinFamily from "@comps/layout/JoinFamily.astro";
import CreditCard from "@comps/svgs/mono/CreditCard.astro";
import Bin from "@comps/svgs/mono/Bin.astro";
import { formatCurrency } from "@lib/date-utils.ts";
import { accountTypes } from "@arrays.d.ts";
import SelectAccount from "@comps/accounts/SelectAccount.astro";
import PlusButton from "@comps/PlusButton.astro";
import TextButton from "@comps/TextButton.astro";

const user = Astro.locals.user;

if (!user) {
    return Astro.redirect("/login");
}

// Check if user is in a family first
const userResult = await Astro.callAction(actions.getFamilyDetails, {});
const userInFamily = userResult.data?.ok && userResult.data.family;

// Get accounts data only if user is in a family
const accountsResult = userInFamily
    ? await Astro.callAction(actions.getAccountsList, { includeDeleted: false })
    : { data: { ok: false, accounts: [] } };
const accounts = accountsResult.data?.ok ? accountsResult.data.accounts : [];
---

<Layout title="Accounts" description="Manage your accounts">
    <main class="bg-gray-900 p-8 text-white">
        <Header currentPage="accounts" user={user} />

        {
            !userInFamily ? (
                <JoinFamily />
            ) : (
                <div class="bg-gray-800 shadow-lg px-6 py-6 rounded-lg mx-auto max-w-7xl">
                    <div class="flex items-center justify-between mb-6">
                        <div class="flex items-baseline-last gap-4">
                            <h2 class="font-semibold text-purple-400 text-xl flex items-center gap-2">
                                <CreditCard />
                                Your Accounts
                            </h2>
                            <a
                                href="/accounts/deleted"
                                class="text-purple-400 hover:text-purple-300 flex items-center gap-2"
                            >
                                <Bin class="w-4 h-4" />
                                <span>Deleted Accounts</span>
                            </a>
                        </div>
                        <div class="flex items-center gap-x-4">
                            {accounts && accounts.length > 0 && (
                                <SelectAccount accounts={accounts} />
                            )}

                            <PlusButton
                                id="addAccountButton"
                                title="Create a new account"
                            />
                        </div>
                    </div>

                    {accounts && accounts.length === 0 ? (
                        <div class="text-center py-10 text-gray-400">
                            <CreditCard class="w-20 h-20 mx-auto text-purple-400 mb-4" />
                            <h3 class="text-xl font-semibold text-gray-300 mb-2">
                                No Accounts yet
                            </h3>
                            <p class="text-gray-400 mb-6">
                                Create your first account to get started!
                            </p>
                            <TextButton id="addFirstAccountButton">
                                Create Your First Account
                            </TextButton>
                        </div>
                    ) : (
                        <div class="flex flex-col gap-y-4">
                            {accounts &&
                                accounts.map((account) => (
                                    <div class="bg-gray-700 rounded-lg p-4 flex items-center justify-between">
                                        <div class="flex items-center gap-x-4">
                                            <div
                                                class="w-4 h-4 rounded-full"
                                                style={`background-color: ${account.color}`}
                                            />
                                            <div>
                                                <h3 class="font-semibold text-white">
                                                    {account.name}
                                                </h3>
                                                <p class="text-sm text-gray-400">
                                                    {accountTypes.find(
                                                        (t) =>
                                                            t.value ===
                                                            account.accountType,
                                                    )?.label ||
                                                        account.accountType}
                                                </p>
                                            </div>
                                        </div>

                                        <div class="flex items-center gap-x-4">
                                            <div class="text-right">
                                                <p
                                                    class={`font-semibold ${account.balance >= 0 ? "text-green-400" : "text-red-400"}`}
                                                >
                                                    {formatCurrency(
                                                        account.balance,
                                                    )}
                                                </p>
                                            </div>

                                            <div class="flex items-center gap-x-2">
                                                <a
                                                    href={`/accounts/${account.id}`}
                                                    class="bg-blue-600 hover:bg-blue-700 text-white px-3 py-1 rounded text-sm transition-colors"
                                                >
                                                    View
                                                </a>
                                                <button
                                                    type="button"
                                                    class="delete-account-btn bg-red-600 hover:bg-red-700 text-white px-3 py-1 rounded text-sm transition-colors"
                                                    data-account-id={account.id}
                                                    data-account-name={
                                                        account.name
                                                    }
                                                >
                                                    Delete
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                ))}
                        </div>
                    )}
                </div>
            )
        }

        <!-- Account Modal Component -->
        <AccountModal />
        <DeleteConfirmModal title="Delete Account" />

        <CSRFToken id="delAccount" />
    </main>

    <LogoutScript />

    <script>
        import { actions } from "astro:actions";
        import { ToastService } from "@lib/toast.ts";

        document.addEventListener("DOMContentLoaded", () => {
            const addAccountButton = document.getElementById(
                "addAccountButton",
            ) as HTMLButtonElement;

            const createAccountButton = document.getElementById(
                "addFirstAccountButton",
            ) as HTMLButtonElement;

            // Delete functionality
            document.querySelectorAll(".delete-account-btn").forEach((btn) => {
                btn.addEventListener(
                    "click",
                    async function (this: HTMLElement) {
                        const accountId = this.dataset.accountId;
                        const accountName = this.dataset.accountName;
                        if (!accountId) return;

                        const deleteModal = document.getElementById(
                            "deleteConfirmModal",
                        ) as any;
                        if (!deleteModal) {
                            console.error(
                                "Delete confirmation modal not found",
                            );
                            return;
                        }

                        // Show the modal with the account name and deletion logic
                        deleteModal.show(
                            accountName || "this account",
                            async () => {
                                try {
                                    const formData = new FormData();
                                    formData.append("id", accountId);

                                    const csrfInput = document.getElementById(
                                        "delAccount",
                                    ) as HTMLInputElement;
                                    if (csrfInput && csrfInput.value) {
                                        formData.append(
                                            "_csrf_token",
                                            csrfInput.value,
                                        );
                                    }

                                    const result =
                                        await actions.deleteAccount(formData);

                                    if (result.data?.ok) {
                                        ToastService.success(
                                            "Account deleted successfully!",
                                        );
                                        // Reload the page to show updated data
                                        window.location.reload();
                                    } else {
                                        console.error(
                                            "Account deletion failed:",
                                            result.error || result.data?.error,
                                        );
                                        ToastService.showToast({
                                            message:
                                                "Failed to delete account. Please try again.",
                                            type: "error",
                                        });
                                    }
                                } catch (error) {
                                    console.error(
                                        "Error deleting account:",
                                        error,
                                    );
                                    ToastService.showToast({
                                        message:
                                            "Failed to delete account. Please try again.",
                                        type: "error",
                                    });
                                }
                            },
                        );
                    },
                );
            });

            if (createAccountButton) {
                createAccountButton.addEventListener("click", () => {
                    const modal = document.getElementById("accountModal");
                    if (
                        modal &&
                        typeof (modal as any).openModal === "function"
                    ) {
                        try {
                            (modal as any).openModal();
                        } catch (e) {
                            /* ignore */
                        }
                    }
                });
            }

            if (addAccountButton) {
                addAccountButton.addEventListener("click", function () {
                    const modal = document.getElementById("accountModal");
                    if (
                        modal &&
                        typeof (modal as any).openModal === "function"
                    ) {
                        try {
                            (modal as any).openModal();
                        } catch (e) {
                            /* ignore */
                        }
                    }
                });
            }

            // addAccountButton.click();
        });
    </script>
</Layout>
