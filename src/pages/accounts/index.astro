---
import Layout from "@layouts/Layout.astro";
import LogoutScript from "@comps/layout/LogoutScript.astro";
import Header from "@comps/layout/Header.astro";
import AccountModal from "@comps/modal/AccountModal.astro";
import ToastScript from "@comps/toast/ToastScript.astro";
import { actions } from "astro:actions";
import JoinFamily from "@comps/layout/JoinFamily.astro";
import CreditCard from "@comps/svgs/mono/CreditCard.astro";
import Bin from "@comps/svgs/mono/Bin.astro";
import Plus from "@comps/svgs/mono/Plus.astro";
import { formatCurrency } from "@lib/date-utils.ts";
import { accountTypes } from "@arrays.d.ts";

const user = Astro.locals.user;

if (!user) {
    return Astro.redirect("/login");
}

// Handle form submissions
let toastMessage = "";
let toastType = "success";

if (Astro.request.method === "POST") {
    const formData = await Astro.request.formData();
    const action = formData.get("_action") as string;

    if (action === "create") {
        const result = await Astro.callAction(actions.createAccount, formData);
        if (result.data?.ok) {
            toastMessage = "Account created successfully!";
            toastType = "success";
        }
    } else if (action === "delete") {
        const result = await Astro.callAction(actions.deleteAccount, formData);
        if (result.data?.ok) {
            toastMessage = "Account deleted successfully!";
            toastType = "success";
        }
    }
}

// Check if user is in a family first
const userResult = await Astro.callAction(actions.getFamilyDetails, {});
const userInFamily = userResult.data?.ok && userResult.data.family;

// Get accounts data only if user is in a family
const accountsResult = userInFamily
    ? await Astro.callAction(actions.getAccountsList, { includeDeleted: false })
    : { data: { ok: false, accounts: [] } };
const accounts = accountsResult.data?.ok ? accountsResult.data.accounts : [];
---

<Layout title="Accounts" description="Manage your accounts">
    <main class="bg-gray-900 p-8 text-white">
        <Header currentPage="accounts" user={user} />

        {
            !userInFamily ? (
                <JoinFamily />
            ) : (
                <div class="bg-gray-800 shadow-lg px-6 py-6 rounded-lg mx-auto max-w-7xl">
                    <div class="flex items-center justify-between mb-6">
                        <div class="flex items-baseline-last gap-4">
                            <h2 class="font-semibold text-purple-400 text-xl flex items-center gap-2">
                                <CreditCard />
                                Your Accounts
                            </h2>
                            <a
                                href="/accounts/deleted"
                                class="text-purple-400 hover:text-purple-300 flex items-center gap-2"
                            >
                                <Bin class="w-4 h-4" />
                                <span>Deleted Accounts</span>
                            </a>
                        </div>
                        <div class="flex items-center gap-x-4">
                            {accounts && accounts.length !== 0 && (
                                <select class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-purple-500">
                                    <option value="">
                                        Select transaction type
                                    </option>
                                    {accounts.map((account) => (
                                        <option value={account.id}>
                                            {account.name}
                                        </option>
                                    ))}
                                </select>
                            )}
                            <button
                                type="button"
                                id="addAccountButton"
                                class="bg-purple-600 hover:bg-purple-700 text-white font-semibold py-2 px-4 rounded transition-colors"
                                title="Create a new account"
                            >
                                <Plus />
                            </button>
                        </div>
                    </div>

                    {accounts && accounts.length === 0 ? (
                        <div class="text-center py-10 text-gray-400">
                            <CreditCard class="w-20 h-20 mx-auto text-purple-400 mb-4" />
                            <h3 class="text-xl font-semibold text-gray-300 mb-2">
                                No Accounts yet
                            </h3>
                            <p class="text-gray-400 mb-6">
                                Create your first account to get started!
                            </p>
                            <button
                                type="button"
                                id="addFirstAccountButton"
                                class="bg-purple-600 hover:bg-purple-700 text-white font-semibold py-2 px-4 rounded-lg transition-colors"
                            >
                                Create Your First Account
                            </button>
                        </div>
                    ) : (
                        <div class="flex flex-col gap-y-4">
                            {accounts &&
                                accounts.map((account) => (
                                    <div class="bg-gray-700 rounded-lg p-4 flex items-center justify-between">
                                        <div class="flex items-center gap-x-4">
                                            <div
                                                class="w-4 h-4 rounded-full"
                                                style={`background-color: ${account.color}`}
                                            />
                                            <div>
                                                <h3 class="font-semibold text-white">
                                                    {account.name}
                                                </h3>
                                                <p class="text-sm text-gray-400">
                                                    {accountTypes.find(
                                                        (t) =>
                                                            t.value ===
                                                            account.accountType,
                                                    )?.label ||
                                                        account.accountType}
                                                </p>
                                            </div>
                                        </div>

                                        <div class="flex items-center gap-x-4">
                                            <div class="text-right">
                                                <p
                                                    class={`font-semibold ${account.balance >= 0 ? "text-green-400" : "text-red-400"}`}
                                                >
                                                    {formatCurrency(
                                                        account.balance,
                                                    )}
                                                </p>
                                            </div>

                                            <div class="flex items-center gap-x-2">
                                                <a
                                                    href={`/accounts/${account.id}`}
                                                    class="bg-blue-600 hover:bg-blue-700 text-white px-3 py-1 rounded text-sm transition-colors"
                                                >
                                                    View
                                                </a>
                                                <form
                                                    method="POST"
                                                    class="inline"
                                                >
                                                    <input
                                                        type="hidden"
                                                        name="_action"
                                                        value="delete"
                                                    />
                                                    <input
                                                        type="hidden"
                                                        name="id"
                                                        value={account.id}
                                                    />
                                                    <button
                                                        type="submit"
                                                        onclick="return confirm('Are you sure you want to delete this account?')"
                                                        class="bg-red-600 hover:bg-red-700 text-white px-3 py-1 rounded text-sm transition-colors"
                                                    >
                                                        Delete
                                                    </button>
                                                </form>
                                            </div>
                                        </div>
                                    </div>
                                ))}
                        </div>
                    )}
                </div>
            )
        }

        <!-- Account Modal Component -->
        <AccountModal />
    </main>

    <LogoutScript />
    {toastMessage && <ToastScript message={toastMessage} type={toastType} />}
    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const addAccountButton = document.getElementById(
                "addAccountButton",
            ) as HTMLButtonElement;

            const createAccountButton = document.getElementById(
                "addFirstAccountButton",
            ) as HTMLButtonElement;

            if (createAccountButton) {
                createAccountButton.addEventListener("click", () => {
                    if ((window as any).openAccountModal) {
                        (window as any).openAccountModal();
                    }
                });
            }

            if (addAccountButton) {
                addAccountButton.addEventListener("click", function () {
                    (window as any).openAccountModal();
                });
            }

            // addAccountButton.click();
        });
    </script>
</Layout>
