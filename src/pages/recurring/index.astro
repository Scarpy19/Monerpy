---
import Layout from "@layouts/Layout.astro";
import Header from "@comps/layout/Header.astro";
import RecurringTransactionModal from "@comps/recurring/RecurringTransactionModal.astro";
import EditRecurringTransactionModal from "@comps/recurring/EditRecurringTransactionModal.astro";
import DeleteConfirmModal from "@comps/DeleteConfirmModal.astro";
import ConfirmationModal from "@comps/ConfirmationModal.astro";
import { actions } from "astro:actions";
import { formatDate, formatCurrency } from "@lib/date-utils.ts";
import JoinFamily from "@comps/layout/JoinFamily.astro";
import CreateAccount from "@comps/layout/CreateAccount.astro";
import TransactionIcon from "@comps/svgs/mono/TransactionIcon.astro";
import Loop from "@comps/svgs/mono/Loop.astro";
import Bin from "@comps/svgs/mono/Bin.astro";
import { RECURRING_STATUS_COLORS } from "@arrays.d.ts";
import PlusButton from "@comps/PlusButton.astro";

const user = Astro.locals.user;

if (!user) {
    return Astro.redirect("/login");
}

// Check if user is in a family first
const userResult = await Astro.callAction(actions.getFamilyDetails, {});
const userInFamily = userResult.data?.ok && userResult.data.family;

// Get accounts data only if user is in a family
const accountsResult = userInFamily
    ? await Astro.callAction(actions.getAccountsList, { includeDeleted: false })
    : { data: { ok: false, accounts: [] } };
const accounts = accountsResult.data?.ok ? accountsResult.data.accounts : [];

// Get data for the page only if user has accounts
const recurringTransactionsResult =
    userInFamily && accounts && accounts.length > 0
        ? await Astro.callAction(actions.getRecurringTransactions, {
              page: 1,
              limit: 20,
          })
        : { data: { ok: false, recurringTransactions: [], pagination: null } };

const recurringTransactions = recurringTransactionsResult.data?.ok
    ? recurringTransactionsResult.data.recurringTransactions
    : [];
const pagination = recurringTransactionsResult.data?.ok
    ? recurringTransactionsResult.data.pagination
    : null;

// Calculate next execution dates for active recurring transactions
const recurringTransactionsWithNextDates = (recurringTransactions ?? []).map(
    (rt) => {
        if (rt.status !== "active") {
            return { ...rt, nextExecution: null, upcomingDates: [] };
        }

        const now = new Date();
        const startDate = new Date(rt.startDate);
        let nextDate = new Date(Math.max(startDate.getTime(), now.getTime()));

        // Calculate next execution date based on frequency
        const upcomingDates: Date[] = [];
        let tempDate = new Date(nextDate);

        for (let i = 0; i < 5; i++) {
            // Check end conditions
            const endDate = rt.endDate ? new Date(rt.endDate) : null;
            if (endDate && tempDate > endDate) break;
            if (
                rt.maxOccurrences &&
                rt.occurrencesCount + i >= rt.maxOccurrences
            )
                break;

            switch (rt.frequency) {
                case "Daily":
                    tempDate = new Date(tempDate);
                    tempDate.setDate(tempDate.getDate() + (i === 0 ? 0 : 1));
                    break;
                case "Weekly":
                    if (i === 0) {
                        // Find next occurrence of the specified day of week
                        const currentDayOfWeek = tempDate.getDay();
                        const targetDayOfWeek = rt.dayOfWeek || 0;
                        const daysUntilNext =
                            (targetDayOfWeek - currentDayOfWeek + 7) % 7;
                        tempDate.setDate(
                            tempDate.getDate() +
                                (daysUntilNext === 0 ? 7 : daysUntilNext),
                        );
                    } else {
                        tempDate.setDate(tempDate.getDate() + 7);
                    }
                    break;
                case "Monthly":
                    if (i === 0) {
                        tempDate.setDate(rt.dayOfMonth || 1);
                        if (tempDate <= now) {
                            tempDate.setMonth(tempDate.getMonth() + 1);
                        }
                    } else {
                        tempDate.setMonth(tempDate.getMonth() + 1);
                    }
                    break;
                case "Yearly":
                    if (i === 0) {
                        tempDate.setMonth(0); // January
                        tempDate.setDate(rt.dayOfMonth || 1);
                        if (tempDate <= now) {
                            tempDate.setFullYear(tempDate.getFullYear() + 1);
                        }
                    } else {
                        tempDate.setFullYear(tempDate.getFullYear() + 1);
                    }
                    break;
            }

            upcomingDates.push(new Date(tempDate));
        }

        return {
            ...rt,
            nextExecution: upcomingDates[0] || null,
            upcomingDates,
        };
    },
);

// Helper function to get status color
function getStatusColor(status: string): string {
    return RECURRING_STATUS_COLORS[status] || "text-gray-400";
}

// Helper function to get status text
function getStatusText(startDate: string, endDate: string | null): string {
    const now = new Date();
    const start = new Date(startDate);
    const end = endDate ? new Date(endDate) : null;

    if (now < start) {
        return "Upcoming";
    } else if (end && now > end) {
        return "Completed";
    } else {
        return "In Progress";
    }
}
---

<Layout
    title="Recurring Transactions"
    description="Manage your recurring transactions"
>
    <main class="bg-gray-900 p-8 text-white">
        <Header currentPage="recurring" user={user} />

        {
            !userInFamily ? (
                <JoinFamily />
            ) : !accounts || accounts.length === 0 ? (
                <CreateAccount />
            ) : (
                <div class="bg-gray-800 shadow-lg px-6 py-6 rounded-lg mx-auto max-w-7xl">
                    <div class="flex justify-between items-center mb-6">
                        <div class="flex items-baseline-last gap-4">
                            <h2 class="font-semibold text-purple-400 text-xl flex items-center gap-2">
                                <Loop />
                                Recurring
                            </h2>
                            <a
                                href="/transactions"
                                class="text-purple-400 hover:text-purple-300 flex items-center gap-2"
                            >
                                <TransactionIcon class="w-4 h-4" />
                                <span>Transactions</span>
                            </a>
                            <a
                                href="/recurring/deleted"
                                class="text-purple-400 hover:text-purple-300 flex items-center gap-2"
                                title="Deleted recurring rules"
                            >
                                <Bin class="w-4 h-4" />
                                <span>Deleted</span>
                            </a>
                        </div>
                        <div class="flex items-center gap-4">
                            <button
                                type="button"
                                id="generateAllBtn"
                                class="bg-green-600 hover:bg-green-700 px-4 py-1 rounded text-white transition duration-200 text-sm"
                                title="Generate all pending transactions up to today"
                            >
                                Generate All Pending (WIP)
                            </button>

                            <PlusButton
                                id="addRecurringTransactionBtn"
                                title="Add a new Recurring Transaction"
                            />
                        </div>
                    </div>

                    {!recurringTransactions ||
                    recurringTransactions.length === 0 ? (
                        <div class="text-center py-10 text-gray-400">
                            <p class="text-lg mb-2">
                                No recurring transactions found
                            </p>
                            <p class="text-sm">
                                Add your first recurring transaction to automate
                                your finances!
                            </p>
                        </div>
                    ) : (
                        <div class="flex flex-col gap-y-6">
                            {recurringTransactionsWithNextDates.map(
                                (recurringTransaction) => (
                                    <div class="bg-gray-700 rounded-lg p-6 hover:bg-gray-650 transition-all duration-200 hover:shadow-md border border-gray-600 hover:border-gray-500">
                                        <div class="grid grid-cols-1 lg:grid-cols-12 gap-6 items-start">
                                            <div class="lg:col-span-5">
                                                <div class="flex items-start justify-between mb-3">
                                                    <div class="flex-1">
                                                        <h3 class="font-semibold text-white text-lg leading-tight">
                                                            {
                                                                recurringTransaction.description
                                                            }
                                                        </h3>
                                                        <div class="flex items-center gap-2 mt-1">
                                                            <span class="text-sm text-gray-400">
                                                                {
                                                                    recurringTransaction
                                                                        .account
                                                                        .name
                                                                }
                                                            </span>
                                                            <div
                                                                class="w-2 h-2 rounded-full"
                                                                style={`background-color: ${recurringTransaction.account.color}`}
                                                            />
                                                            <span class="text-xs text-gray-500">
                                                                {
                                                                    recurringTransaction.frequency
                                                                }
                                                            </span>
                                                        </div>

                                                        <!-- Inline date summary: start / end / next -->
                                                        <div class="flex items-center gap-3 mt-2 flex-wrap">
                                                            <div class="text-xs text-gray-400">
                                                                <span class="font-medium text-gray-300">Start:</span>
                                                                <span class="ml-1">{formatDate(recurringTransaction.startDate, { includeTime: false })}</span>
                                                            </div>
                                                            {recurringTransaction.endDate && (
                                                                <div class="text-xs text-gray-400">
                                                                    <span class="font-medium text-gray-300">Ends:</span>
                                                                    <span class="ml-1">{formatDate(recurringTransaction.endDate, { includeTime: false })}</span>
                                                                </div>
                                                            )}
                                                            {recurringTransaction.nextExecution && (
                                                                <div class="text-xs text-yellow-400 font-medium">
                                                                    Next: {formatDate(recurringTransaction.nextExecution.toISOString().replace("T", " ").split(".")[0], { includeTime: false })}
                                                                </div>
                                                            )}
                                                        </div>
                                                    </div>
                                                    <div
                                                        class={`text-sm font-medium ${getStatusColor(recurringTransaction.status)}`}
                                                    >
                                                        {getStatusText(
                                                            recurringTransaction.startDate,
                                                            recurringTransaction.endDate,
                                                        )}
                                                    </div>
                                                </div>

                                                <div class="flex items-center gap-2 flex-wrap mb-3">
                                                    {recurringTransaction.category && (
                                                        <span
                                                            class="px-2 py-1 rounded-full text-xs font-medium text-white"
                                                            style={`background-color: ${recurringTransaction.category.color}`}
                                                        >
                                                            {
                                                                recurringTransaction
                                                                    .category
                                                                    .name
                                                            }
                                                        </span>
                                                    )}
                                                    {recurringTransaction.tags.map(
                                                        (tag) => (
                                                            <span
                                                                class="text-xs px-2 py-1 rounded-full text-white border"
                                                                style={`background-color: ${tag.color}; border-color: ${tag.color}`}
                                                            >
                                                                {tag.name}
                                                            </span>
                                                        ),
                                                    )}
                                                </div>

                                                <div
                                                    class={`text-xl font-bold ${
                                                        recurringTransaction.type ===
                                                        "Income"
                                                            ? "text-green-400"
                                                            : "text-red-400"
                                                    }`}
                                                >
                                                    {recurringTransaction.type ===
                                                    "Income"
                                                        ? "+"
                                                        : "-"}
                                                    {formatCurrency(
                                                        recurringTransaction.amount,
                                                    )}
                                                </div>
                                            </div>

                                            <div class="lg:col-span-4">
                                                <div class="text-sm text-gray-300 flex flex-col gap-y-1">
                                                    <div>
                                                        <span class="text-gray-400">
                                                            Started:
                                                        </span>
                                                        {formatDate(
                                                            recurringTransaction.startDate,
                                                            {
                                                                includeTime: false,
                                                            },
                                                        )}
                                                    </div>
                                                    {recurringTransaction.endDate && (
                                                        <div>
                                                            <span class="text-gray-400">
                                                                Ends:
                                                            </span>
                                                            {formatDate(
                                                                recurringTransaction.endDate,
                                                                {
                                                                    includeTime: false,
                                                                },
                                                            )}
                                                        </div>
                                                    )}
                                                    {recurringTransaction.maxOccurrences && (
                                                        <div>
                                                            <span class="text-gray-400">
                                                                Occurrences:
                                                            </span>
                                                            {
                                                                recurringTransaction.occurrencesCount
                                                            }
                                                            {" / "}
                                                            {
                                                                recurringTransaction.maxOccurrences
                                                            }
                                                            {recurringTransaction.remainingOccurrences !==
                                                                null && (
                                                                <span class="text-yellow-400 ml-1">
                                                                    (
                                                                    {
                                                                        recurringTransaction.remainingOccurrences
                                                                    }
                                                                    left)
                                                                </span>
                                                            )}
                                                        </div>
                                                    )}
                                                    <div>
                                                        <span class="text-gray-400">
                                                            Time:
                                                        </span>
                                                        {
                                                            recurringTransaction.timeOfDay
                                                        }
                                                    </div>
                                                </div>

                                                {recurringTransaction.nextExecution && (
                                                    <div class="mt-3 p-2 bg-gray-600 rounded">
                                                        <div class="text-xs text-gray-400">
                                                            Next:
                                                        </div>
                                                        <div class="text-sm text-yellow-400 font-medium">
                                                            {formatDate(
                                                                recurringTransaction.nextExecution
                                                                    .toISOString()
                                                                    .replace(
                                                                        "T",
                                                                        " ",
                                                                    )
                                                                    .split(
                                                                        ".",
                                                                    )[0],
                                                                {
                                                                    includeTime: false,
                                                                },
                                                            )}
                                                        </div>
                                                    </div>
                                                )}

                                                {recurringTransaction.upcomingDates &&
                                                    recurringTransaction
                                                        .upcomingDates.length >
                                                        1 && (
                                                        <div class="mt-2">
                                                            <div class="text-xs text-gray-400 mb-1">
                                                                Upcoming:
                                                            </div>
                                                            <div class="flex flex-wrap gap-1">
                                                                {recurringTransaction.upcomingDates
                                                                    .slice(1, 4)
                                                                    .map(
                                                                        (
                                                                            date,
                                                                        ) => (
                                                                            <span class="text-xs bg-gray-600 px-2 py-1 rounded text-gray-300">
                                                                                {date.toLocaleDateString(
                                                                                    "es-ES",
                                                                                    {
                                                                                        month: "short",
                                                                                        day: "numeric",
                                                                                    },
                                                                                )}
                                                                            </span>
                                                                        ),
                                                                    )}
                                                            </div>
                                                        </div>
                                                    )}
                                            </div>

                                            <div class="lg:col-span-3 flex lg:flex-col flex-row gap-2 lg:items-end">
                                                <button
                                                    type="button"
                                                    class="edit-btn bg-blue-600 hover:bg-blue-700 px-3 py-2 rounded text-white transition duration-200 text-sm"
                                                    data-recurring-transaction={JSON.stringify(
                                                        {
                                                            ...(({
                                                                id,
                                                                accountId,
                                                                description,
                                                                amount,
                                                                type,
                                                                frequency,
                                                                dayOfWeek,
                                                                dayOfMonth,
                                                                month,
                                                                timeOfDay,
                                                                startDate,
                                                                endDate,
                                                                maxOccurrences,
                                                                categoryId,
                                                                tags,
                                                            }) => ({
                                                                id,
                                                                accountId,
                                                                description,
                                                                amount,
                                                                type,
                                                                frequency,
                                                                dayOfWeek,
                                                                dayOfMonth,
                                                                month,
                                                                timeOfDay,
                                                                startDate,
                                                                endDate,
                                                                maxOccurrences,
                                                                categoryId,
                                                                tags: tags?.map(
                                                                    (t) => t.id,
                                                                ),
                                                            }))(
                                                                recurringTransaction,
                                                            ),
                                                        },
                                                    )}
                                                    title="Edit recurring transaction"
                                                >
                                                    Edit
                                                </button>

                                                {recurringTransaction.status ===
                                                    "active" && (
                                                    <button
                                                        type="button"
                                                        class="generate-btn bg-green-600 hover:bg-green-700 px-3 py-2 rounded text-white transition duration-200 text-sm"
                                                        data-id={
                                                            recurringTransaction.id
                                                        }
                                                        title="Generate pending transactions"
                                                    >
                                                        Generate
                                                    </button>
                                                )}

                                                <button
                                                    type="button"
                                                    class="delete-recurring-btn bg-red-600 hover:bg-red-700 px-3 py-2 rounded text-white transition duration-200 text-sm"
                                                    title="Delete recurring transaction"
                                                    data-recurring-id={
                                                        recurringTransaction.id
                                                    }
                                                >
                                                    Delete
                                                </button>
                                            </div>
                                        </div>

                                        {recurringTransaction.logs &&
                                            recurringTransaction.logs.length >
                                                0 && (
                                                <div class="mt-4 pt-4 border-t border-gray-600">
                                                    <div class="text-sm text-gray-400 mb-2">
                                                        Recent Generated
                                                        Transactions:
                                                    </div>
                                                    <div class="flex flex-wrap gap-2">
                                                        {recurringTransaction.logs
                                                            .slice(0, 3)
                                                            .map((log) => (
                                                                <div class="text-xs bg-gray-600 px-2 py-1 rounded">
                                                                    {formatDate(
                                                                        log.executionTime,
                                                                        {
                                                                            includeTime: false,
                                                                        },
                                                                    )}
                                                                    {log.generatedTransaction && (
                                                                        <span class="text-green-400 ml-1">
                                                                            ✓
                                                                            {formatCurrency(
                                                                                log
                                                                                    .generatedTransaction
                                                                                    .amount,
                                                                            )}
                                                                        </span>
                                                                    )}
                                                                </div>
                                                            ))}
                                                        {recurringTransaction
                                                            .logs.length >
                                                            3 && (
                                                            <div class="text-xs text-gray-400 px-2 py-1">
                                                                +
                                                                {recurringTransaction
                                                                    .logs
                                                                    .length - 3}
                                                                more
                                                            </div>
                                                        )}
                                                    </div>
                                                </div>
                                            )}
                                    </div>
                                ),
                            )}
                        </div>
                    )}

                    {pagination && pagination.totalPages > 1 && (
                        <div class="flex justify-center mt-6 gap-2">
                            {Array.from(
                                { length: pagination.totalPages },
                                (_, i) => (
                                    <a
                                        href={`/recurring?page=${i + 1}`}
                                        class={`px-3 py-2 rounded ${
                                            pagination.page === i + 1
                                                ? "bg-purple-600 text-white"
                                                : "bg-gray-700 text-gray-300 hover:bg-gray-600"
                                        }`}
                                    >
                                        {i + 1}
                                    </a>
                                ),
                            )}
                        </div>
                    )}
                </div>
            )
        }
    </main>

    <RecurringTransactionModal id="recurringTransactionModal" />
    <EditRecurringTransactionModal id="editRecurringTransactionModal" />
    <DeleteConfirmModal title="Delete Recurring Transaction" />
    <ConfirmationModal variant="info" />

    <script>
        import { actions } from "astro:actions";
        import { ToastService } from "@lib/toast.ts";

        // Add Recurring Transaction button functionality (use modal instance)
        const addRecurringTransactionBtn = document.getElementById(
            "addRecurringTransactionBtn",
        ) as HTMLButtonElement;
        const recurringModal = document.getElementById(
            "recurringTransactionModal",
        ) as any;
        const editRecurringModal = document.getElementById(
            "editRecurringTransactionModal",
        ) as any;
        if (addRecurringTransactionBtn) {
            addRecurringTransactionBtn.addEventListener("click", function () {
                if (
                    recurringModal &&
                    typeof recurringModal.openModal === "function"
                ) {
                    recurringModal.openModal();
                }
            });
        }

        // Edit functionality using modal instance
        document.querySelectorAll(".edit-btn").forEach((btn) => {
            btn.addEventListener("click", function (this: HTMLElement) {
                const recurringTransactionData =
                    this.dataset.recurringTransaction;
                if (!recurringTransactionData) return;

                const recurringTransaction = JSON.parse(
                    recurringTransactionData,
                );
                // prefer the dedicated edit modal instance for editing
                if (
                    editRecurringModal &&
                    typeof editRecurringModal.openModal === "function"
                ) {
                    editRecurringModal.openModal(recurringTransaction);
                } else if (
                    recurringModal &&
                    typeof recurringModal.fillFormForEdit === "function"
                ) {
                    recurringModal.fillFormForEdit(recurringTransaction);
                }
            });
        });

        // Delete functionality
        document.querySelectorAll(".delete-recurring-btn").forEach((btn) => {
            btn.addEventListener("click", async function (this: HTMLElement) {
                const recurringId = this.dataset.recurringId;
                const recurringDescription = this.dataset.recurringDescription;
                if (!recurringId) return;

                const deleteModal = document.getElementById(
                    "deleteConfirmModal",
                ) as any;
                if (!deleteModal) {
                    console.error("Delete confirmation modal not found");
                    return;
                }

                // Show the modal with the recurring transaction description and deletion logic
                deleteModal.show(
                    recurringDescription || "this recurring transaction",
                    async () => {
                        try {
                            const formData = new FormData();
                            formData.append("id", recurringId);

                            const csrfInput = document.querySelector(
                                'input[name="_csrf_token"]',
                            ) as HTMLInputElement;
                            if (csrfInput && csrfInput.value) {
                                formData.append("_csrf_token", csrfInput.value);
                            }

                            const result =
                                await actions.deleteRecurringTransaction(
                                    formData,
                                );

                            if (result.data?.ok) {
                                ToastService.success(
                                    "Recurring transaction deleted successfully!",
                                );
                                // Reload the page to show updated data
                                window.location.reload();
                            } else {
                                console.error(
                                    "Recurring transaction deletion failed:",
                                    result,
                                    result?.data,
                                    result?.error,
                                );
                                ToastService.showToast({
                                    type: "error",
                                    message:
                                        "Failed to delete recurring transaction. Please try again.",
                                });
                            }
                        } catch (error) {
                            console.error(
                                "Error deleting recurring transaction:",
                                error,
                                (error as any)?.stack ?? null,
                            );
                            ToastService.showToast({
                                type: "error",
                                message:
                                    "Failed to delete recurring transaction. Please try again.",
                            });
                        }
                    },
                );
            });
        });

        // Generate functionality
        document.querySelectorAll(".generate-btn").forEach((btn) => {
            btn.addEventListener("click", async function (this: HTMLElement) {
                const id = this.dataset.id;
                if (!id) return;

                const confirmationModal = document.getElementById(
                    "confirmationModal",
                ) as any;
                if (!confirmationModal) {
                    console.error("Confirmation modal not found");
                    return;
                }

                // Show the modal with generation confirmation
                confirmationModal.show({
                    title: "Generate Transactions",
                    message:
                        "Generate pending transactions for this recurring rule up to today?",
                    confirmLabel: "Generate",
                    cancelLabel: "Cancel",
                    onConfirm: async () => {
                        try {
                            const formData = new FormData();
                            formData.append("recurringTransactionIds", id);
                            formData.append("generateUpTo", "today");

                            const result =
                                await actions.generateRecurringTransactions(
                                    formData,
                                );

                            if (result.data?.ok) {
                                const generated = result.data.generated || 0;
                                ToastService.success(
                                    `Generated ${generated} transaction${generated !== 1 ? "s" : ""} successfully!`,
                                );
                                // Reload the page to show updated data
                                window.location.reload();
                            } else {
                                console.error(
                                    "Recurring transaction generation failed:",
                                    result,
                                    result?.data,
                                    result?.error,
                                );
                                ToastService.showToast({
                                    type: "error",
                                    message:
                                        "Failed to generate transactions. Please try again.",
                                });
                            }
                        } catch (error) {
                            console.error(
                                "Error generating recurring transactions:",
                                error,
                                (error as any)?.stack ?? null,
                            );
                            ToastService.showToast({
                                type: "error",
                                message:
                                    "Failed to generate transactions. Please try again.",
                            });
                        }
                    },
                });
            });
        });

        // Generate All functionality
        const generateAllBtn = document.getElementById("generateAllBtn");
        if (generateAllBtn) {
            generateAllBtn.addEventListener("click", async function () {
                const activeIds = Array.from(
                    document.querySelectorAll(".generate-btn"),
                )
                    .map((btn) => (btn as HTMLElement).dataset.id)
                    .filter((id) => id);

                const confirmationModal = document.getElementById(
                    "confirmationModal",
                ) as any;
                if (!confirmationModal) {
                    console.error("Confirmation modal not found");
                    return;
                }

                if (activeIds.length === 0) {
                    // Show info modal for no active transactions
                    confirmationModal.show({
                        title: "No Active Transactions",
                        message: "No active recurring transactions found.",
                        confirmLabel: "OK",
                        cancelLabel: "",
                        onConfirm: () => {
                            // Just close the modal
                        },
                    });
                    return;
                }

                // Show confirmation modal for generating all
                confirmationModal.show({
                    title: "Generate All Transactions",
                    message: `Generate all pending transactions for ${activeIds.length} recurring rule${activeIds.length !== 1 ? "s" : ""} up to today?`,
                    confirmLabel: "Generate All",
                    cancelLabel: "Cancel",
                    onConfirm: async () => {
                        try {
                            const formData = new FormData();
                            formData.append(
                                "recurringTransactionIds",
                                activeIds.join(","),
                            );
                            formData.append("generateUpTo", "today");

                            const result =
                                await actions.generateRecurringTransactions(
                                    formData,
                                );

                            if (result.data?.ok) {
                                const generated = result.data.generated || 0;
                                ToastService.success(
                                    `Generated ${generated} transaction${generated !== 1 ? "s" : ""} successfully!`,
                                );
                                // Reload the page to show updated data
                                window.location.reload();
                            } else {
                                console.error(
                                    "Recurring transaction generation failed:",
                                    result.error || result.data?.error,
                                );
                                ToastService.showToast({
                                    type: "error",
                                    message:
                                        "Failed to generate transactions. Please try again.",
                                });
                            }
                        } catch (error) {
                            console.error(
                                "Error generating recurring transactions:",
                                error,
                            );
                            ToastService.showToast({
                                type: "error",
                                message:
                                    "Failed to generate transactions. Please try again.",
                            });
                        }
                    },
                });
            });
        }

        // addRecurringTransactionBtn.click();
    </script>
</Layout>
