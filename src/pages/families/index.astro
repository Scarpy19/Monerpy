---
import Layout from "@layouts/Layout.astro";
import Header from "@comps/layout/Header.astro";
import ConfirmationModal from "@comps/ConfirmationModal.astro";
import { actions } from "astro:actions";
import { formatDate, formatCurrency } from "@lib/date-utils.ts";
import Users from "@comps/svgs/mono/Users.astro";

const user = Astro.locals.user;

if (!user) {
  return Astro.redirect("/login");
}

// Get data for the page
const [familiesResult, familyDetailsResult] = await Promise.all([
  Astro.callAction(actions.getFamilies, {}),
  Astro.callAction(actions.getFamilyDetails, {}),
]);

const families = familiesResult.data?.ok ? familiesResult.data.families : [];
const familyDetails = familyDetailsResult.data?.ok
  ? familyDetailsResult.data.family
  : null;
const userRole = familyDetailsResult.data?.ok
  ? familyDetailsResult.data.userRole
  : null;
---

<Layout title="Family Management" description="Manage your family and members">
  <main class="bg-gray-900 p-8 text-white">
    <Header currentPage="families" user={user} />

    {
      !familyDetails ? (
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 mx-auto max-w-7xl">
          <div class="bg-gray-800 shadow-lg px-6 py-6 rounded-lg">
            <h2 class="mb-6 font-semibold text-purple-400 text-xl">
              Create New Family
            </h2>

            <form id="createFamilyForm" class="flex flex-col gap-y-4">
              <div>
                <label
                  for="familyName"
                  class="block text-sm font-medium text-gray-300 mb-2"
                >
                  Family Name *
                </label>
                <input
                  type="text"
                  id="familyName"
                  name="name"
                  required
                  placeholder="Enter family name"
                  class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-purple-500"
                />
              </div>

              <button
                type="submit"
                class="w-full bg-purple-600 hover:bg-purple-700 px-4 py-2 rounded text-white transition duration-200"
              >
                Create Family
              </button>
            </form>
          </div>

          <div class="bg-gray-800 shadow-lg px-6 py-6 rounded-lg">
            <h2 class="mb-6 font-semibold text-purple-400 text-xl">
              Join Existing Family
            </h2>

            <form id="joinFamilyForm" class="flex flex-col gap-y-4">
              <div>
                <label
                  for="familySelect"
                  class="block text-sm font-medium text-gray-300 mb-2"
                >
                  Select Family *
                </label>
                <select
                  id="familySelect"
                  name="familyId"
                  required
                  class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-purple-500"
                >
                  <option value="">Choose a family to join</option>
                  {families &&
                    families.map((family) => (
                      <option value={family.id}>
                        {family.name} ({family._count.users} members)
                      </option>
                    ))}
                </select>
              </div>

              <button
                type="submit"
                class="w-full bg-green-600 hover:bg-green-700 px-4 py-2 rounded text-white transition duration-200"
              >
                Join Family
              </button>
            </form>

            <div class="mt-4 p-3 bg-gray-700 rounded-lg">
              <p class="text-sm text-gray-300">
                <strong>Note:</strong> You can only belong to one family at a
                time. Joining a family will give you access to shared accounts,
                categories, and transactions.
              </p>
            </div>
          </div>
        </div>
      ) : (
        <div class="flex flex-col gap-y-8 mx-auto max-w-7xl">
          <div class="bg-gray-800 shadow-lg px-6 py-6 rounded-lg">
            <div class="flex justify-between items-center mb-6">
              <h2 class="font-semibold text-purple-400 text-xl flex items-center gap-2">
                <Users /> Family: {familyDetails.name}
              </h2>
              <div class="flex gap-3">
                <span
                  class={`px-3 py-1 rounded text-sm ${
                    userRole === "Admin" ? "bg-purple-600" : "bg-blue-600"
                  }`}
                >
                  {userRole}
                </span>
                <form
                  id="leaveFamilyForm"
                  data-user-role={userRole}
                  data-member-count={familyDetails.users.length}
                >
                  <button
                    type="submit"
                    class="bg-orange-600 hover:bg-orange-700 px-3 py-1 rounded text-sm text-white transition duration-200"
                  >
                    Leave Family
                  </button>
                </form>
              </div>
            </div>

            <section aria-labelledby="family-stats">
              <h3 id="family-stats" class="sr-only">
                Family statistics
              </h3>

              <dl class="grid grid-cols-1 md:grid-cols-4 gap-6 text-center">
                <div>
                  <dt class="text-gray-300 text-lg">Members</dt>
                  <dd class="text-2xl font-bold text-purple-400">
                    {familyDetails.users.length}
                  </dd>
                </div>

                <div>
                  <dt class="text-gray-300 text-lg">Accounts</dt>
                  <dd class="text-2xl font-bold text-green-400">
                    {familyDetails._count.accounts}
                  </dd>
                </div>

                <div>
                  <dt class="text-gray-300 text-lg">Categories</dt>
                  <dd class="text-2xl font-bold text-blue-400">
                    {familyDetails._count.categories}
                  </dd>
                </div>

                <div>
                  <dt class="text-gray-300 text-lg">Tags</dt>
                  <dd class="text-2xl font-bold text-blue-400">
                    {familyDetails._count.tags}
                  </dd>
                </div>
              </dl>
            </section>
          </div>

          <div class="bg-gray-800 shadow-lg px-6 py-6 rounded-lg">
            <h3 class="font-semibold text-purple-400 text-xl mb-6">
              Family Members
            </h3>

            <div class="flex flex-col gap-y-3">
              {familyDetails.users.map((member) => (
                <div class="bg-gray-700 rounded-lg p-4 flex items-center justify-between">
                  <div class="flex items-center gap-4">
                    <div class="w-10 h-10 bg-purple-600 rounded-full flex items-center justify-center">
                      <span class="text-white font-semibold">
                        {member.username.charAt(0).toUpperCase()}
                      </span>
                    </div>

                    <div>
                      <h4 class="font-medium text-white">{member.username}</h4>
                      <p class="text-sm text-gray-300">{member.email}</p>
                      <p class="text-xs text-gray-400">
                        Joined
                        {formatDate(member.createdAt, {
                          includeTime: false,
                        })}
                      </p>
                    </div>
                  </div>

                  <div class="flex items-center gap-3">
                    <span
                      class={`px-3 py-1 rounded text-sm ${
                        member.role === "Admin"
                          ? "bg-purple-600"
                          : "bg-blue-600"
                      }`}
                    >
                      {member.role}
                    </span>

                    {userRole === "Admin" && member.id !== user.id && (
                      <div class="flex gap-2">
                        <form class="updateRoleForm inline">
                          <input
                            type="hidden"
                            name="userId"
                            value={member.id}
                          />
                          <input
                            type="hidden"
                            name="role"
                            value={member.role === "Admin" ? "Member" : "Admin"}
                          />
                          <button
                            type="submit"
                            class="bg-blue-600 hover:bg-blue-700 px-3 py-1 rounded text-sm text-white transition duration-200"
                          >
                            {member.role === "Admin" ? "Demote" : "Promote"}
                          </button>
                        </form>

                        <form class="removeUserForm inline">
                          <input
                            type="hidden"
                            name="userId"
                            value={member.id}
                          />
                          <button
                            type="submit"
                            class="bg-red-600 hover:bg-red-700 px-3 py-1 rounded text-sm text-white transition duration-200"
                          >
                            Remove
                          </button>
                        </form>
                      </div>
                    )}
                  </div>
                </div>
              ))}
            </div>
          </div>

          {familyDetails.accounts.length > 0 && (
            <div class="bg-gray-800 shadow-lg px-6 py-6 rounded-lg">
              <h3 class="font-semibold text-purple-400 text-xl mb-6">
                Family Accounts
              </h3>

              {/* Replace non-semantic divs with semantic list/article structure */}
              <ul class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 list-none p-0 m-0">
                {familyDetails.accounts.map((account) => (
                  <li>
                    <article class="bg-gray-700 rounded-lg p-4">
                      <header class="flex items-center justify-between">
                        <div class="flex items-center gap-3">
                          <span
                            class="w-4 h-4 rounded-full inline-block"
                            style={`background-color: ${account.color}`}
                            aria-hidden="true"
                          />
                          <div>
                            <h4 class="font-medium text-white">
                              {account.name}
                            </h4>
                            <p class="text-sm text-gray-300">
                              {account.accountType}
                            </p>
                          </div>
                        </div>

                        <footer class="text-right">
                          <p
                            class={`text-lg font-semibold ${
                              account.balance >= 0
                                ? "text-green-400"
                                : "text-red-400"
                            }`}
                          >
                            {formatCurrency(account.balance)}
                          </p>
                        </footer>
                      </header>
                    </article>
                  </li>
                ))}
              </ul>
            </div>
          )}
        </div>
      )
    }
  </main>

  <!-- Confirmation Modal -->
  <ConfirmationModal variant="danger" />

  <script>
    import { actions } from "astro:actions";
    import { ToastService } from "@lib/toast.ts";

    // Create Family Form
    const createFamilyForm = document.getElementById(
      "createFamilyForm",
    ) as HTMLFormElement;
    createFamilyForm?.addEventListener("submit", async (e) => {
      e.preventDefault();

      try {
        const formData = new FormData(createFamilyForm);
        const csrfInput = document.querySelector(
          'input[name="_csrf_token"]',
        ) as HTMLInputElement;

        if (csrfInput && csrfInput.value) {
          formData.set("_csrf_token", csrfInput.value);
        }
        const { data } = await actions.createFamily(formData);

        if (data?.ok) {
          ToastService.success("Family created successfully!");
          window.location.reload();
        } else {
          console.error("Error creating family:", data?.error);
          ToastService.showToast({
            message: data?.error || "Failed to create family",
            type: "error",
          });
        }
      } catch (error) {
        const msg = error instanceof Error ? error.message : String(error);
        const errorMessage = `An error occurred. ${msg}`;
        ToastService.showToast({
          message: errorMessage,
          type: "error",
        });
        console.error(error);
      }
    });

    // Join Family Form
    const joinFamilyForm = document.getElementById(
      "joinFamilyForm",
    ) as HTMLFormElement;
    joinFamilyForm?.addEventListener("submit", async (e) => {
      e.preventDefault();

      try {
        const formData = new FormData(joinFamilyForm);
        const csrfInput = document.querySelector(
          'input[name="_csrf_token"]',
        ) as HTMLInputElement;

        if (csrfInput && csrfInput.value) {
          formData.set("_csrf_token", csrfInput.value);
        }
        const { data } = await actions.joinFamily(formData);

        if (data?.ok) {
          ToastService.success("Successfully joined the family!");
          window.location.reload();
        } else {
          console.error("Error joining family:", data?.error);
          ToastService.error(data?.error || "Failed to join family");
        }
      } catch (error) {
        console.error("Error joining family:", error);
        const errorMessage =
          error instanceof Error ? error.message : "Failed to join family";
        ToastService.error(errorMessage);
      }
    });

    // Leave Family Form
    const leaveFamilyForm = document.getElementById(
      "leaveFamilyForm",
    ) as HTMLFormElement;
    const confirmationModal = document.getElementById(
      "confirmationModal",
    ) as any;

    leaveFamilyForm?.addEventListener("submit", async (e) => {
      e.preventDefault();

      // Check if user is admin and the only member (for delete option)
      const userRole = leaveFamilyForm.dataset.userRole;
      const memberCount = parseInt(leaveFamilyForm.dataset.memberCount || "0");
      const isAdmin = userRole === "Admin";
      const canDelete = isAdmin && memberCount === 1;

      console.log(
        "Debug - userRole:",
        userRole,
        "memberCount:",
        memberCount,
        "isAdmin:",
        isAdmin,
        "canDelete:",
        canDelete,
      );

      if (canDelete) {
        confirmationModal?.show({
          title: "Leave Family",
          message:
            "You are the only member of this family. Choose how you want to proceed:",
          confirmLabel: "Leave Family",
          cancelLabel: "Cancel",
          showSecondaryAction: true,
          secondaryLabel: "Leave & Delete Family",
          onConfirm: async () => {
            try {
              const formData = new FormData(leaveFamilyForm);
              const csrfInput = document.querySelector(
                'input[name="_csrf_token"]',
              ) as HTMLInputElement;

              if (csrfInput && csrfInput.value) {
                formData.set("_csrf_token", csrfInput.value);
              }
              const { data } = await actions.leaveFamily(formData);

              if (data?.ok) {
                ToastService.success("Successfully left the family!");
                window.location.reload();
              } else {
                console.error("Error leaving family:", data?.error);
                ToastService.error(data?.error || "Failed to leave family");
              }
            } catch (error) {
              console.error("Error leaving family:", error);
              const errorMessage =
                error instanceof Error
                  ? error.message
                  : "Failed to leave family";
              ToastService.error(errorMessage);
            }
          },
          onSecondary: async () => {
            try {
              const formData = new FormData(leaveFamilyForm);
              const csrfInput = document.querySelector(
                'input[name="_csrf_token"]',
              ) as HTMLInputElement;

              if (csrfInput && csrfInput.value) {
                formData.set("_csrf_token", csrfInput.value);
              }
              const { data } = await actions.leaveAndDeleteFamily(formData);

              if (data?.ok) {
                ToastService.success("Family deleted successfully!");
                window.location.reload();
              } else {
                console.error("Error deleting family:", data?.error);
                ToastService.error(data?.error || "Failed to delete family");
              }
            } catch (error) {
              console.error("Error deleting family:", error);
              const errorMessage =
                error instanceof Error
                  ? error.message
                  : "Failed to delete family";
              ToastService.error(errorMessage);
            }
          },
        });
      } else {
        confirmationModal?.show({
          title: "Leave Family",
          message:
            "Are you sure you want to leave this family? You will lose access to all shared accounts, categories, and transactions.",
          confirmLabel: "Leave Family",
          cancelLabel: "Cancel",
          onConfirm: async () => {
            try {
              const formData = new FormData(leaveFamilyForm);
              const csrfInput = document.querySelector(
                'input[name="_csrf_token"]',
              ) as HTMLInputElement;

              if (csrfInput && csrfInput.value) {
                formData.set("_csrf_token", csrfInput.value);
              }
              const { data } = await actions.leaveFamily(formData);

              if (data?.ok) {
                ToastService.success("Successfully left the family!");
                window.location.reload();
              } else {
                console.error("Error leaving family:", data?.error);
                ToastService.error(data?.error || "Failed to leave family");
              }
            } catch (error) {
              console.error("Error leaving family:", error);
              const errorMessage =
                error instanceof Error
                  ? error.message
                  : "Failed to leave family";
              ToastService.showToast({
                message: errorMessage,
                type: "error",
              });
            }
          },
        });
      }
    });

    // Update Role Forms
    const updateRoleForms = document.querySelectorAll(
      ".updateRoleForm",
    ) as NodeListOf<HTMLFormElement>;
    updateRoleForms.forEach((form) => {
      form.addEventListener("submit", async (e) => {
        e.preventDefault();

        try {
          const formData = new FormData(form);
          const csrfInput = document.querySelector(
            'input[name="_csrf_token"]',
          ) as HTMLInputElement;

          if (csrfInput && csrfInput.value) {
            formData.set("_csrf_token", csrfInput.value);
          }
          const { data } = await actions.updateUserRole(formData);

          if (data?.ok) {
            ToastService.success("User role updated successfully!");
            window.location.reload();
          } else {
            console.error("Error updating user role:", data?.error);
            ToastService.error(data?.error || "Failed to update user role");
          }
        } catch (error) {
          console.error("Error updating user role:", error);
          const errorMessage =
            error instanceof Error
              ? error.message
              : "Failed to update user role";
          ToastService.error(errorMessage);
        }
      });
    });

    // Remove User Forms
    const removeUserForms = document.querySelectorAll(
      ".removeUserForm",
    ) as NodeListOf<HTMLFormElement>;
    removeUserForms.forEach((form) => {
      form.addEventListener("submit", async (e) => {
        e.preventDefault();

        // Find the username for the confirmation message
        const userRow = form.closest(".bg-gray-700");
        const usernameElement = userRow?.querySelector("h4");
        const username = usernameElement?.textContent || "this user";

        confirmationModal?.show({
          title: "Remove User",
          message: `Are you sure you want to remove "${username}" from the family? They will lose access to all shared accounts, categories, and transactions.`,
          confirmLabel: "Remove User",
          cancelLabel: "Cancel",
          onConfirm: async () => {
            try {
              const formData = new FormData(form);
              const csrfInput = document.querySelector(
                'input[name="_csrf_token"]',
              ) as HTMLInputElement;

              if (csrfInput && csrfInput.value) {
                formData.set("_csrf_token", csrfInput.value);
              }
              const { data } = await actions.removeUserFromFamily(formData);

              if (data?.ok) {
                ToastService.success("User removed from family successfully!");
                window.location.reload();
              } else {
                throw new Error(
                  data?.error || "Failed to remove user from family",
                );
              }
            } catch (error) {
              console.error("Error removing user from family:", error);
              const errorMessage =
                error instanceof Error
                  ? error.message
                  : "Failed to remove user from family";
              ToastService.error(errorMessage);
            }
          },
        });
      });
    });
  </script>
</Layout>
