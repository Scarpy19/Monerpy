---
import Layout from "@layouts/Layout.astro";

import LogoutScript from "@comps/layout/LogoutScript.astro";
import Header from "@comps/layout/Header.astro";
import CategoryModal from "@comps/categories/CategoryModal.astro";
import CategoryItem from "@comps/categories/CategoryItem.astro";
import DeleteConfirmModal from "@comps/categories/DeleteConfirmModal.astro";
import ToastScript from "@comps/toast/ToastScript.astro";
import { actions } from "astro:actions";
import JoinFamily from "@comps/layout/JoinFamily.astro";
import Plus from "@svg/mono/Plus.astro";
import Folder from "@comps/svgs/mono/Folder.astro";

const user = Astro.locals.user;

if (!user) {
    return Astro.redirect("/login");
}

// Handle form submissions
let toastMessage = "";
let toastType = "success";

if (Astro.request.method === "POST") {
    const formData = await Astro.request.formData();
    const action = formData.get("_action") as string;

    if (action === "create") {
        const result = await Astro.callAction(actions.createCategory, formData);

        if (result.data?.ok) {
            toastMessage = "Category created successfully!";
            toastType = "success";
        } else if (result.error?.type === "AstroActionInputError") {
            const errorstring = result.error?.message.replace(
                /^Failed to validate:\s*/,
                "",
            );
            const error = JSON.parse(errorstring);
            toastMessage = `Expected ${error[0].expected}, received ${error[0].received} on field "${error[0].path[0]}"`;
            toastType = "error";
        } else {
            console.log(result);
            toastMessage = result.data?.error || "Failed to create category";
            toastType = "error";
        }
    } else if (action === "update") {
        const result = await Astro.callAction(actions.updateCategory, formData);
        if (result.data?.ok) {
            toastMessage = "Category updated successfully!";
            toastType = "success";
        } else {
            toastMessage = result.data?.error || "Failed to update category";
            toastType = "error";
        }
    } else if (action === "delete") {
        const result = await Astro.callAction(actions.deleteCategory, formData);
        if (result.data?.ok) {
            toastMessage = "Category deleted successfully!";
            toastType = "success";
        } else {
            toastMessage = result.data?.error || "Failed to delete category";
            toastType = "error";
        }
    } else if (action === "restore") {
        const result = await Astro.callAction(
            actions.restoreCategory,
            formData,
        );
        if (result.data?.ok) {
            toastMessage = "Category restored successfully!";
            toastType = "success";
        } else {
            toastMessage = result.data?.error || "Failed to restore category";
            toastType = "error";
        }
    }
}

// Check if user is in a family first
const userResult = await Astro.callAction(actions.getFamilyDetails, {});
const userInFamily = userResult.data?.ok && userResult.data.family;

// Get categories data only if user is in a family
const categoriesResult = userInFamily
    ? await Astro.callAction(actions.getCategoriesList, {
          includeDeleted: false,
      })
    : { data: { ok: false, categories: [] } };
const categories = categoriesResult.data?.ok
    ? categoriesResult.data.categories
    : [];

// Organize categories into parent-child hierarchy
const parentCategories = categories?.filter((cat) => !cat.parentId) || [];
const childCategories = categories?.filter((cat) => cat.parentId) || [];
---

<Layout title="Categories" description="Manage your transaction categories">
    <main class="bg-gray-900 p-8 text-white">
        <Header currentPage="categories" user={user} />

        {
            !userInFamily ? (
                <JoinFamily />
            ) : (
                <div class="bg-gray-800 shadow-lg px-6 py-6 rounded-lg mx-auto max-w-7xl">
                    <div class="flex items-center justify-between mb-6">
                        <h2 class="font-semibold text-purple-400 text-xl flex items-center gap-x-2">
                            <Folder />
                            Categories
                        </h2>

                        <button
                            id="addCategoryButton"
                            type="button"
                            class="add-category-btn bg-purple-600 hover:bg-purple-700 text-white font-semibold py-2 px-4 rounded transition-colors"
                        >
                            <Plus />
                        </button>
                    </div>

                    {(categories?.length || 0) === 0 ? (
                        <div class="text-center py-12">
                            <div class="text-6xl mb-4">ðŸ“‚</div>
                            <h3 class="text-xl font-semibold text-gray-300 mb-2">
                                No Categories Yet
                            </h3>
                            <p class="text-gray-400 mb-6">
                                Create categories to organize your transactions
                                better.
                            </p>
                            <button
                                type="button"
                                id="addFirstCategoryButton"
                                class="create-first-category-btn bg-purple-600 hover:bg-purple-700 text-white font-semibold py-2 px-4 rounded-lg transition-colors"
                            >
                                Create Your First Category
                            </button>
                        </div>
                    ) : (
                        <div id="categoryList" class="flex flex-col gap-y-4">
                            {parentCategories.map((category) => {
                                const children = childCategories.filter(
                                    (child) => child.parentId === category.id,
                                );
                                return (
                                    <div class="bg-gray-700 rounded-lg overflow-hidden">
                                        <CategoryItem
                                            category={category}
                                            allCategories={categories}
                                        />

                                        {children.length > 0 && (
                                            <div class="bg-gray-600 border-t border-gray-500">
                                                {children.map((child) => (
                                                    <CategoryItem
                                                        category={child}
                                                        isChild={true}
                                                        allCategories={
                                                            categories
                                                        }
                                                    />
                                                ))}
                                            </div>
                                        )}
                                    </div>
                                );
                            })}

                            {/* Categories without parent (but not already shown) */}
                            {childCategories
                                .filter(
                                    (cat) =>
                                        !parentCategories.find(
                                            (parent) =>
                                                parent.id === cat.parentId,
                                        ),
                                )
                                .map((category) => (
                                    // <div class="bg-gray-700 rounded-lg p-4">
                                    <CategoryItem
                                        category={category}
                                        allCategories={categories}
                                    />
                                    // </div>
                                ))}
                        </div>
                    )}
                </div>
            )
        }
    </main>

    
    <CategoryModal />
    <DeleteConfirmModal />
    <LogoutScript />
    {toastMessage && <ToastScript message={toastMessage} type={toastType} />}
</Layout>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        // Check for stored toast messages from previous operations
        const storedToast = sessionStorage.getItem("categoryToast");
        if (storedToast) {
            try {
                const toastData = JSON.parse(storedToast);
                // Import and show toast
                import("@lib/toast.ts").then(({ ToastService }) => {
                    ToastService.showToast({
                        message: toastData.message,
                        type: toastData.type,
                    });
                });
                // Clear the stored message
                sessionStorage.removeItem("categoryToast");
            } catch (e) {
                console.error("Error parsing stored toast:", e);
                sessionStorage.removeItem("categoryToast");
            }
        }

        // Listen for custom events from CategoryItem components
        document.addEventListener("category-updated", (event) => {
            const customEvent = event as CustomEvent;
            console.log("Category updated:", customEvent.detail);

            // Store success message in sessionStorage to show after refresh
            sessionStorage.setItem(
                "categoryToast",
                JSON.stringify({
                    message: "Category updated successfully!",
                    type: "success",
                }),
            );

            // Refresh immediately to show changes
            location.reload();
        });

        document.addEventListener("category-created", (event) => {
            const customEvent = event as CustomEvent;
            console.log("Category created:", customEvent.detail);

            // Store success message in sessionStorage to show after refresh
            sessionStorage.setItem(
                "categoryToast",
                JSON.stringify({
                    message: "Category created successfully!",
                    type: "success",
                }),
            );

            // Refresh immediately to show changes
            location.reload();
        });

        document.addEventListener("category-deleted", (event) => {
            const customEvent = event as CustomEvent;
            console.log("Category deleted:", customEvent.detail);

            // Store success message in sessionStorage to show after refresh
            sessionStorage.setItem(
                "categoryToast",
                JSON.stringify({
                    message: "Category deleted successfully!",
                    type: "success",
                }),
            );

            // Refresh immediately to show changes
            location.reload();
        });

        document.addEventListener("category-edit-started", (event) => {
            const customEvent = event as CustomEvent;
            console.log("Category edit started:", customEvent.detail);
            // Optionally handle any page-level state changes
        });

        document.addEventListener("category-edit-cancelled", (event) => {
            const customEvent = event as CustomEvent;
            console.log("Category edit cancelled:", customEvent.detail);
            // Optionally handle any page-level state changes
        });

        // Handle add category button clicks
        const addCategoryButton = document.getElementById(
            "addCategoryButton",
        ) as HTMLButtonElement;

        if (addCategoryButton) {
            addCategoryButton.addEventListener("click", () => {
                if ((window as any).openCategoryModal) {
                    (window as any).openCategoryModal();
                }
            });
        }

        const createCategoryButton = document.getElementById(
            "addFirstCategoryButton",
        ) as HTMLButtonElement;
        if (createCategoryButton) {
            createCategoryButton.addEventListener("click", () => {
                if ((window as any).openCategoryModal) {
                    (window as any).openCategoryModal();
                }
            });
        }

        // addCategoryButton.click();
    });
</script>
