---
import Layout from "@layouts/Layout.astro";
import Header from "@comps/layout/Header.astro";
import CategoryModal from "@comps/categories/CategoryModal.astro";
import CategoryItem from "@comps/categories/CategoryItem.astro";
import DeleteConfirmModal from "@comps/DeleteConfirmModal.astro";
import { actions } from "astro:actions";
import JoinFamily from "@comps/layout/JoinFamily.astro";
import Folder from "@comps/svgs/mono/Folder.astro";
import Bin from "@comps/svgs/mono/Bin.astro";
import PlusButton from "@comps/PlusButton.astro";
import TextButton from "@comps/TextButton.astro";

const user = Astro.locals.user;

if (!user) {
    return Astro.redirect("/login");
}

// Check if user is in a family first
const userResult = await Astro.callAction(actions.getFamilyDetails, {});
const userInFamily = userResult.data?.ok && userResult.data.family;

// Get categories data only if user is in a family
const categoriesResult = userInFamily
    ? await Astro.callAction(actions.getCategories, {
          includeDeleted: false,
      })
    : { data: { ok: false, categories: [] } };

// Normalize categories into a flat array with the exact fields the UI expects
const rawCategories = categoriesResult.data?.ok
    ? categoriesResult.data.categories
    : [];
// Ensure we have a flat array of category objects regardless of how the action returned them
let normalizedCategories: any[] = [];
if (Array.isArray(rawCategories)) {
    normalizedCategories = rawCategories;
} else if (rawCategories && typeof rawCategories === "object") {
    const vals = Object.values(rawCategories) as any[];
    normalizedCategories = vals.flatMap((v) => (Array.isArray(v) ? v : [v]));
} else {
    normalizedCategories = [];
}

const categories = normalizedCategories.map((c: any) => ({
    id: c.id,
    name: c.name,
    color: c.color,
    parentId: c.parentId ?? null,
    _count: c._count ?? undefined,
}));

// Organize categories into parent-child hierarchy
const parentCategories = categories.filter((cat) => !cat.parentId) || [];
const childCategories = categories.filter((cat) => cat.parentId) || [];
---

<Layout title="Categories" description="Manage your transaction categories">
    <main class="bg-gray-900 p-8 text-white">
        <Header currentPage="categories" user={user} />

        {
            !userInFamily ? (
                <JoinFamily />
            ) : (
                <div class="bg-gray-800 shadow-lg px-6 py-6 rounded-lg mx-auto max-w-7xl">
                    <div class="flex items-center justify-between mb-6">
                        <div class="flex items-baseline-last gap-4">
                            <h2 class="font-semibold text-purple-400 text-xl flex items-center gap-x-2">
                                <Folder />
                                Categories
                            </h2>
                            <a
                                href="/categories/deleted"
                                class="text-purple-400 hover:text-purple-300 flex items-center gap-2"
                            >
                                <Bin class="w-4 h-4" />
                                <span>Deleted Categories</span>
                            </a>
                        </div>

                        <PlusButton
                            id="addCategoryButton"
                            title="Add Category"
                        />
                    </div>

                    {(categories?.length || 0) === 0 ? (
                        <div class="text-center py-10">
                            <Folder class="w-20 h-20 mx-auto text-purple-400 mb-4" />
                            <h3 class="text-xl font-semibold text-gray-300 mb-2">
                                No Categories yet
                            </h3>
                            <p class="text-gray-400 mb-6">
                                Create categories to organize your transactions
                                better.
                            </p>
                            <TextButton
                                id="addCategoryButton"
                                title="Add Category"
                            >
                                Create Your First Category
                            </TextButton>
                        </div>
                    ) : (
                        <div id="categoryList" class="flex flex-col gap-y-4">
                            {parentCategories.map((category) => {
                                const children = childCategories.filter(
                                    (child) => child.parentId === category.id,
                                );
                                return (
                                    <div class="bg-gray-700 rounded-lg overflow-hidden">
                                        <CategoryItem
                                            category={category}
                                            allCategories={categories}
                                        />

                                        {children.length > 0 && (
                                            <div class="bg-gray-600 border-t border-gray-500">
                                                {children.map((child) => (
                                                    <CategoryItem
                                                        category={child}
                                                        isChild={true}
                                                        allCategories={
                                                            categories
                                                        }
                                                    />
                                                ))}
                                            </div>
                                        )}
                                    </div>
                                );
                            })}

                            {/* Categories without parent (but not already shown) */}
                            {childCategories
                                .filter(
                                    (cat) =>
                                        !parentCategories.find(
                                            (parent) =>
                                                parent.id === cat.parentId,
                                        ),
                                )
                                .map((category) => (
                                    // <div class="bg-gray-700 rounded-lg p-4">
                                    <CategoryItem
                                        category={category}
                                        allCategories={categories}
                                    />
                                    // </div>
                                ))}
                        </div>
                    )}
                </div>
            )
        }
    </main>

    <CategoryModal />
    <DeleteConfirmModal title="Delete Category" />

    <script>
        document.addEventListener("DOMContentLoaded", () => {
            // Check for stored toast messages from previous operations
            const storedToast = sessionStorage.getItem("categoryToast");
            if (storedToast) {
                try {
                    const toastData = JSON.parse(storedToast);
                    // Import and show toast
                    import("@lib/toast.ts").then(({ ToastService }) => {
                        ToastService.showToast({
                            message: toastData.message,
                            type: toastData.type,
                        });
                    });
                    // Clear the stored message
                    sessionStorage.removeItem("categoryToast");
                } catch (e) {
                    console.error("Error parsing stored toast:", e);
                    sessionStorage.removeItem("categoryToast");
                }
            }

            // Listen for custom events from CategoryItem components
            document.addEventListener("category-updated", (event) => {
                const customEvent = event as CustomEvent;
                console.log("Category updated:", customEvent.detail);

                // Store success message in sessionStorage to show after refresh
                sessionStorage.setItem(
                    "categoryToast",
                    JSON.stringify({
                        message: "Category updated successfully!",
                        type: "success",
                    }),
                );

                // Refresh immediately to show changes
                location.reload();
            });

            document.addEventListener("category-created", (event) => {
                const customEvent = event as CustomEvent;
                console.log("Category created:", customEvent.detail);

                // Store success message in sessionStorage to show after refresh
                sessionStorage.setItem(
                    "categoryToast",
                    JSON.stringify({
                        message: "Category created successfully!",
                        type: "success",
                    }),
                );

                // Refresh immediately to show changes
                location.reload();
            });

            document.addEventListener("category-deleted", (event) => {
                const customEvent = event as CustomEvent;
                console.log("Category deleted:", customEvent.detail);

                // Store success message in sessionStorage to show after refresh
                sessionStorage.setItem(
                    "categoryToast",
                    JSON.stringify({
                        message: "Category deleted successfully!",
                        type: "success",
                    }),
                );

                // Refresh immediately to show changes
                location.reload();
            });

            document.addEventListener("category-edit-started", (event) => {
                const customEvent = event as CustomEvent;
                console.log("Category edit started:", customEvent.detail);
                // Optionally handle any page-level state changes
            });

            document.addEventListener("category-edit-cancelled", (event) => {
                const customEvent = event as CustomEvent;
                console.log("Category edit cancelled:", customEvent.detail);
                // Optionally handle any page-level state changes
            });

            // Handle add category button clicks
            const addCategoryButton = document.getElementById(
                "addCategoryButton",
            ) as HTMLButtonElement;

            if (addCategoryButton) {
                addCategoryButton.addEventListener("click", () => {
                    const modal = document.getElementById("categoryModal");
                    if (
                        modal &&
                        typeof (modal as any).showModal === "function"
                    ) {
                        try {
                            (modal as any).showModal();
                        } catch (e) {
                            /* ignore */
                        }
                    }
                });
            }

            const createCategoryButton = document.getElementById(
                "addFirstCategoryButton",
            ) as HTMLButtonElement;
            if (createCategoryButton) {
                createCategoryButton.addEventListener("click", () => {
                    const modal = document.getElementById("categoryModal");
                    if (
                        modal &&
                        typeof (modal as any).showModal === "function"
                    ) {
                        try {
                            (modal as any).showModal();
                        } catch (e) {
                            /* ignore */
                        }
                    }
                });
            }

            // addCategoryButton.click();
        });
    </script>
</Layout>
