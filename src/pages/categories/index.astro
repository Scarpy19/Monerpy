---
import Layout from "@layouts/Layout.astro";
import Footer from "@comps/Footer.astro";
import LogoutScript from "@comps/LogoutScript.astro";
import Header from "@comps/Header.astro";
import CategoryModal from "@comps/categories/CategoryModal.astro";
import CategoryItem from "@comps/categories/CategoryItem.astro";
import DeleteConfirmModal from "@comps/categories/DeleteConfirmModal.astro";
import ToastScript from "@comps/ToastScript.astro";
import { actions } from "astro:actions";
import JoinFamily from "@/components/JoinFamily.astro";
import Plus from "@svg/mono/Plus.astro";
import Folder from "@/components/svgs/mono/Folder.astro";

const user = Astro.locals.user;

if (!user) {
    return Astro.redirect("/login");
}

// Handle form submissions
let toastMessage = "";
let toastType = "success";

if (Astro.request.method === "POST") {
    const formData = await Astro.request.formData();
    const action = formData.get("_action") as string;

    if (action === "create") {
        const result = await Astro.callAction(actions.createCategory, formData);

        if (result.data?.ok) {
            toastMessage = "Category created successfully!";
            toastType = "success";
        } else if (result.error?.type === "AstroActionInputError") {
            const errorstring = result.error?.message.replace(
                /^Failed to validate:\s*/,
                "",
            );
            const error = JSON.parse(errorstring);
            toastMessage = `Expected ${error[0].expected}, received ${error[0].received} on field "${error[0].path[0]}"`;
            toastType = "error";
        } else {
            console.log(result);
            toastMessage = result.data?.error || "Failed to create category";
            toastType = "error";
        }
    } else if (action === "update") {
        const result = await Astro.callAction(actions.updateCategory, formData);
        if (result.data?.ok) {
            toastMessage = "Category updated successfully!";
            toastType = "success";
        } else {
            toastMessage = result.data?.error || "Failed to update category";
            toastType = "error";
        }
    } else if (action === "delete") {
        const result = await Astro.callAction(actions.deleteCategory, formData);
        if (result.data?.ok) {
            toastMessage = "Category deleted successfully!";
            toastType = "success";
        } else {
            toastMessage = result.data?.error || "Failed to delete category";
            toastType = "error";
        }
    } else if (action === "restore") {
        const result = await Astro.callAction(
            actions.restoreCategory,
            formData,
        );
        if (result.data?.ok) {
            toastMessage = "Category restored successfully!";
            toastType = "success";
        } else {
            toastMessage = result.data?.error || "Failed to restore category";
            toastType = "error";
        }
    }
}

// Check if user is in a family first
const userResult = await Astro.callAction(actions.getFamilyDetails, {});
const userInFamily = userResult.data?.ok && userResult.data.family;

// Get categories data only if user is in a family
const categoriesResult = userInFamily
    ? await Astro.callAction(actions.getCategoriesList, {
          includeDeleted: false,
      })
    : { data: { ok: false, categories: [] } };
const categories = categoriesResult.data?.ok
    ? categoriesResult.data.categories
    : [];

// Organize categories into parent-child hierarchy
const parentCategories = categories?.filter((cat) => !cat.parentId) || [];
const childCategories = categories?.filter((cat) => cat.parentId) || [];
---

<Layout title="Categories" description="Manage your transaction categories">
    <main class="bg-gray-900 p-8 min-h-screen text-white">
        <Header currentPage="categories" user={user} />

        <div class="mx-auto max-w-7xl">
            {
                !userInFamily ? (
                    <JoinFamily />
                ) : (
                    <div class="bg-gray-800 shadow-lg px-6 py-6 rounded-lg">
                        <div class="flex items-center justify-between mb-6">
                            <h2 class="font-semibold text-purple-400 text-xl flex items-center gap-x-2">
                                <Folder />
                                Categories
                            </h2>

                            <button
                                id="addCategoryButton"
                                type="button"
                                class="add-category-btn bg-purple-600 hover:bg-purple-700 text-white font-semibold py-2 px-4 rounded-lg transition-colors"
                            >
                                <Plus />
                            </button>
                        </div>

                        {(categories?.length || 0) === 0 ? (
                            <div class="text-center py-12">
                                <div class="text-6xl mb-4">ðŸ“‚</div>
                                <h3 class="text-xl font-semibold text-gray-300 mb-2">
                                    No Categories Yet
                                </h3>
                                <p class="text-gray-400 mb-6">
                                    Create categories to organize your
                                    transactions better.
                                </p>
                                <button
                                    type="button"
                                    id="createCategoryButton"
                                    class="create-first-category-btn bg-purple-600 hover:bg-purple-700 text-white font-semibold py-2 px-4 rounded-lg transition-colors"
                                >
                                    Create Your First Category
                                </button>
                            </div>
                        ) : (
                            <div
                                id="categoryList"
                                class="flex flex-col gap-y-4"
                            >
                                {parentCategories.map((category) => {
                                    const children = childCategories.filter(
                                        (child) =>
                                            child.parentId === category.id,
                                    );
                                    return (
                                        <div class="bg-gray-700 rounded-lg overflow-hidden">
                                            <CategoryItem category={category} />

                                            {children.length > 0 && (
                                                <div class="bg-gray-600 border-t border-gray-500">
                                                    {children.map((child) => (
                                                        <CategoryItem
                                                            category={child}
                                                            isChild={true}
                                                        />
                                                    ))}
                                                </div>
                                            )}
                                        </div>
                                    );
                                })}

                                {/* Categories without parent (but not already shown) */}
                                {childCategories
                                    .filter(
                                        (cat) =>
                                            !parentCategories.find(
                                                (parent) =>
                                                    parent.id === cat.parentId,
                                            ),
                                    )
                                    .map((category) => (
                                        // <div class="bg-gray-700 rounded-lg p-4">
                                        <CategoryItem category={category} />
                                        // </div>
                                    ))}
                            </div>
                        )}
                    </div>
                )
            }
        </div>
    </main>

    <Footer />
    <CategoryModal />
    <DeleteConfirmModal />
    <LogoutScript />
    {toastMessage && <ToastScript message={toastMessage} type={toastType} />}
</Layout>

<script>
    import { actions } from "astro:actions";
    import { ToastService } from "@lib/toast.ts";

    // Global type declarations
    declare global {
        interface Window {
            deleteCategory: (id: number, name: string) => Promise<void>;
            deleteCategoryWithModal: (id: number, name: string) => void;
            deleteConfirmModal?: {
                show: (name: string, onConfirm: () => void) => void;
            };
        }
    }

    // Make function globally available
    (window as any).deleteCategory = deleteCategory;

    // Set up event delegation for delete buttons
    document.addEventListener("DOMContentLoaded", () => {
        document.addEventListener("click", (event) => {
            const deleteButton = (event.target as Element)?.closest(
                ".delete-category-btn",
            );
            if (deleteButton) {
                event.preventDefault();
                const categoryId = parseInt(
                    deleteButton.getAttribute("data-category-id") || "0",
                );
                const categoryName =
                    deleteButton.getAttribute("data-category-name") || "";

                if (categoryId && categoryName) {
                    deleteCategoryWithModal(categoryId, categoryName);
                }
            }

            // Handle add category button clicks
            const addCategoryButton = (event.target as Element)?.closest(
                ".add-category-btn, .create-first-category-btn",
            );
            if (addCategoryButton) {
                event.preventDefault();
                if ((window as any).showCategoryModal) {
                    (window as any).showCategoryModal();
                }
            }
        });
    });

    async function deleteCategory(id: number, name: string) {
        // Option 1: Simple confirm dialog (current implementation)
        if (
            confirm(`Are you sure you want to delete the category "${name}"?`)
        ) {
            await performDeletion(id, name);
        }
    }

    // Alternative function for modal-based confirmation
    (window as any).deleteCategoryWithModal = deleteCategoryWithModal;

    function deleteCategoryWithModal(id: number, name: string) {
        if (window.deleteConfirmModal) {
            window.deleteConfirmModal.show(name, () => {
                performDeletion(id, name);
            });
        } else {
            // Fallback to simple confirm if modal not available
            deleteCategory(id, name);
        }
    }

    async function performDeletion(id: number, name: string) {
        try {
            // Show loading state
            const deleteButton = document.querySelector(
                `[data-category-id="${id}"].delete-category-btn`,
            ) as HTMLButtonElement;
            if (deleteButton) {
                deleteButton.setAttribute("disabled", "true");
                deleteButton.innerHTML =
                    '<div class="animate-spin w-4 h-4 border-2 border-white border-t-transparent rounded-full"></div>';
            }

            const formData = new FormData();
            formData.append("id", id.toString());
            const { data, error } = await actions.deleteCategory(formData);

            if (error) {
                console.error("Delete category error:", error);
                ToastService.showToast({
                    message: "Failed to delete category: " + error.message,
                    type: "error",
                });
            } else if (data?.ok) {
                // Remove the category element from DOM
                const categoryElement = (deleteButton?.closest(
                    ".bg-gray-700",
                ) || deleteButton?.closest(".border-b")) as HTMLElement;
                if (categoryElement) {
                    categoryElement.remove();

                    // Check if no categories left and show empty state
                    const categoriesContainer =
                        document.querySelector("#categoryList");
                    if (
                        categoriesContainer &&
                        categoriesContainer.children.length === 0
                    ) {
                        location.reload(); // Reload to show empty state
                    }
                }

                ToastService.showToast({
                    message: "Category deleted successfully!",
                    type: "success",
                });
            } else {
                ToastService.showToast({
                    message: data?.error || "Failed to delete category",
                    type: "error",
                });
            }
        } catch (err) {
            console.error("Unexpected error:", err);
            ToastService.showToast({
                message: "An unexpected error occurred",
                type: "error",
            });
        } finally {
            // Reset button state
            const deleteButton = document.querySelector(
                `[data-category-id="${id}"].delete-category-btn`,
            ) as HTMLButtonElement;
            if (deleteButton) {
                deleteButton.removeAttribute("disabled");
                deleteButton.innerHTML =
                    '<svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd"></path></svg>';
            }
        }
    }
</script>
