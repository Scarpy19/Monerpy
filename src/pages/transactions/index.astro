---
import Layout from "@layouts/Layout.astro";
import Footer from "@comps/Footer.astro";
import LogoutScript from "@comps/LogoutScript.astro";
import Header from "@comps/Header.astro";
import { actions } from "astro:actions";

const user = Astro.locals.user;

if (!user) {
    return Astro.redirect("/login");
}

// Handle form submissions
if (Astro.request.method === "POST") {
    const formData = await Astro.request.formData();
    const action = formData.get("_action") as string;

    if (action === "create") {
        const result = await Astro.callAction(
            actions.createTransaction,
            formData,
        );
        if (result.data?.ok) {
            return Astro.redirect("/transactions?success=created");
        }
    } else if (action === "update") {
        const result = await Astro.callAction(
            actions.updateTransaction,
            formData,
        );
        if (result.data?.ok) {
            return Astro.redirect("/transactions?success=updated");
        }
    } else if (action === "delete") {
        const result = await Astro.callAction(
            actions.deleteTransaction,
            formData,
        );
        if (result.data?.ok) {
            return Astro.redirect("/transactions?success=deleted");
        }
    }
}

// Get data for the page
const [accountsResult, categoriesResult, tagsResult, transactionsResult] =
    await Promise.all([
        Astro.callAction(actions.getAccounts, {}),
        Astro.callAction(actions.getCategories, {}),
        Astro.callAction(actions.getTags, {}),
        Astro.callAction(actions.getTransactions, { page: 1, limit: 20 }),
    ]);

const accounts = accountsResult.data?.ok ? accountsResult.data.accounts : [];
const categories = categoriesResult.data?.ok
    ? categoriesResult.data.categories
    : [];
const tags = tagsResult.data?.ok ? tagsResult.data.tags : [];
const transactions = transactionsResult.data?.ok
    ? transactionsResult.data.transactions
    : [];
const pagination = transactionsResult.data?.ok
    ? transactionsResult.data.pagination
    : null;

// Get URL parameters for success messages
const url = new URL(Astro.request.url);
const success = url.searchParams.get("success");
---

<Layout title="Transactions" description="Manage your transactions">
    <main class="bg-gray-900 p-8 min-h-screen text-white">
        <Header currentPage="transactions" user={user} />

        <!-- Success Messages -->
        {
            success && (
                <div class="mx-auto max-w-7xl mb-6">
                    <div class="bg-green-600 text-white px-4 py-3 rounded-lg">
                        {success === "created" &&
                            "Transaction created successfully!"}
                        {success === "updated" &&
                            "Transaction updated successfully!"}
                        {success === "deleted" &&
                            "Transaction deleted successfully!"}
                    </div>
                </div>
            )
        }

        <div class="mx-auto max-w-7xl grid grid-cols-1 lg:grid-cols-3 gap-8">
            <!-- Transaction Form -->
            <div class="lg:col-span-1">
                <div class="bg-gray-800 shadow-lg px-6 py-6 rounded-lg">
                    <h2
                        class="mb-6 font-semibold text-purple-400 text-xl"
                        id="form-title"
                    >
                        Add Transaction
                    </h2>

                    <form id="transactionForm" method="POST" class="space-y-4">
                        <input
                            type="hidden"
                            name="_action"
                            id="form-action"
                            value="create"
                        />
                        <input type="hidden" name="id" id="transaction-id" />

                        <!-- Account Selection -->
                        <div>
                            <label
                                for="accountId"
                                class="block text-sm font-medium text-gray-300 mb-2"
                            >
                                Account *
                            </label>
                            <select
                                id="accountId"
                                name="accountId"
                                required
                                class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-purple-500"
                            >
                                <option value="">Select an account</option>
                                {
                                    accounts &&
                                        accounts.map((account) => (
                                            <option
                                                value={account.id}
                                                data-color={account.color}
                                            >
                                                {account.name} (
                                                {account.accountType}) - €
                                                {account.balance.toFixed(2)}
                                            </option>
                                        ))
                                }
                            </select>
                        </div>

                        <!-- Transaction Type -->
                        <div>
                            <label
                                for="type"
                                class="block text-sm font-medium text-gray-300 mb-2"
                            >
                                Type *
                            </label>
                            <select
                                id="type"
                                name="type"
                                required
                                class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-purple-500"
                            >
                                <option value="">Select transaction type</option
                                >
                                <option value="Income">Income</option>
                                <option value="Expense">Expense</option>
                                <option value="InvestmentBuy"
                                    >Investment Buy</option
                                >
                                <option value="InvestmentSell"
                                    >Investment Sell</option
                                >
                                <option value="LoanPayment">Loan Payment</option
                                >
                                <option value="LoanRepayment"
                                    >Loan Repayment</option
                                >
                            </select>
                        </div>

                        <!-- Transaction Name -->
                        <div>
                            <label
                                for="name"
                                class="block text-sm font-medium text-gray-300 mb-2"
                            >
                                Description *
                            </label>
                            <input
                                type="text"
                                id="name"
                                name="name"
                                required
                                placeholder="Enter transaction description"
                                class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-purple-500"
                            />
                        </div>

                        <!-- Amount -->
                        <div>
                            <label
                                for="amount"
                                class="block text-sm font-medium text-gray-300 mb-2"
                            >
                                Amount (€) *
                            </label>
                            <input
                                type="number"
                                id="amount"
                                name="amount"
                                required
                                min="0.01"
                                step="0.01"
                                placeholder="0.00"
                                class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-purple-500"
                            />
                        </div>

                        <!-- Date -->
                        <div>
                            <label
                                for="date"
                                class="block text-sm font-medium text-gray-300 mb-2"
                            >
                                Date *
                            </label>
                            <input
                                type="date"
                                id="date"
                                name="date"
                                required
                                class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-purple-500"
                            />
                        </div>

                        <!-- Category -->
                        <div>
                            <label
                                for="categoryId"
                                class="block text-sm font-medium text-gray-300 mb-2"
                            >
                                Category
                            </label>
                            <select
                                id="categoryId"
                                name="categoryId"
                                class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-purple-500"
                            >
                                <option value=""
                                    >Select a category (optional)</option
                                >
                                {
                                    categories &&
                                        categories.map((category) => (
                                            <option
                                                value={category.id}
                                                data-color={category.color}
                                            >
                                                {category.parent
                                                    ? `${category.parent.name} > ${category.name}`
                                                    : category.name}
                                            </option>
                                        ))
                                }
                            </select>
                        </div>

                        <!-- New Category -->
                        <div>
                            <label
                                for="newCategory"
                                class="block text-sm font-medium text-gray-300 mb-2"
                            >
                                Or create new category
                            </label>
                            <div class="flex gap-2">
                                <input
                                    type="text"
                                    id="newCategory"
                                    name="newCategory"
                                    placeholder="New category name"
                                    class="flex-1 px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-purple-500"
                                />
                                <input
                                    type="color"
                                    id="newCategoryColor"
                                    name="newCategoryColor"
                                    value="#6172F3"
                                    class="w-12 h-10 bg-gray-700 border border-gray-600 rounded-lg"
                                />
                            </div>
                        </div>

                        <!-- Tags -->
                        <div>
                            <label
                                for="tags"
                                class="block text-sm font-medium text-gray-300 mb-2"
                            >
                                Tags (comma-separated)
                            </label>
                            <input
                                type="text"
                                id="tags"
                                name="tags"
                                placeholder="tag1, tag2, tag3"
                                class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-purple-500"
                            />
                            <div class="mt-2">
                                <p class="text-xs text-gray-400 mb-1">
                                    Existing tags:
                                </p>
                                <div class="flex flex-wrap gap-1">
                                    {
                                        tags &&
                                            tags.map((tag) => (
                                                <button
                                                    type="button"
                                                    class="tag-btn text-xs px-2 py-1 rounded text-white hover:opacity-80"
                                                    style={`background-color: ${tag.color}`}
                                                    data-tag={tag.name}
                                                >
                                                    {tag.name}
                                                </button>
                                            ))
                                    }
                                </div>
                            </div>
                        </div>

                        <!-- Form Buttons -->
                        <div class="flex gap-3 pt-4">
                            <button
                                type="submit"
                                class="flex-1 bg-purple-600 hover:bg-purple-700 px-4 py-2 rounded text-white transition duration-200"
                            >
                                <span id="submit-text">Add Transaction</span>
                            </button>
                            <button
                                type="button"
                                id="cancel-btn"
                                class="bg-gray-600 hover:bg-gray-700 px-4 py-2 rounded text-white transition duration-200 hidden"
                            >
                                Cancel
                            </button>
                        </div>
                    </form>
                </div>
            </div>

            <!-- Transactions List -->
            <div class="lg:col-span-2">
                <div class="bg-gray-800 shadow-lg px-6 py-6 rounded-lg">
                    <div class="flex justify-between items-center mb-6">
                        <h2 class="font-semibold text-purple-400 text-xl">
                            Recent Transactions
                        </h2>
                        <div class="flex gap-2">
                            <!-- Filter buttons could go here -->
                        </div>
                    </div>

                    {
                        !transactions || transactions.length === 0 ? (
                            <div class="text-center py-12 text-gray-400">
                                <p class="text-lg mb-2">
                                    No transactions found
                                </p>
                                <p class="text-sm">
                                    Add your first transaction to get started!
                                </p>
                            </div>
                        ) : (
                            <div class="space-y-3">
                                {transactions.map((transaction) => (
                                    <div class="bg-gray-700 rounded-lg p-4 flex items-center justify-between hover:bg-gray-650 transition-colors">
                                        <div class="flex items-center gap-4">
                                            <div
                                                class="w-3 h-3 rounded-full"
                                                style={`background-color: ${transaction.account.color}`}
                                            />

                                            <div class="flex-1">
                                                <div class="flex items-center gap-2 mb-1">
                                                    <h3 class="font-medium text-white">
                                                        {transaction.name}
                                                    </h3>
                                                    <span
                                                        class={`text-xs px-2 py-1 rounded ${
                                                            transaction.type ===
                                                            "Income"
                                                                ? "bg-green-600"
                                                                : transaction.type ===
                                                                    "Expense"
                                                                  ? "bg-red-600"
                                                                  : "bg-blue-600"
                                                        }`}
                                                    >
                                                        {transaction.type}
                                                    </span>
                                                </div>

                                                <div class="text-sm text-gray-300 space-y-1">
                                                    <p>
                                                        <span class="text-gray-400">
                                                            Account:
                                                        </span>{" "}
                                                        {
                                                            transaction.account
                                                                .name
                                                        }
                                                    </p>
                                                    {transaction.category && (
                                                        <p>
                                                            <span class="text-gray-400">
                                                                Category:
                                                            </span>
                                                            <span
                                                                class="px-2 py-1 rounded text-xs ml-1"
                                                                style={`background-color: ${transaction.category.color}; color: white;`}
                                                            >
                                                                {
                                                                    transaction
                                                                        .category
                                                                        .name
                                                                }
                                                            </span>
                                                        </p>
                                                    )}
                                                    {transaction.tags.length >
                                                        0 && (
                                                        <div class="flex items-center gap-1">
                                                            <span class="text-gray-400 text-xs">
                                                                Tags:
                                                            </span>
                                                            {transaction.tags.map(
                                                                (tag) => (
                                                                    <span
                                                                        class="text-xs px-2 py-1 rounded text-white"
                                                                        style={`background-color: ${tag.color}`}
                                                                    >
                                                                        {
                                                                            tag.name
                                                                        }
                                                                    </span>
                                                                ),
                                                            )}
                                                        </div>
                                                    )}
                                                    <p class="text-gray-400">
                                                        {new Date(
                                                            transaction.date,
                                                        ).toLocaleDateString()}{" "}
                                                        • by{" "}
                                                        {
                                                            transaction.user
                                                                .username
                                                        }
                                                    </p>
                                                </div>
                                            </div>
                                        </div>

                                        <div class="flex items-center gap-4">
                                            <div class="text-right">
                                                <div
                                                    class={`text-lg font-semibold ${
                                                        transaction.type ===
                                                        "Income"
                                                            ? "text-green-400"
                                                            : "text-red-400"
                                                    }`}
                                                >
                                                    {transaction.type ===
                                                    "Income"
                                                        ? "+"
                                                        : "-"}
                                                    €
                                                    {transaction.amount.toFixed(
                                                        2,
                                                    )}
                                                </div>
                                            </div>

                                            <div class="flex gap-2">
                                                <button
                                                    type="button"
                                                    class="edit-btn bg-blue-600 hover:bg-blue-700 px-3 py-1 rounded text-sm text-white transition duration-200"
                                                    data-transaction={JSON.stringify(
                                                        transaction,
                                                    )}
                                                >
                                                    Edit
                                                </button>
                                                <form
                                                    method="POST"
                                                    class="inline"
                                                    onsubmit="return confirm('Are you sure you want to delete this transaction?')"
                                                >
                                                    <input
                                                        type="hidden"
                                                        name="_action"
                                                        value="delete"
                                                    />
                                                    <input
                                                        type="hidden"
                                                        name="id"
                                                        value={transaction.id}
                                                    />
                                                    <button
                                                        type="submit"
                                                        class="bg-red-600 hover:bg-red-700 px-3 py-1 rounded text-sm text-white transition duration-200"
                                                    >
                                                        Delete
                                                    </button>
                                                </form>
                                            </div>
                                        </div>
                                    </div>
                                ))}
                            </div>
                        )
                    }

                    {
                        pagination && pagination.totalPages > 1 && (
                            <div class="flex justify-center mt-6 gap-2">
                                {Array.from(
                                    { length: pagination.totalPages },
                                    (_, i) => (
                                        <a
                                            href={`/transactions?page=${i + 1}`}
                                            class={`px-3 py-2 rounded ${
                                                pagination.page === i + 1
                                                    ? "bg-purple-600 text-white"
                                                    : "bg-gray-700 text-gray-300 hover:bg-gray-600"
                                            }`}
                                        >
                                            {i + 1}
                                        </a>
                                    ),
                                )}
                            </div>
                        )
                    }
                </div>
            </div>
        </div>
    </main>

    <Footer />
    <LogoutScript />

    <script>
        // Set today's date as default
        const dateInput = document.getElementById("date") as HTMLInputElement;
        if (dateInput) {
            dateInput.value = new Date().toISOString().split("T")[0];
        }

        // Tag button functionality
        document.querySelectorAll(".tag-btn").forEach((btn) => {
            btn.addEventListener("click", function (this: HTMLElement) {
                const tagName = this.dataset.tag;
                const tagsInput = document.getElementById(
                    "tags",
                ) as HTMLInputElement;
                if (tagsInput && tagName) {
                    const currentTags = tagsInput.value
                        .split(",")
                        .map((t) => t.trim())
                        .filter((t) => t.length > 0);

                    if (!currentTags.includes(tagName)) {
                        currentTags.push(tagName);
                        tagsInput.value = currentTags.join(", ");
                    }
                }
            });
        });

        // Edit functionality
        document.querySelectorAll(".edit-btn").forEach((btn) => {
            btn.addEventListener("click", function (this: HTMLElement) {
                const transactionData = this.dataset.transaction;
                if (!transactionData) return;

                const transaction = JSON.parse(transactionData);

                // Update form for editing
                const formTitle = document.getElementById("form-title");
                const formAction = document.getElementById(
                    "form-action",
                ) as HTMLInputElement;
                const transactionId = document.getElementById(
                    "transaction-id",
                ) as HTMLInputElement;
                const submitText = document.getElementById("submit-text");
                const cancelBtn = document.getElementById("cancel-btn");

                if (formTitle) formTitle.textContent = "Edit Transaction";
                if (formAction) formAction.value = "update";
                if (transactionId) transactionId.value = transaction.id;
                if (submitText) submitText.textContent = "Update Transaction";
                if (cancelBtn) cancelBtn.classList.remove("hidden");

                // Fill form with transaction data
                const accountId = document.getElementById(
                    "accountId",
                ) as HTMLSelectElement;
                const type = document.getElementById(
                    "type",
                ) as HTMLSelectElement;
                const name = document.getElementById(
                    "name",
                ) as HTMLInputElement;
                const amount = document.getElementById(
                    "amount",
                ) as HTMLInputElement;
                const date = document.getElementById(
                    "date",
                ) as HTMLInputElement;
                const categoryId = document.getElementById(
                    "categoryId",
                ) as HTMLSelectElement;
                const tags = document.getElementById(
                    "tags",
                ) as HTMLInputElement;

                if (accountId) accountId.value = transaction.accountId;
                if (type) type.value = transaction.type;
                if (name) name.value = transaction.name;
                if (amount) amount.value = transaction.amount;
                if (date) date.value = transaction.date.split("T")[0];
                if (categoryId) categoryId.value = transaction.categoryId || "";

                // Fill tags
                if (tags) {
                    const tagNames = transaction.tags.map(
                        (tag: any) => tag.name,
                    );
                    tags.value = tagNames.join(", ");
                }

                // Scroll to form
                const form = document.getElementById("transactionForm");
                if (form) {
                    form.scrollIntoView({ behavior: "smooth" });
                }
            });
        });

        // Cancel edit functionality
        const cancelBtn = document.getElementById("cancel-btn");
        if (cancelBtn) {
            cancelBtn.addEventListener("click", function () {
                // Reset form to add mode
                const formTitle = document.getElementById("form-title");
                const formAction = document.getElementById(
                    "form-action",
                ) as HTMLInputElement;
                const transactionId = document.getElementById(
                    "transaction-id",
                ) as HTMLInputElement;
                const submitText = document.getElementById("submit-text");

                if (formTitle) formTitle.textContent = "Add Transaction";
                if (formAction) formAction.value = "create";
                if (transactionId) transactionId.value = "";
                if (submitText) submitText.textContent = "Add Transaction";
                this.classList.add("hidden");

                // Clear form
                const form = document.getElementById(
                    "transactionForm",
                ) as HTMLFormElement;
                const dateInput = document.getElementById(
                    "date",
                ) as HTMLInputElement;
                if (form) form.reset();
                if (dateInput)
                    dateInput.value = new Date().toISOString().split("T")[0];
            });
        }

        // New category input handling
        const newCategoryInput = document.getElementById(
            "newCategory",
        ) as HTMLInputElement;
        if (newCategoryInput) {
            newCategoryInput.addEventListener("input", function () {
                const categorySelect = document.getElementById(
                    "categoryId",
                ) as HTMLSelectElement;
                if (categorySelect) {
                    if (this.value.trim()) {
                        categorySelect.disabled = true;
                        categorySelect.value = "";
                    } else {
                        categorySelect.disabled = false;
                    }
                }
            });
        }

        const categorySelect = document.getElementById(
            "categoryId",
        ) as HTMLSelectElement;
        if (categorySelect) {
            categorySelect.addEventListener("change", function () {
                const newCategoryInput = document.getElementById(
                    "newCategory",
                ) as HTMLInputElement;
                if (newCategoryInput) {
                    if (this.value) {
                        newCategoryInput.disabled = true;
                        newCategoryInput.value = "";
                    } else {
                        newCategoryInput.disabled = false;
                    }
                }
            });
        }
    </script>
</Layout>
