---
import Layout from "@layouts/Layout.astro";
import Footer from "@comps/Footer.astro";
import LogoutScript from "@comps/LogoutScript.astro";
import Header from "@comps/Header.astro";
import TransactionModal from "@comps/TransactionModal.astro";
import { actions } from "astro:actions";
import { formatDateForDisplay } from '../../lib/date-utils.js';

const user = Astro.locals.user;

if (!user) {
    return Astro.redirect("/login");
}

// Handle form submissions
if (Astro.request.method === "POST") {
    const formData = await Astro.request.formData();
    const action = formData.get("_action") as string;

    if (action === "create") {
        const result = await Astro.callAction(
            actions.createTransaction,
            formData,
        );
        console.log("Create transaction result:", result);
        if (result.data?.ok) {
            return Astro.redirect("/transactions?success=created");
        } else {
            console.error(
                "Transaction creation failed:",
                result.error || result.data?.error,
            );
            return Astro.redirect("/transactions?error=create-failed");
        }
    } else if (action === "update") {
        const result = await Astro.callAction(
            actions.updateTransaction,
            formData,
        );
        console.log("Update transaction result:", result);
        if (result.data?.ok) {
            return Astro.redirect("/transactions?success=updated");
        } else {
            console.error(
                "Transaction update failed:",
                result.error || result.data?.error,
            );
            return Astro.redirect("/transactions?error=update-failed");
        }
    } else if (action === "delete") {
        const result = await Astro.callAction(
            actions.deleteTransaction,
            formData,
        );
        console.log("Delete transaction result:", result);
        if (result.data?.ok) {
            return Astro.redirect("/transactions?success=deleted");
        } else {
            console.error(
                "Transaction deletion failed:",
                result.error || result.data?.error,
            );
            return Astro.redirect("/transactions?error=delete-failed");
        }
    }
}

// Get data for the page
const transactionsResult = await Astro.callAction(actions.getTransactions, {
    page: 1,
    limit: 20,
});

const transactions = transactionsResult.data?.ok
    ? transactionsResult.data.transactions
    : [];
const pagination = transactionsResult.data?.ok
    ? transactionsResult.data.pagination
    : null;

// Get URL parameters for success and error messages
const url = new URL(Astro.request.url);
const success = url.searchParams.get("success");
const error = url.searchParams.get("error");
---

<Layout title="Transactions" description="Manage your transactions">
    <main class="bg-gray-900 p-8 min-h-screen text-white">
        <Header currentPage="transactions" user={user} />

        <!-- Success Messages -->
        {
            success && (
                <div class="mx-auto max-w-7xl mb-6">
                    <div class="bg-green-600 text-white px-4 py-3 rounded-lg">
                        {success === "created" &&
                            "Transaction created successfully!"}
                        {success === "updated" &&
                            "Transaction updated successfully!"}
                        {success === "deleted" &&
                            "Transaction deleted successfully!"}
                    </div>
                </div>
            )
        }

        <!-- Error Messages -->
        {
            error && (
                <div class="mx-auto max-w-7xl mb-6">
                    <div class="bg-red-600 text-white px-4 py-3 rounded-lg">
                        {error === "create-failed" &&
                            "Failed to create transaction. Please try again."}
                        {error === "update-failed" &&
                            "Failed to update transaction. Please try again."}
                        {error === "delete-failed" &&
                            "Failed to delete transaction. Please try again."}
                    </div>
                </div>
            )
        }

        <div class="mx-auto max-w-7xl">
            <!-- Transactions List -->
            <div class="bg-gray-800 shadow-lg px-6 py-6 rounded-lg">
                <div class="flex justify-between items-center mb-6">
                    <h2 class="font-semibold text-purple-400 text-xl">
                        Recent Transactions
                    </h2>
                    <div class="flex gap-2">
                        <button
                            type="button"
                            id="addTransactionBtn"
                            class="bg-purple-600 hover:bg-purple-700 px-4 py-2 rounded text-white transition duration-200"
                        >
                            Add Transaction
                        </button>
                    </div>
                </div>

                {
                    !transactions || transactions.length === 0 ? (
                        <div class="text-center py-12 text-gray-400">
                            <p class="text-lg mb-2">No transactions found</p>
                            <p class="text-sm">
                                Add your first transaction to get started!
                            </p>
                        </div>
                    ) : (
                        <div class="space-y-3">
                            {transactions.map((transaction) => (
                                <div class="bg-gray-700 rounded-lg p-4 flex items-center justify-between hover:bg-gray-650 transition-colors">
                                    <div class="flex items-center gap-4">
                                        <div
                                            class="w-3 h-3 rounded-full"
                                            style={`background-color: ${transaction.account.color}`}
                                        />

                                        <div class="flex-1">
                                            <div class="flex items-center justify-between mb-2">
                                                <h3 class="font-medium text-white">
                                                    {transaction.name}
                                                </h3>
                                                <div class="text-right">
                                                    <div class="text-lg font-semibold text-purple-300">
                                                        {formatDateForDisplay(transaction.date, { includeTime: false })}
                                                    </div>
                                                    <div class="text-xs text-gray-400">
                                                        by{" "}
                                                        {
                                                            transaction.user
                                                                .username
                                                        }
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="text-sm text-gray-300 space-y-2">
                                                <div class="flex items-center gap-2">
                                                    <span class="text-gray-400">
                                                        Account:
                                                    </span>
                                                    <span>
                                                        {
                                                            transaction.account
                                                                .name
                                                        }
                                                    </span>
                                                </div>

                                                <div class="flex items-center gap-2 flex-wrap">
                                                    {transaction.category && (
                                                        <span
                                                            class="px-2 py-1 rounded text-xs text-white"
                                                            style={`background-color: ${transaction.category.color}`}
                                                        >
                                                            {
                                                                transaction
                                                                    .category
                                                                    .name
                                                            }
                                                        </span>
                                                    )}
                                                    {transaction.tags.map(
                                                        (tag) => (
                                                            <span
                                                                class="text-xs px-2 py-1 rounded text-white border border-gray-500"
                                                                style={`background-color: ${tag.color}`}
                                                            >
                                                                {tag.name}
                                                            </span>
                                                        ),
                                                    )}
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="flex items-center gap-4">
                                        <div class="text-right">
                                            <div
                                                class={`text-xl font-bold ${
                                                    transaction.type ===
                                                    "Income"
                                                        ? "text-green-400"
                                                        : "text-red-400"
                                                }`}
                                            >
                                                {transaction.type === "Income"
                                                    ? "+"
                                                    : "-"}
                                                {new Intl.NumberFormat(
                                                    "es-ES",
                                                    {
                                                        style: "currency",
                                                        currency: "EUR",
                                                        minimumFractionDigits: 2,
                                                    },
                                                ).format(transaction.amount)}
                                            </div>
                                        </div>

                                        <div class="flex gap-2">
                                            <button
                                                type="button"
                                                class="edit-btn bg-blue-600 hover:bg-blue-700 px-3 py-1 rounded text-sm text-white transition duration-200"
                                                data-transaction={JSON.stringify(
                                                    transaction,
                                                )}
                                            >
                                                Edit
                                            </button>
                                            <form
                                                method="POST"
                                                class="inline"
                                                onsubmit="return confirm('Are you sure you want to delete this transaction?')"
                                            >
                                                <input
                                                    type="hidden"
                                                    name="_action"
                                                    value="delete"
                                                />
                                                <input
                                                    type="hidden"
                                                    name="id"
                                                    value={transaction.id}
                                                />
                                                <button
                                                    type="submit"
                                                    class="bg-red-600 hover:bg-red-700 px-3 py-1 rounded text-sm text-white transition duration-200"
                                                >
                                                    Delete
                                                </button>
                                            </form>
                                        </div>
                                    </div>
                                </div>
                            ))}
                        </div>
                    )
                }

                {
                    pagination && pagination.totalPages > 1 && (
                        <div class="flex justify-center mt-6 gap-2">
                            {Array.from(
                                { length: pagination.totalPages },
                                (_, i) => (
                                    <a
                                        href={`/transactions?page=${i + 1}`}
                                        class={`px-3 py-2 rounded ${
                                            pagination.page === i + 1
                                                ? "bg-purple-600 text-white"
                                                : "bg-gray-700 text-gray-300 hover:bg-gray-600"
                                        }`}
                                    >
                                        {i + 1}
                                    </a>
                                ),
                            )}
                        </div>
                    )
                }
            </div>
        </div>
    </main>
</Layout>

<!-- Transaction Modal -->
<TransactionModal />

<Footer />
<LogoutScript />

<script>
    // Add Transaction button functionality
    const addTransactionBtn = document.getElementById("addTransactionBtn");
    if (addTransactionBtn) {
        addTransactionBtn.addEventListener("click", function () {
            const openModal = (window as any).openTransactionModal;
            if (openModal) {
                openModal();
            }
        });
    }

    // Edit functionality
    document.querySelectorAll(".edit-btn").forEach((btn) => {
        btn.addEventListener("click", function (this: HTMLElement) {
            const transactionData = this.dataset.transaction;
            if (!transactionData) return;

            const transaction = JSON.parse(transactionData);
            const fillFormForEdit = (window as any).fillFormForEdit;
            if (fillFormForEdit) {
                fillFormForEdit(transaction);
            }
        });
    });
</script>
