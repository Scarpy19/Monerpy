---
import Layout from "@layouts/Layout.astro";

// Check if user is already authenticated via middleware
if (Astro.locals.user) {
    console.log(
        "register.astro: User is already authenticated, redirecting to dashboard",
    );
    return Astro.redirect("/dashboard");
}
---

<Layout title="Register" description="Create a new Monerpy account">
    <main class="min-h-screen flex items-center justify-center bg-gray-900">
        <div class="bg-gray-800 p-8 rounded-lg shadow-lg w-96">
            <h1 class="text-3xl font-bold text-purple-500 mb-6 text-center">
                Join Monerpy
            </h1>
            <form id="registerForm" class="flex flex-col gap-y-4">
                <div>
                    <label for="username" class="block text-purple-300 mb-2"
                        >Username</label
                    >
                    <input
                        type="text"
                        id="username"
                        name="username"
                        required
                        minlength="4"
                        class="w-full p-2 rounded bg-gray-700 text-white border border-gray-600 focus:border-purple-500 focus:ring-1 focus:ring-purple-500"
                    />
                    <p class="text-gray-400 text-sm mt-1">
                        Minimum 4 characters
                    </p>
                </div>
                <div>
                    <label for="email" class="block text-purple-300 mb-2"
                        >Email</label
                    >
                    <input
                        type="email"
                        id="email"
                        name="email"
                        required
                        class="w-full p-2 rounded bg-gray-700 text-white border border-gray-600 focus:border-purple-500 focus:ring-1 focus:ring-purple-500"
                    />
                </div>
                <div>
                    <label for="password" class="block text-purple-300 mb-2"
                        >Password</label
                    >
                    <input
                        type="password"
                        id="password"
                        name="password"
                        required
                        minlength="6"
                        class="w-full p-2 rounded bg-gray-700 text-white border border-gray-600 focus:border-purple-500 focus:ring-1 focus:ring-purple-500"
                    />
                    <p class="text-gray-400 text-sm mt-1">
                        Minimum 6 characters
                    </p>
                </div>
                <div>
                    <label
                        for="confirmPassword"
                        class="block text-purple-300 mb-2"
                        >Confirm Password</label
                    >
                    <input
                        type="password"
                        id="confirmPassword"
                        name="confirmPassword"
                        required
                        class="w-full p-2 rounded bg-gray-700 text-white border border-gray-600 focus:border-purple-500 focus:ring-1 focus:ring-purple-500"
                    />
                </div>
                <button
                    type="submit"
                    class="w-full py-2 px-4 bg-purple-600 text-white rounded hover:bg-purple-700 transition duration-200"
                >
                    Create Account
                </button>
            </form>
            <div class="mt-4 text-center">
                <a href="/login" class="text-purple-300 hover:underline">
                    Already have an account? Login here
                </a>
            </div>
            <a
                href="/"
                class="block mt-2 text-purple-300 text-center w-full hover:underline"
                >Back to Home</a
            >
            <div id="errorMessage" class="mt-4 text-red-400 text-center"></div>
        </div>
    </main>
</Layout>

<script>
    import { actions } from "astro:actions";
    import { navigate } from "astro:transitions/client";

    const form = document.getElementById("registerForm") as HTMLFormElement;
    const registerButton = form?.querySelector(
        'button[type="submit"]',
    ) as HTMLButtonElement;
    const errorDiv = document.getElementById("errorMessage") as HTMLDivElement;

    // Password confirmation validation
    const passwordInput = document.getElementById(
        "password",
    ) as HTMLInputElement;
    const confirmPasswordInput = document.getElementById(
        "confirmPassword",
    ) as HTMLInputElement;

    function validatePasswords() {
        if (passwordInput.value !== confirmPasswordInput.value) {
            confirmPasswordInput.setCustomValidity("Passwords do not match");
        } else {
            confirmPasswordInput.setCustomValidity("");
        }
    }

    passwordInput.addEventListener("input", validatePasswords);
    confirmPasswordInput.addEventListener("input", validatePasswords);

    if (form && registerButton) {
        form.addEventListener("submit", async (e) => {
            e.preventDefault();

            // Clear any previous error messages
            errorDiv.textContent = "";

            // Validate passwords match
            if (passwordInput.value !== confirmPasswordInput.value) {
                errorDiv.textContent = "Passwords do not match";
                return;
            }

            // Validate password length
            if (passwordInput.value.length < 6) {
                errorDiv.textContent =
                    "Password must be at least 6 characters long";
                return;
            }

            registerButton.disabled = true;
            const originalText = registerButton.textContent;
            registerButton.innerHTML = `<svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white inline" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
      </svg> Creating Account...`;

            try {
                const formData = new FormData(form);

                // Ensure all required fields have values before sending
                const email = formData.get("email") as string;
                const password = formData.get("password") as string;
                const username = formData.get("username") as string;

                if (!email || !email.trim()) {
                    throw new Error("Email is required");
                }

                if (!username || !username.trim()) {
                    throw new Error("Username is required");
                }

                if (username.trim().length < 4) {
                    throw new Error(
                        "Username must be at least 4 characters long",
                    );
                }

                if (!password || password.length < 6) {
                    throw new Error(
                        "Password must be at least 6 characters long",
                    );
                }

                // Create a clean FormData object with trimmed values
                const cleanFormData = new FormData();
                cleanFormData.append("email", email.trim());
                cleanFormData.append("username", username.trim());
                cleanFormData.append("password", password);

                const { data, error } = await actions.create(cleanFormData);

                if (error && error.message) {
                    console.log("Registration error:", error.message);
                    const arrayError = error.message.replace(
                        /^Failed to validate:\s*/,
                        "",
                    );
                    throw new Error(arrayError || "Registration failed");
                }

                if (data?.ok) {
                    // Registration successful - show success message before redirect
                    errorDiv.textContent =
                        "Account created successfully! Redirecting...";
                    errorDiv.className =
                        "mt-4 p-3 text-green-400 bg-green-900/20 border border-green-500/30 rounded-lg text-center text-sm";

                    // Small delay to show success message before redirect
                    setTimeout(() => {
                        navigate("/dashboard");
                    }, 1000);
                } else {
                    throw new Error(data?.error || "Registration failed");
                }
            } catch (error) {
                // Display error message to user
                const errorMessage =
                    error instanceof Error
                        ? error.message
                        : "Registration failed";

                console.error("Registration error:", errorMessage);
                try {
                    const arrayError = JSON.parse(errorMessage);
                    errorDiv.textContent = arrayError[0].message;
                } catch {
                    // If JSON parsing fails, use the original error message
                    errorDiv.textContent = errorMessage;
                }
                // Reset button state
                registerButton.disabled = false;
                registerButton.textContent = originalText;
            }
        });
    }
</script>
