---
import Layout from "@layouts/Layout.astro";

import LogoutScript from "@comps/layout/LogoutScript.astro";
import Header from "@comps/layout/Header.astro";
import ALeft from "@comps/svgs/mono/ALeft.astro";
import ARight from "@comps/svgs/mono/ARight.astro";
import Refresh from "@comps/svgs/mono/Refresh.astro";
import Bin from "@comps/svgs/mono/Bin.astro";
import TransactionModal from "@comps/modal/TransactionModal.astro";
import RecurringTransactionModal from "@comps/modal/RecurringTransactionModal.astro";
import CategoryModal from "@comps/categories/CategoryModal.astro";

const user = Astro.locals.user;

if (!user) {
  return Astro.redirect("/login");
}

// Extract userId for compatibility with existing code
// (userId is not used, so this line is removed)

/* const categories = await prisma.category.findMany({
  where: {
    userId,
    softDeleted: false,
  },
}); */

// This is the dashboard page for authenticated users
// It provides an overview of the user's financial data, quick actions, and a calendar view of transactions
// It is designed to be responsive and user-friendly, with a focus on accessibility and performance
// The dashboard includes:
// - Monthly overview of income and expenses
// - Quick actions for adding income, expenses, and recurring transactions
// - A calendar view of transactions with caching for performance
// - Navigation links to other pages (transactions, recurring transactions, profile)
// - Logout button to end the session
// The dashboard is styled using Tailwind CSS for a modern and clean look
// It uses Astro components for layout and structure, ensuring a consistent design across the application
// The calendar functionality is implemented in the script section, allowing users to view their transactions by date
---

<Layout title="Dashboard" description="Your financial dashboard overview">
  <main class="bg-gray-900 p-8 text-white">
    <Header currentPage="dashboard" user={user} />

    <section class="flex flex-wrap justify-between gap-6 mx-auto max-w-7xl">
      <article class="bg-gray-800 shadow-lg px-4 py-3.5 rounded-lg grow">
        <h2 class="mb-4 font-semibold text-purple-400 text-xl">
          Monthly Overview
        </h2>
        <div class="flex flex-col gap-y-2" id="monthOverview">
          <p class="flex justify-between items-baseline">
            <span>Income this month:</span>
            <span class="text-green-500 text-xl" data-monthly-income
              >0,00 €</span
            >
          </p>
          <p class="flex justify-between items-baseline">
            <span>Expenses this month:</span>
            <span class="text-red-500 text-xl" data-monthly-expense>0,00 €</span
            >
          </p>
          <p class="flex justify-between items-baseline">
            <span>Balance this month:</span>
            <span class="text-blue-500 text-xl" data-monthly-balance
              >0,00 €</span
            >
          </p>
        </div>
      </article>

      <article
        class="bg-gray-800 shadow-lg px-4 py-3.5 rounded-lg min-w-70 grow"
      >
        <h2 class="mb-4 font-semibold text-purple-400 text-xl">
          Groups Overview
        </h2>
        <div class="flex flex-col gap-y-2">
          <p class="flex justify-between items-baseline">
            <span>Groups:</span>
            <span class="text-purple-300 text-xs">
              <!-- {groups.map((group) => group.name).join(", ")} -->
            </span>
          </p>
        </div>
      </article>

      <!-- Quick Actions Card -->
      <article
        class="bg-gray-800 shadow-lg px-4 py-3.5 rounded-lg min-w-0 grow"
      >
        <h2 class="mb-4 font-semibold text-purple-400 text-xl">
          Quick Actions
        </h2>
        <div class="flex flex-col gap-y-3 overflow-y-auto">
          <div class="flex flex-wrap justify-between gap-3 w-full">
            <div class="inline-flex justify-between gap-x-3 grow-[2]">
              <div class="inline-flex w-full rounded">
                <button
                  type="button"
                  id="addIncomeBtn"
                  class="text-sm flex-2/3 bg-green-600 hover:bg-green-700 p-2 rounded-l text-center text-nowrap transition duration-200"
                >
                  Add Income
                </button>
                <button
                  type="button"
                  id="recurringIncomeBtn"
                  class="text-sm flex-1/3 bg-green-800 hover:bg-green-900 p-2 rounded-r text-center text-nowrap transition duration-200"
                >
                  Recurring
                </button>
              </div>
              <div class="inline-flex w-full rounded">
                <button
                  type="button"
                  id="addExpenseBtn"
                  class="text-sm flex-2/3 bg-red-600 hover:bg-red-700 p-2 rounded-l text-center text-nowrap transition duration-200"
                >
                  Add Expense
                </button>
                <button
                  type="button"
                  id="recurringExpenseBtn"
                  class="text-sm flex-1/3 bg-red-800 hover:bg-red-900 p-2 rounded-r text-center text-nowrap transition duration-200"
                >
                  Recurring
                </button>
              </div>
            </div>
            <button
              type="button"
              id="newGroupBtn"
              class="text-sm block bg-purple-600 hover:bg-purple-700 px-2 py-2 rounded text-white text-center text-nowrap transition duration-200 grow"
            >
              New Group
            </button>
          </div>
        </div>
      </article>
    </section>

    <section
      class="bg-gray-800 shadow-lg mx-auto mt-6 p-6 rounded-lg max-w-7xl"
      id="calendar-container"
    >
      <div class="flex justify-between items-center mb-4">
        <h2 class="font-semibold text-purple-400 text-xl">
          Transaction Calendar
        </h2>
        <div class="flex items-center gap-x-2">
          <button
            id="prevMonth"
            class="bg-purple-600 hover:bg-purple-700 px-3 py-1 rounded text-white transition duration-200"
          >
            <ALeft />
          </button>
          <span
            id="currentMonth"
            class="min-w-[160px] font-medium text-white text-lg text-center"
          ></span>
          <button
            id="nextMonth"
            class="bg-purple-600 hover:bg-purple-700 px-3 py-1 rounded text-white transition duration-200"
          >
            <ARight />
          </button>
          <button
            id="refreshMonth"
            class="bg-purple-600 hover:bg-purple-700 ml-2 p-1.5 rounded text-white transition duration-200"
            title="Refresh current month"
          >
            <Refresh />
          </button>
          <button
            id="clearCache"
            class="bg-purple-600 hover:bg-purple-700 ml-2 p-1.5 rounded text-white transition duration-200"
            title="Clear cached months"
          >
            <Bin />
          </button>
        </div>
      </div>
      <div class="gap-1 grid grid-cols-7">
        <div class="p-2 font-semibold text-purple-400 text-center">Mon</div>
        <div class="p-2 font-semibold text-purple-400 text-center">Tue</div>
        <div class="p-2 font-semibold text-purple-400 text-center">Wed</div>
        <div class="p-2 font-semibold text-purple-400 text-center">Thu</div>
        <div class="p-2 font-semibold text-purple-400 text-center">Fri</div>
        <div class="p-2 font-semibold text-purple-400 text-center">Sat</div>
        <div class="p-2 font-semibold text-purple-400 text-center">Sun</div>
      </div>
      <div id="calendar-grid" class="gap-1 grid grid-cols-7"></div>
    </section>
  </main>

  <script is:inline>
    // Helper function to open transaction modal with pre-filled type
    function openTransactionModalWithType(type) {
      // Wait for modal to be ready
      setTimeout(() => {
        if (window.openTransactionModal) {
          window.openTransactionModal();

          // Pre-fill the transaction type (capitalize first letter)
          const typeSelect = document.getElementById("type");
          if (typeSelect) {
            const capitalizedType =
              type.charAt(0).toUpperCase() + type.slice(1);
            typeSelect.value = capitalizedType;
          }
        }
      }, 100);
    }

    // Helper function to open recurring modal with pre-filled type
    function openRecurringModalWithType(type) {
      // Wait for modal to be ready
      setTimeout(() => {
        if (window.openRecurringTransactionModal) {
          window.openRecurringTransactionModal();

          // Pre-fill the transaction type (capitalize first letter)
          const typeSelect = document.getElementById("recurringType");
          if (typeSelect) {
            const capitalizedType =
              type.charAt(0).toUpperCase() + type.slice(1);
            typeSelect.value = capitalizedType;
          }
        }
      }, 100);
    }

    // Add event listeners for modal buttons
    const addIncomeBtn = document.getElementById("addIncomeBtn");
    const recurringIncomeBtn = document.getElementById("recurringIncomeBtn");
    const addExpenseBtn = document.getElementById("addExpenseBtn");
    const recurringExpenseBtn = document.getElementById("recurringExpenseBtn");
    const newGroupBtn = document.getElementById("newGroupBtn");

    if (addIncomeBtn) {
      addIncomeBtn.addEventListener("click", () =>
        openTransactionModalWithType("income"),
      );
    }

    if (recurringIncomeBtn) {
      recurringIncomeBtn.addEventListener("click", () =>
        openRecurringModalWithType("income"),
      );
    }

    if (addExpenseBtn) {
      addExpenseBtn.addEventListener("click", () =>
        openTransactionModalWithType("expense"),
      );
    }

    if (recurringExpenseBtn) {
      recurringExpenseBtn.addEventListener("click", () =>
        openRecurringModalWithType("expense"),
      );
    }

    if (newGroupBtn) {
      newGroupBtn.addEventListener("click", () => {
        if (window.openCategoryModal) {
          window.openCategoryModal();
        }
      });
    }
    // document.addEventListener("DOMContentLoaded", () => {
    //   if (addIncomeBtn) addIncomeBtn.click();
    // });
  </script>
</Layout>

<TransactionModal />
<RecurringTransactionModal />
<CategoryModal />
<LogoutScript />
